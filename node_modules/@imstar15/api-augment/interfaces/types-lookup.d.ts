import '@polkadot/types/lookup';
import type { Data } from '@polkadot/types';
import type { BTreeMap, BTreeSet, Bytes, Compact, Enum, Null, Option, Result, Set, Struct, Text, U8aFixed, Vec, WrapperKeepOpaque, bool, i128, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
import type { ITuple } from '@polkadot/types-codec/types';
import type { Vote } from '@polkadot/types/interfaces/elections';
import type { AccountId32, Call, H256, MultiAddress, Perbill, Percent } from '@polkadot/types/interfaces/runtime';
import type { Event } from '@polkadot/types/interfaces/system';
declare module '@polkadot/types/lookup' {
    /** @name FrameSystemAccountInfo (3) */
    interface FrameSystemAccountInfo extends Struct {
        readonly nonce: u32;
        readonly consumers: u32;
        readonly providers: u32;
        readonly sufficients: u32;
        readonly data: PalletBalancesAccountData;
    }
    /** @name PalletBalancesAccountData (5) */
    interface PalletBalancesAccountData extends Struct {
        readonly free: u128;
        readonly reserved: u128;
        readonly miscFrozen: u128;
        readonly feeFrozen: u128;
    }
    /** @name FrameSupportWeightsPerDispatchClassU64 (7) */
    interface FrameSupportWeightsPerDispatchClassU64 extends Struct {
        readonly normal: u64;
        readonly operational: u64;
        readonly mandatory: u64;
    }
    /** @name SpRuntimeDigest (11) */
    interface SpRuntimeDigest extends Struct {
        readonly logs: Vec<SpRuntimeDigestDigestItem>;
    }
    /** @name SpRuntimeDigestDigestItem (13) */
    interface SpRuntimeDigestDigestItem extends Enum {
        readonly isOther: boolean;
        readonly asOther: Bytes;
        readonly isConsensus: boolean;
        readonly asConsensus: ITuple<[U8aFixed, Bytes]>;
        readonly isSeal: boolean;
        readonly asSeal: ITuple<[U8aFixed, Bytes]>;
        readonly isPreRuntime: boolean;
        readonly asPreRuntime: ITuple<[U8aFixed, Bytes]>;
        readonly isRuntimeEnvironmentUpdated: boolean;
        readonly type: 'Other' | 'Consensus' | 'Seal' | 'PreRuntime' | 'RuntimeEnvironmentUpdated';
    }
    /** @name FrameSystemEventRecord (16) */
    interface FrameSystemEventRecord extends Struct {
        readonly phase: FrameSystemPhase;
        readonly event: Event;
        readonly topics: Vec<H256>;
    }
    /** @name FrameSystemEvent (18) */
    interface FrameSystemEvent extends Enum {
        readonly isExtrinsicSuccess: boolean;
        readonly asExtrinsicSuccess: {
            readonly dispatchInfo: FrameSupportWeightsDispatchInfo;
        } & Struct;
        readonly isExtrinsicFailed: boolean;
        readonly asExtrinsicFailed: {
            readonly dispatchError: SpRuntimeDispatchError;
            readonly dispatchInfo: FrameSupportWeightsDispatchInfo;
        } & Struct;
        readonly isCodeUpdated: boolean;
        readonly isNewAccount: boolean;
        readonly asNewAccount: {
            readonly account: AccountId32;
        } & Struct;
        readonly isKilledAccount: boolean;
        readonly asKilledAccount: {
            readonly account: AccountId32;
        } & Struct;
        readonly isRemarked: boolean;
        readonly asRemarked: {
            readonly sender: AccountId32;
            readonly hash_: H256;
        } & Struct;
        readonly type: 'ExtrinsicSuccess' | 'ExtrinsicFailed' | 'CodeUpdated' | 'NewAccount' | 'KilledAccount' | 'Remarked';
    }
    /** @name FrameSupportWeightsDispatchInfo (19) */
    interface FrameSupportWeightsDispatchInfo extends Struct {
        readonly weight: u64;
        readonly class: FrameSupportWeightsDispatchClass;
        readonly paysFee: FrameSupportWeightsPays;
    }
    /** @name FrameSupportWeightsDispatchClass (20) */
    interface FrameSupportWeightsDispatchClass extends Enum {
        readonly isNormal: boolean;
        readonly isOperational: boolean;
        readonly isMandatory: boolean;
        readonly type: 'Normal' | 'Operational' | 'Mandatory';
    }
    /** @name FrameSupportWeightsPays (21) */
    interface FrameSupportWeightsPays extends Enum {
        readonly isYes: boolean;
        readonly isNo: boolean;
        readonly type: 'Yes' | 'No';
    }
    /** @name SpRuntimeDispatchError (22) */
    interface SpRuntimeDispatchError extends Enum {
        readonly isOther: boolean;
        readonly isCannotLookup: boolean;
        readonly isBadOrigin: boolean;
        readonly isModule: boolean;
        readonly asModule: SpRuntimeModuleError;
        readonly isConsumerRemaining: boolean;
        readonly isNoProviders: boolean;
        readonly isTooManyConsumers: boolean;
        readonly isToken: boolean;
        readonly asToken: SpRuntimeTokenError;
        readonly isArithmetic: boolean;
        readonly asArithmetic: SpRuntimeArithmeticError;
        readonly isTransactional: boolean;
        readonly asTransactional: SpRuntimeTransactionalError;
        readonly type: 'Other' | 'CannotLookup' | 'BadOrigin' | 'Module' | 'ConsumerRemaining' | 'NoProviders' | 'TooManyConsumers' | 'Token' | 'Arithmetic' | 'Transactional';
    }
    /** @name SpRuntimeModuleError (23) */
    interface SpRuntimeModuleError extends Struct {
        readonly index: u8;
        readonly error: U8aFixed;
    }
    /** @name SpRuntimeTokenError (24) */
    interface SpRuntimeTokenError extends Enum {
        readonly isNoFunds: boolean;
        readonly isWouldDie: boolean;
        readonly isBelowMinimum: boolean;
        readonly isCannotCreate: boolean;
        readonly isUnknownAsset: boolean;
        readonly isFrozen: boolean;
        readonly isUnsupported: boolean;
        readonly type: 'NoFunds' | 'WouldDie' | 'BelowMinimum' | 'CannotCreate' | 'UnknownAsset' | 'Frozen' | 'Unsupported';
    }
    /** @name SpRuntimeArithmeticError (25) */
    interface SpRuntimeArithmeticError extends Enum {
        readonly isUnderflow: boolean;
        readonly isOverflow: boolean;
        readonly isDivisionByZero: boolean;
        readonly type: 'Underflow' | 'Overflow' | 'DivisionByZero';
    }
    /** @name SpRuntimeTransactionalError (26) */
    interface SpRuntimeTransactionalError extends Enum {
        readonly isLimitReached: boolean;
        readonly isNoLayer: boolean;
        readonly type: 'LimitReached' | 'NoLayer';
    }
    /** @name CumulusPalletParachainSystemEvent (27) */
    interface CumulusPalletParachainSystemEvent extends Enum {
        readonly isValidationFunctionStored: boolean;
        readonly isValidationFunctionApplied: boolean;
        readonly asValidationFunctionApplied: {
            readonly relayChainBlockNum: u32;
        } & Struct;
        readonly isValidationFunctionDiscarded: boolean;
        readonly isUpgradeAuthorized: boolean;
        readonly asUpgradeAuthorized: {
            readonly codeHash: H256;
        } & Struct;
        readonly isDownwardMessagesReceived: boolean;
        readonly asDownwardMessagesReceived: {
            readonly count: u32;
        } & Struct;
        readonly isDownwardMessagesProcessed: boolean;
        readonly asDownwardMessagesProcessed: {
            readonly weightUsed: u64;
            readonly dmqHead: H256;
        } & Struct;
        readonly type: 'ValidationFunctionStored' | 'ValidationFunctionApplied' | 'ValidationFunctionDiscarded' | 'UpgradeAuthorized' | 'DownwardMessagesReceived' | 'DownwardMessagesProcessed';
    }
    /** @name PalletBalancesEvent (28) */
    interface PalletBalancesEvent extends Enum {
        readonly isEndowed: boolean;
        readonly asEndowed: {
            readonly account: AccountId32;
            readonly freeBalance: u128;
        } & Struct;
        readonly isDustLost: boolean;
        readonly asDustLost: {
            readonly account: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isTransfer: boolean;
        readonly asTransfer: {
            readonly from: AccountId32;
            readonly to: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isBalanceSet: boolean;
        readonly asBalanceSet: {
            readonly who: AccountId32;
            readonly free: u128;
            readonly reserved: u128;
        } & Struct;
        readonly isReserved: boolean;
        readonly asReserved: {
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isUnreserved: boolean;
        readonly asUnreserved: {
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isReserveRepatriated: boolean;
        readonly asReserveRepatriated: {
            readonly from: AccountId32;
            readonly to: AccountId32;
            readonly amount: u128;
            readonly destinationStatus: FrameSupportTokensMiscBalanceStatus;
        } & Struct;
        readonly isDeposit: boolean;
        readonly asDeposit: {
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isWithdraw: boolean;
        readonly asWithdraw: {
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isSlashed: boolean;
        readonly asSlashed: {
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly type: 'Endowed' | 'DustLost' | 'Transfer' | 'BalanceSet' | 'Reserved' | 'Unreserved' | 'ReserveRepatriated' | 'Deposit' | 'Withdraw' | 'Slashed';
    }
    /** @name FrameSupportTokensMiscBalanceStatus (29) */
    interface FrameSupportTokensMiscBalanceStatus extends Enum {
        readonly isFree: boolean;
        readonly isReserved: boolean;
        readonly type: 'Free' | 'Reserved';
    }
    /** @name OrmlTokensModuleEvent (30) */
    interface OrmlTokensModuleEvent extends Enum {
        readonly isEndowed: boolean;
        readonly asEndowed: {
            readonly currencyId: u32;
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isDustLost: boolean;
        readonly asDustLost: {
            readonly currencyId: u32;
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isTransfer: boolean;
        readonly asTransfer: {
            readonly currencyId: u32;
            readonly from: AccountId32;
            readonly to: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isReserved: boolean;
        readonly asReserved: {
            readonly currencyId: u32;
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isUnreserved: boolean;
        readonly asUnreserved: {
            readonly currencyId: u32;
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isReserveRepatriated: boolean;
        readonly asReserveRepatriated: {
            readonly currencyId: u32;
            readonly from: AccountId32;
            readonly to: AccountId32;
            readonly amount: u128;
            readonly status: FrameSupportTokensMiscBalanceStatus;
        } & Struct;
        readonly isBalanceSet: boolean;
        readonly asBalanceSet: {
            readonly currencyId: u32;
            readonly who: AccountId32;
            readonly free: u128;
            readonly reserved: u128;
        } & Struct;
        readonly isTotalIssuanceSet: boolean;
        readonly asTotalIssuanceSet: {
            readonly currencyId: u32;
            readonly amount: u128;
        } & Struct;
        readonly isWithdrawn: boolean;
        readonly asWithdrawn: {
            readonly currencyId: u32;
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isSlashed: boolean;
        readonly asSlashed: {
            readonly currencyId: u32;
            readonly who: AccountId32;
            readonly freeAmount: u128;
            readonly reservedAmount: u128;
        } & Struct;
        readonly isDeposited: boolean;
        readonly asDeposited: {
            readonly currencyId: u32;
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isLockSet: boolean;
        readonly asLockSet: {
            readonly lockId: U8aFixed;
            readonly currencyId: u32;
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isLockRemoved: boolean;
        readonly asLockRemoved: {
            readonly lockId: U8aFixed;
            readonly currencyId: u32;
            readonly who: AccountId32;
        } & Struct;
        readonly type: 'Endowed' | 'DustLost' | 'Transfer' | 'Reserved' | 'Unreserved' | 'ReserveRepatriated' | 'BalanceSet' | 'TotalIssuanceSet' | 'Withdrawn' | 'Slashed' | 'Deposited' | 'LockSet' | 'LockRemoved';
    }
    /** @name PalletTransactionPaymentEvent (32) */
    interface PalletTransactionPaymentEvent extends Enum {
        readonly isTransactionFeePaid: boolean;
        readonly asTransactionFeePaid: {
            readonly who: AccountId32;
            readonly actualFee: u128;
            readonly tip: u128;
        } & Struct;
        readonly type: 'TransactionFeePaid';
    }
    /** @name OrmlAssetRegistryModuleEvent (33) */
    interface OrmlAssetRegistryModuleEvent extends Enum {
        readonly isRegisteredAsset: boolean;
        readonly asRegisteredAsset: {
            readonly assetId: u32;
            readonly metadata: OrmlTraitsAssetRegistryAssetMetadata;
        } & Struct;
        readonly isUpdatedAsset: boolean;
        readonly asUpdatedAsset: {
            readonly assetId: u32;
            readonly metadata: OrmlTraitsAssetRegistryAssetMetadata;
        } & Struct;
        readonly type: 'RegisteredAsset' | 'UpdatedAsset';
    }
    /** @name OrmlTraitsAssetRegistryAssetMetadata (34) */
    interface OrmlTraitsAssetRegistryAssetMetadata extends Struct {
        readonly decimals: u32;
        readonly name: Bytes;
        readonly symbol: Bytes;
        readonly existentialDeposit: u128;
        readonly location: Option<XcmVersionedMultiLocation>;
        readonly additional: PrimitivesAssetsCustomMetadata;
    }
    /** @name PrimitivesAssetsCustomMetadata (35) */
    interface PrimitivesAssetsCustomMetadata extends Struct {
        readonly feePerSecond: Option<u128>;
        readonly conversionRate: Option<PrimitivesAssetsConversionRate>;
    }
    /** @name PrimitivesAssetsConversionRate (38) */
    interface PrimitivesAssetsConversionRate extends Struct {
        readonly native: u32;
        readonly foreign: u32;
    }
    /** @name XcmVersionedMultiLocation (40) */
    interface XcmVersionedMultiLocation extends Enum {
        readonly isV0: boolean;
        readonly asV0: XcmV0MultiLocation;
        readonly isV1: boolean;
        readonly asV1: XcmV1MultiLocation;
        readonly type: 'V0' | 'V1';
    }
    /** @name XcmV0MultiLocation (41) */
    interface XcmV0MultiLocation extends Enum {
        readonly isNull: boolean;
        readonly isX1: boolean;
        readonly asX1: XcmV0Junction;
        readonly isX2: boolean;
        readonly asX2: ITuple<[XcmV0Junction, XcmV0Junction]>;
        readonly isX3: boolean;
        readonly asX3: ITuple<[XcmV0Junction, XcmV0Junction, XcmV0Junction]>;
        readonly isX4: boolean;
        readonly asX4: ITuple<[XcmV0Junction, XcmV0Junction, XcmV0Junction, XcmV0Junction]>;
        readonly isX5: boolean;
        readonly asX5: ITuple<[XcmV0Junction, XcmV0Junction, XcmV0Junction, XcmV0Junction, XcmV0Junction]>;
        readonly isX6: boolean;
        readonly asX6: ITuple<[XcmV0Junction, XcmV0Junction, XcmV0Junction, XcmV0Junction, XcmV0Junction, XcmV0Junction]>;
        readonly isX7: boolean;
        readonly asX7: ITuple<[XcmV0Junction, XcmV0Junction, XcmV0Junction, XcmV0Junction, XcmV0Junction, XcmV0Junction, XcmV0Junction]>;
        readonly isX8: boolean;
        readonly asX8: ITuple<[XcmV0Junction, XcmV0Junction, XcmV0Junction, XcmV0Junction, XcmV0Junction, XcmV0Junction, XcmV0Junction, XcmV0Junction]>;
        readonly type: 'Null' | 'X1' | 'X2' | 'X3' | 'X4' | 'X5' | 'X6' | 'X7' | 'X8';
    }
    /** @name XcmV0Junction (42) */
    interface XcmV0Junction extends Enum {
        readonly isParent: boolean;
        readonly isParachain: boolean;
        readonly asParachain: Compact<u32>;
        readonly isAccountId32: boolean;
        readonly asAccountId32: {
            readonly network: XcmV0JunctionNetworkId;
            readonly id: U8aFixed;
        } & Struct;
        readonly isAccountIndex64: boolean;
        readonly asAccountIndex64: {
            readonly network: XcmV0JunctionNetworkId;
            readonly index: Compact<u64>;
        } & Struct;
        readonly isAccountKey20: boolean;
        readonly asAccountKey20: {
            readonly network: XcmV0JunctionNetworkId;
            readonly key: U8aFixed;
        } & Struct;
        readonly isPalletInstance: boolean;
        readonly asPalletInstance: u8;
        readonly isGeneralIndex: boolean;
        readonly asGeneralIndex: Compact<u128>;
        readonly isGeneralKey: boolean;
        readonly asGeneralKey: Bytes;
        readonly isOnlyChild: boolean;
        readonly isPlurality: boolean;
        readonly asPlurality: {
            readonly id: XcmV0JunctionBodyId;
            readonly part: XcmV0JunctionBodyPart;
        } & Struct;
        readonly type: 'Parent' | 'Parachain' | 'AccountId32' | 'AccountIndex64' | 'AccountKey20' | 'PalletInstance' | 'GeneralIndex' | 'GeneralKey' | 'OnlyChild' | 'Plurality';
    }
    /** @name XcmV0JunctionNetworkId (44) */
    interface XcmV0JunctionNetworkId extends Enum {
        readonly isAny: boolean;
        readonly isNamed: boolean;
        readonly asNamed: Bytes;
        readonly isPolkadot: boolean;
        readonly isKusama: boolean;
        readonly type: 'Any' | 'Named' | 'Polkadot' | 'Kusama';
    }
    /** @name XcmV0JunctionBodyId (49) */
    interface XcmV0JunctionBodyId extends Enum {
        readonly isUnit: boolean;
        readonly isNamed: boolean;
        readonly asNamed: Bytes;
        readonly isIndex: boolean;
        readonly asIndex: Compact<u32>;
        readonly isExecutive: boolean;
        readonly isTechnical: boolean;
        readonly isLegislative: boolean;
        readonly isJudicial: boolean;
        readonly type: 'Unit' | 'Named' | 'Index' | 'Executive' | 'Technical' | 'Legislative' | 'Judicial';
    }
    /** @name XcmV0JunctionBodyPart (50) */
    interface XcmV0JunctionBodyPart extends Enum {
        readonly isVoice: boolean;
        readonly isMembers: boolean;
        readonly asMembers: {
            readonly count: Compact<u32>;
        } & Struct;
        readonly isFraction: boolean;
        readonly asFraction: {
            readonly nom: Compact<u32>;
            readonly denom: Compact<u32>;
        } & Struct;
        readonly isAtLeastProportion: boolean;
        readonly asAtLeastProportion: {
            readonly nom: Compact<u32>;
            readonly denom: Compact<u32>;
        } & Struct;
        readonly isMoreThanProportion: boolean;
        readonly asMoreThanProportion: {
            readonly nom: Compact<u32>;
            readonly denom: Compact<u32>;
        } & Struct;
        readonly type: 'Voice' | 'Members' | 'Fraction' | 'AtLeastProportion' | 'MoreThanProportion';
    }
    /** @name XcmV1MultiLocation (51) */
    interface XcmV1MultiLocation extends Struct {
        readonly parents: u8;
        readonly interior: XcmV1MultilocationJunctions;
    }
    /** @name XcmV1MultilocationJunctions (52) */
    interface XcmV1MultilocationJunctions extends Enum {
        readonly isHere: boolean;
        readonly isX1: boolean;
        readonly asX1: XcmV1Junction;
        readonly isX2: boolean;
        readonly asX2: ITuple<[XcmV1Junction, XcmV1Junction]>;
        readonly isX3: boolean;
        readonly asX3: ITuple<[XcmV1Junction, XcmV1Junction, XcmV1Junction]>;
        readonly isX4: boolean;
        readonly asX4: ITuple<[XcmV1Junction, XcmV1Junction, XcmV1Junction, XcmV1Junction]>;
        readonly isX5: boolean;
        readonly asX5: ITuple<[XcmV1Junction, XcmV1Junction, XcmV1Junction, XcmV1Junction, XcmV1Junction]>;
        readonly isX6: boolean;
        readonly asX6: ITuple<[XcmV1Junction, XcmV1Junction, XcmV1Junction, XcmV1Junction, XcmV1Junction, XcmV1Junction]>;
        readonly isX7: boolean;
        readonly asX7: ITuple<[XcmV1Junction, XcmV1Junction, XcmV1Junction, XcmV1Junction, XcmV1Junction, XcmV1Junction, XcmV1Junction]>;
        readonly isX8: boolean;
        readonly asX8: ITuple<[XcmV1Junction, XcmV1Junction, XcmV1Junction, XcmV1Junction, XcmV1Junction, XcmV1Junction, XcmV1Junction, XcmV1Junction]>;
        readonly type: 'Here' | 'X1' | 'X2' | 'X3' | 'X4' | 'X5' | 'X6' | 'X7' | 'X8';
    }
    /** @name XcmV1Junction (53) */
    interface XcmV1Junction extends Enum {
        readonly isParachain: boolean;
        readonly asParachain: Compact<u32>;
        readonly isAccountId32: boolean;
        readonly asAccountId32: {
            readonly network: XcmV0JunctionNetworkId;
            readonly id: U8aFixed;
        } & Struct;
        readonly isAccountIndex64: boolean;
        readonly asAccountIndex64: {
            readonly network: XcmV0JunctionNetworkId;
            readonly index: Compact<u64>;
        } & Struct;
        readonly isAccountKey20: boolean;
        readonly asAccountKey20: {
            readonly network: XcmV0JunctionNetworkId;
            readonly key: U8aFixed;
        } & Struct;
        readonly isPalletInstance: boolean;
        readonly asPalletInstance: u8;
        readonly isGeneralIndex: boolean;
        readonly asGeneralIndex: Compact<u128>;
        readonly isGeneralKey: boolean;
        readonly asGeneralKey: Bytes;
        readonly isOnlyChild: boolean;
        readonly isPlurality: boolean;
        readonly asPlurality: {
            readonly id: XcmV0JunctionBodyId;
            readonly part: XcmV0JunctionBodyPart;
        } & Struct;
        readonly type: 'Parachain' | 'AccountId32' | 'AccountIndex64' | 'AccountKey20' | 'PalletInstance' | 'GeneralIndex' | 'GeneralKey' | 'OnlyChild' | 'Plurality';
    }
    /** @name PalletSessionEvent (54) */
    interface PalletSessionEvent extends Enum {
        readonly isNewSession: boolean;
        readonly asNewSession: {
            readonly sessionIndex: u32;
        } & Struct;
        readonly type: 'NewSession';
    }
    /** @name PalletParachainStakingEvent (55) */
    interface PalletParachainStakingEvent extends Enum {
        readonly isNewRound: boolean;
        readonly asNewRound: {
            readonly startingBlock: u32;
            readonly round: u32;
            readonly selectedCollatorsNumber: u32;
            readonly totalBalance: u128;
        } & Struct;
        readonly isJoinedCollatorCandidates: boolean;
        readonly asJoinedCollatorCandidates: {
            readonly account: AccountId32;
            readonly amountLocked: u128;
            readonly newTotalAmtLocked: u128;
        } & Struct;
        readonly isCollatorChosen: boolean;
        readonly asCollatorChosen: {
            readonly round: u32;
            readonly collatorAccount: AccountId32;
            readonly totalExposedAmount: u128;
        } & Struct;
        readonly isCandidateBondLessRequested: boolean;
        readonly asCandidateBondLessRequested: {
            readonly candidate: AccountId32;
            readonly amountToDecrease: u128;
            readonly executeRound: u32;
        } & Struct;
        readonly isCandidateBondedMore: boolean;
        readonly asCandidateBondedMore: {
            readonly candidate: AccountId32;
            readonly amount: u128;
            readonly newTotalBond: u128;
        } & Struct;
        readonly isCandidateBondedLess: boolean;
        readonly asCandidateBondedLess: {
            readonly candidate: AccountId32;
            readonly amount: u128;
            readonly newBond: u128;
        } & Struct;
        readonly isCandidateWentOffline: boolean;
        readonly asCandidateWentOffline: {
            readonly candidate: AccountId32;
        } & Struct;
        readonly isCandidateBackOnline: boolean;
        readonly asCandidateBackOnline: {
            readonly candidate: AccountId32;
        } & Struct;
        readonly isCandidateScheduledExit: boolean;
        readonly asCandidateScheduledExit: {
            readonly exitAllowedRound: u32;
            readonly candidate: AccountId32;
            readonly scheduledExit: u32;
        } & Struct;
        readonly isCancelledCandidateExit: boolean;
        readonly asCancelledCandidateExit: {
            readonly candidate: AccountId32;
        } & Struct;
        readonly isCancelledCandidateBondLess: boolean;
        readonly asCancelledCandidateBondLess: {
            readonly candidate: AccountId32;
            readonly amount: u128;
            readonly executeRound: u32;
        } & Struct;
        readonly isCandidateLeft: boolean;
        readonly asCandidateLeft: {
            readonly exCandidate: AccountId32;
            readonly unlockedAmount: u128;
            readonly newTotalAmtLocked: u128;
        } & Struct;
        readonly isDelegationDecreaseScheduled: boolean;
        readonly asDelegationDecreaseScheduled: {
            readonly delegator: AccountId32;
            readonly candidate: AccountId32;
            readonly amountToDecrease: u128;
            readonly executeRound: u32;
        } & Struct;
        readonly isDelegationIncreased: boolean;
        readonly asDelegationIncreased: {
            readonly delegator: AccountId32;
            readonly candidate: AccountId32;
            readonly amount: u128;
            readonly inTop: bool;
        } & Struct;
        readonly isDelegationDecreased: boolean;
        readonly asDelegationDecreased: {
            readonly delegator: AccountId32;
            readonly candidate: AccountId32;
            readonly amount: u128;
            readonly inTop: bool;
        } & Struct;
        readonly isDelegatorExitScheduled: boolean;
        readonly asDelegatorExitScheduled: {
            readonly round: u32;
            readonly delegator: AccountId32;
            readonly scheduledExit: u32;
        } & Struct;
        readonly isDelegationRevocationScheduled: boolean;
        readonly asDelegationRevocationScheduled: {
            readonly round: u32;
            readonly delegator: AccountId32;
            readonly candidate: AccountId32;
            readonly scheduledExit: u32;
        } & Struct;
        readonly isDelegatorLeft: boolean;
        readonly asDelegatorLeft: {
            readonly delegator: AccountId32;
            readonly unstakedAmount: u128;
        } & Struct;
        readonly isDelegationRevoked: boolean;
        readonly asDelegationRevoked: {
            readonly delegator: AccountId32;
            readonly candidate: AccountId32;
            readonly unstakedAmount: u128;
        } & Struct;
        readonly isDelegationKicked: boolean;
        readonly asDelegationKicked: {
            readonly delegator: AccountId32;
            readonly candidate: AccountId32;
            readonly unstakedAmount: u128;
        } & Struct;
        readonly isDelegatorExitCancelled: boolean;
        readonly asDelegatorExitCancelled: {
            readonly delegator: AccountId32;
        } & Struct;
        readonly isCancelledDelegationRequest: boolean;
        readonly asCancelledDelegationRequest: {
            readonly delegator: AccountId32;
            readonly cancelledRequest: PalletParachainStakingDelegationRequestsCancelledScheduledRequest;
            readonly collator: AccountId32;
        } & Struct;
        readonly isDelegation: boolean;
        readonly asDelegation: {
            readonly delegator: AccountId32;
            readonly lockedAmount: u128;
            readonly candidate: AccountId32;
            readonly delegatorPosition: PalletParachainStakingDelegatorAdded;
        } & Struct;
        readonly isDelegatorLeftCandidate: boolean;
        readonly asDelegatorLeftCandidate: {
            readonly delegator: AccountId32;
            readonly candidate: AccountId32;
            readonly unstakedAmount: u128;
            readonly totalCandidateStaked: u128;
        } & Struct;
        readonly isRewarded: boolean;
        readonly asRewarded: {
            readonly account: AccountId32;
            readonly rewards: u128;
        } & Struct;
        readonly isReservedForParachainBond: boolean;
        readonly asReservedForParachainBond: {
            readonly account: AccountId32;
            readonly value: u128;
        } & Struct;
        readonly isParachainBondAccountSet: boolean;
        readonly asParachainBondAccountSet: {
            readonly old: AccountId32;
            readonly new_: AccountId32;
        } & Struct;
        readonly isParachainBondReservePercentSet: boolean;
        readonly asParachainBondReservePercentSet: {
            readonly old: Percent;
            readonly new_: Percent;
        } & Struct;
        readonly isInflationSet: boolean;
        readonly asInflationSet: {
            readonly annualMin: Perbill;
            readonly annualIdeal: Perbill;
            readonly annualMax: Perbill;
            readonly roundMin: Perbill;
            readonly roundIdeal: Perbill;
            readonly roundMax: Perbill;
        } & Struct;
        readonly isStakeExpectationsSet: boolean;
        readonly asStakeExpectationsSet: {
            readonly expectMin: u128;
            readonly expectIdeal: u128;
            readonly expectMax: u128;
        } & Struct;
        readonly isTotalSelectedSet: boolean;
        readonly asTotalSelectedSet: {
            readonly old: u32;
            readonly new_: u32;
        } & Struct;
        readonly isCollatorCommissionSet: boolean;
        readonly asCollatorCommissionSet: {
            readonly old: Perbill;
            readonly new_: Perbill;
        } & Struct;
        readonly isBlocksPerRoundSet: boolean;
        readonly asBlocksPerRoundSet: {
            readonly currentRound: u32;
            readonly firstBlock: u32;
            readonly old: u32;
            readonly new_: u32;
            readonly newPerRoundInflationMin: Perbill;
            readonly newPerRoundInflationIdeal: Perbill;
            readonly newPerRoundInflationMax: Perbill;
        } & Struct;
        readonly type: 'NewRound' | 'JoinedCollatorCandidates' | 'CollatorChosen' | 'CandidateBondLessRequested' | 'CandidateBondedMore' | 'CandidateBondedLess' | 'CandidateWentOffline' | 'CandidateBackOnline' | 'CandidateScheduledExit' | 'CancelledCandidateExit' | 'CancelledCandidateBondLess' | 'CandidateLeft' | 'DelegationDecreaseScheduled' | 'DelegationIncreased' | 'DelegationDecreased' | 'DelegatorExitScheduled' | 'DelegationRevocationScheduled' | 'DelegatorLeft' | 'DelegationRevoked' | 'DelegationKicked' | 'DelegatorExitCancelled' | 'CancelledDelegationRequest' | 'Delegation' | 'DelegatorLeftCandidate' | 'Rewarded' | 'ReservedForParachainBond' | 'ParachainBondAccountSet' | 'ParachainBondReservePercentSet' | 'InflationSet' | 'StakeExpectationsSet' | 'TotalSelectedSet' | 'CollatorCommissionSet' | 'BlocksPerRoundSet';
    }
    /** @name PalletParachainStakingDelegationRequestsCancelledScheduledRequest (57) */
    interface PalletParachainStakingDelegationRequestsCancelledScheduledRequest extends Struct {
        readonly whenExecutable: u32;
        readonly action: PalletParachainStakingDelegationRequestsDelegationAction;
    }
    /** @name PalletParachainStakingDelegationRequestsDelegationAction (58) */
    interface PalletParachainStakingDelegationRequestsDelegationAction extends Enum {
        readonly isRevoke: boolean;
        readonly asRevoke: u128;
        readonly isDecrease: boolean;
        readonly asDecrease: u128;
        readonly type: 'Revoke' | 'Decrease';
    }
    /** @name PalletParachainStakingDelegatorAdded (59) */
    interface PalletParachainStakingDelegatorAdded extends Enum {
        readonly isAddedToTop: boolean;
        readonly asAddedToTop: {
            readonly newTotal: u128;
        } & Struct;
        readonly isAddedToBottom: boolean;
        readonly type: 'AddedToTop' | 'AddedToBottom';
    }
    /** @name PalletValveEvent (62) */
    interface PalletValveEvent extends Enum {
        readonly isValveClosed: boolean;
        readonly isValveOpen: boolean;
        readonly isPalletGateClosed: boolean;
        readonly asPalletGateClosed: {
            readonly palletNameBytes: Bytes;
        } & Struct;
        readonly isPalletGateOpen: boolean;
        readonly asPalletGateOpen: {
            readonly palletNameBytes: Bytes;
        } & Struct;
        readonly isScheduledTasksStopped: boolean;
        readonly isScheduledTasksResumed: boolean;
        readonly isPalletGatesClosed: boolean;
        readonly asPalletGatesClosed: {
            readonly count: u8;
        } & Struct;
        readonly type: 'ValveClosed' | 'ValveOpen' | 'PalletGateClosed' | 'PalletGateOpen' | 'ScheduledTasksStopped' | 'ScheduledTasksResumed' | 'PalletGatesClosed';
    }
    /** @name PalletIdentityEvent (63) */
    interface PalletIdentityEvent extends Enum {
        readonly isIdentitySet: boolean;
        readonly asIdentitySet: {
            readonly who: AccountId32;
        } & Struct;
        readonly isIdentityCleared: boolean;
        readonly asIdentityCleared: {
            readonly who: AccountId32;
            readonly deposit: u128;
        } & Struct;
        readonly isIdentityKilled: boolean;
        readonly asIdentityKilled: {
            readonly who: AccountId32;
            readonly deposit: u128;
        } & Struct;
        readonly isJudgementRequested: boolean;
        readonly asJudgementRequested: {
            readonly who: AccountId32;
            readonly registrarIndex: u32;
        } & Struct;
        readonly isJudgementUnrequested: boolean;
        readonly asJudgementUnrequested: {
            readonly who: AccountId32;
            readonly registrarIndex: u32;
        } & Struct;
        readonly isJudgementGiven: boolean;
        readonly asJudgementGiven: {
            readonly target: AccountId32;
            readonly registrarIndex: u32;
        } & Struct;
        readonly isRegistrarAdded: boolean;
        readonly asRegistrarAdded: {
            readonly registrarIndex: u32;
        } & Struct;
        readonly isSubIdentityAdded: boolean;
        readonly asSubIdentityAdded: {
            readonly sub: AccountId32;
            readonly main: AccountId32;
            readonly deposit: u128;
        } & Struct;
        readonly isSubIdentityRemoved: boolean;
        readonly asSubIdentityRemoved: {
            readonly sub: AccountId32;
            readonly main: AccountId32;
            readonly deposit: u128;
        } & Struct;
        readonly isSubIdentityRevoked: boolean;
        readonly asSubIdentityRevoked: {
            readonly sub: AccountId32;
            readonly main: AccountId32;
            readonly deposit: u128;
        } & Struct;
        readonly type: 'IdentitySet' | 'IdentityCleared' | 'IdentityKilled' | 'JudgementRequested' | 'JudgementUnrequested' | 'JudgementGiven' | 'RegistrarAdded' | 'SubIdentityAdded' | 'SubIdentityRemoved' | 'SubIdentityRevoked';
    }
    /** @name PalletProxyEvent (64) */
    interface PalletProxyEvent extends Enum {
        readonly isProxyExecuted: boolean;
        readonly asProxyExecuted: {
            readonly result: Result<Null, SpRuntimeDispatchError>;
        } & Struct;
        readonly isAnonymousCreated: boolean;
        readonly asAnonymousCreated: {
            readonly anonymous: AccountId32;
            readonly who: AccountId32;
            readonly proxyType: TuringRuntimeProxyType;
            readonly disambiguationIndex: u16;
        } & Struct;
        readonly isAnnounced: boolean;
        readonly asAnnounced: {
            readonly real: AccountId32;
            readonly proxy: AccountId32;
            readonly callHash: H256;
        } & Struct;
        readonly isProxyAdded: boolean;
        readonly asProxyAdded: {
            readonly delegator: AccountId32;
            readonly delegatee: AccountId32;
            readonly proxyType: TuringRuntimeProxyType;
            readonly delay: u32;
        } & Struct;
        readonly isProxyRemoved: boolean;
        readonly asProxyRemoved: {
            readonly delegator: AccountId32;
            readonly delegatee: AccountId32;
            readonly proxyType: TuringRuntimeProxyType;
            readonly delay: u32;
        } & Struct;
        readonly type: 'ProxyExecuted' | 'AnonymousCreated' | 'Announced' | 'ProxyAdded' | 'ProxyRemoved';
    }
    /** @name TuringRuntimeProxyType (67) */
    interface TuringRuntimeProxyType extends Enum {
        readonly isAny: boolean;
        readonly isSession: boolean;
        readonly isStaking: boolean;
        readonly type: 'Any' | 'Session' | 'Staking';
    }
    /** @name PalletUtilityEvent (69) */
    interface PalletUtilityEvent extends Enum {
        readonly isBatchInterrupted: boolean;
        readonly asBatchInterrupted: {
            readonly index: u32;
            readonly error: SpRuntimeDispatchError;
        } & Struct;
        readonly isBatchCompleted: boolean;
        readonly isBatchCompletedWithErrors: boolean;
        readonly isItemCompleted: boolean;
        readonly isItemFailed: boolean;
        readonly asItemFailed: {
            readonly error: SpRuntimeDispatchError;
        } & Struct;
        readonly isDispatchedAs: boolean;
        readonly asDispatchedAs: {
            readonly result: Result<Null, SpRuntimeDispatchError>;
        } & Struct;
        readonly type: 'BatchInterrupted' | 'BatchCompleted' | 'BatchCompletedWithErrors' | 'ItemCompleted' | 'ItemFailed' | 'DispatchedAs';
    }
    /** @name CumulusPalletXcmpQueueEvent (70) */
    interface CumulusPalletXcmpQueueEvent extends Enum {
        readonly isSuccess: boolean;
        readonly asSuccess: {
            readonly messageHash: Option<H256>;
            readonly weight: u64;
        } & Struct;
        readonly isFail: boolean;
        readonly asFail: {
            readonly messageHash: Option<H256>;
            readonly error: XcmV2TraitsError;
            readonly weight: u64;
        } & Struct;
        readonly isBadVersion: boolean;
        readonly asBadVersion: {
            readonly messageHash: Option<H256>;
        } & Struct;
        readonly isBadFormat: boolean;
        readonly asBadFormat: {
            readonly messageHash: Option<H256>;
        } & Struct;
        readonly isUpwardMessageSent: boolean;
        readonly asUpwardMessageSent: {
            readonly messageHash: Option<H256>;
        } & Struct;
        readonly isXcmpMessageSent: boolean;
        readonly asXcmpMessageSent: {
            readonly messageHash: Option<H256>;
        } & Struct;
        readonly isOverweightEnqueued: boolean;
        readonly asOverweightEnqueued: {
            readonly sender: u32;
            readonly sentAt: u32;
            readonly index: u64;
            readonly required: u64;
        } & Struct;
        readonly isOverweightServiced: boolean;
        readonly asOverweightServiced: {
            readonly index: u64;
            readonly used: u64;
        } & Struct;
        readonly type: 'Success' | 'Fail' | 'BadVersion' | 'BadFormat' | 'UpwardMessageSent' | 'XcmpMessageSent' | 'OverweightEnqueued' | 'OverweightServiced';
    }
    /** @name XcmV2TraitsError (72) */
    interface XcmV2TraitsError extends Enum {
        readonly isOverflow: boolean;
        readonly isUnimplemented: boolean;
        readonly isUntrustedReserveLocation: boolean;
        readonly isUntrustedTeleportLocation: boolean;
        readonly isMultiLocationFull: boolean;
        readonly isMultiLocationNotInvertible: boolean;
        readonly isBadOrigin: boolean;
        readonly isInvalidLocation: boolean;
        readonly isAssetNotFound: boolean;
        readonly isFailedToTransactAsset: boolean;
        readonly isNotWithdrawable: boolean;
        readonly isLocationCannotHold: boolean;
        readonly isExceedsMaxMessageSize: boolean;
        readonly isDestinationUnsupported: boolean;
        readonly isTransport: boolean;
        readonly isUnroutable: boolean;
        readonly isUnknownClaim: boolean;
        readonly isFailedToDecode: boolean;
        readonly isMaxWeightInvalid: boolean;
        readonly isNotHoldingFees: boolean;
        readonly isTooExpensive: boolean;
        readonly isTrap: boolean;
        readonly asTrap: u64;
        readonly isUnhandledXcmVersion: boolean;
        readonly isWeightLimitReached: boolean;
        readonly asWeightLimitReached: u64;
        readonly isBarrier: boolean;
        readonly isWeightNotComputable: boolean;
        readonly type: 'Overflow' | 'Unimplemented' | 'UntrustedReserveLocation' | 'UntrustedTeleportLocation' | 'MultiLocationFull' | 'MultiLocationNotInvertible' | 'BadOrigin' | 'InvalidLocation' | 'AssetNotFound' | 'FailedToTransactAsset' | 'NotWithdrawable' | 'LocationCannotHold' | 'ExceedsMaxMessageSize' | 'DestinationUnsupported' | 'Transport' | 'Unroutable' | 'UnknownClaim' | 'FailedToDecode' | 'MaxWeightInvalid' | 'NotHoldingFees' | 'TooExpensive' | 'Trap' | 'UnhandledXcmVersion' | 'WeightLimitReached' | 'Barrier' | 'WeightNotComputable';
    }
    /** @name PalletXcmEvent (74) */
    interface PalletXcmEvent extends Enum {
        readonly isAttempted: boolean;
        readonly asAttempted: XcmV2TraitsOutcome;
        readonly isSent: boolean;
        readonly asSent: ITuple<[XcmV1MultiLocation, XcmV1MultiLocation, XcmV2Xcm]>;
        readonly isUnexpectedResponse: boolean;
        readonly asUnexpectedResponse: ITuple<[XcmV1MultiLocation, u64]>;
        readonly isResponseReady: boolean;
        readonly asResponseReady: ITuple<[u64, XcmV2Response]>;
        readonly isNotified: boolean;
        readonly asNotified: ITuple<[u64, u8, u8]>;
        readonly isNotifyOverweight: boolean;
        readonly asNotifyOverweight: ITuple<[u64, u8, u8, u64, u64]>;
        readonly isNotifyDispatchError: boolean;
        readonly asNotifyDispatchError: ITuple<[u64, u8, u8]>;
        readonly isNotifyDecodeFailed: boolean;
        readonly asNotifyDecodeFailed: ITuple<[u64, u8, u8]>;
        readonly isInvalidResponder: boolean;
        readonly asInvalidResponder: ITuple<[XcmV1MultiLocation, u64, Option<XcmV1MultiLocation>]>;
        readonly isInvalidResponderVersion: boolean;
        readonly asInvalidResponderVersion: ITuple<[XcmV1MultiLocation, u64]>;
        readonly isResponseTaken: boolean;
        readonly asResponseTaken: u64;
        readonly isAssetsTrapped: boolean;
        readonly asAssetsTrapped: ITuple<[H256, XcmV1MultiLocation, XcmVersionedMultiAssets]>;
        readonly isVersionChangeNotified: boolean;
        readonly asVersionChangeNotified: ITuple<[XcmV1MultiLocation, u32]>;
        readonly isSupportedVersionChanged: boolean;
        readonly asSupportedVersionChanged: ITuple<[XcmV1MultiLocation, u32]>;
        readonly isNotifyTargetSendFail: boolean;
        readonly asNotifyTargetSendFail: ITuple<[XcmV1MultiLocation, u64, XcmV2TraitsError]>;
        readonly isNotifyTargetMigrationFail: boolean;
        readonly asNotifyTargetMigrationFail: ITuple<[XcmVersionedMultiLocation, u64]>;
        readonly type: 'Attempted' | 'Sent' | 'UnexpectedResponse' | 'ResponseReady' | 'Notified' | 'NotifyOverweight' | 'NotifyDispatchError' | 'NotifyDecodeFailed' | 'InvalidResponder' | 'InvalidResponderVersion' | 'ResponseTaken' | 'AssetsTrapped' | 'VersionChangeNotified' | 'SupportedVersionChanged' | 'NotifyTargetSendFail' | 'NotifyTargetMigrationFail';
    }
    /** @name XcmV2TraitsOutcome (75) */
    interface XcmV2TraitsOutcome extends Enum {
        readonly isComplete: boolean;
        readonly asComplete: u64;
        readonly isIncomplete: boolean;
        readonly asIncomplete: ITuple<[u64, XcmV2TraitsError]>;
        readonly isError: boolean;
        readonly asError: XcmV2TraitsError;
        readonly type: 'Complete' | 'Incomplete' | 'Error';
    }
    /** @name XcmV2Xcm (76) */
    interface XcmV2Xcm extends Vec<XcmV2Instruction> {
    }
    /** @name XcmV2Instruction (78) */
    interface XcmV2Instruction extends Enum {
        readonly isWithdrawAsset: boolean;
        readonly asWithdrawAsset: XcmV1MultiassetMultiAssets;
        readonly isReserveAssetDeposited: boolean;
        readonly asReserveAssetDeposited: XcmV1MultiassetMultiAssets;
        readonly isReceiveTeleportedAsset: boolean;
        readonly asReceiveTeleportedAsset: XcmV1MultiassetMultiAssets;
        readonly isQueryResponse: boolean;
        readonly asQueryResponse: {
            readonly queryId: Compact<u64>;
            readonly response: XcmV2Response;
            readonly maxWeight: Compact<u64>;
        } & Struct;
        readonly isTransferAsset: boolean;
        readonly asTransferAsset: {
            readonly assets: XcmV1MultiassetMultiAssets;
            readonly beneficiary: XcmV1MultiLocation;
        } & Struct;
        readonly isTransferReserveAsset: boolean;
        readonly asTransferReserveAsset: {
            readonly assets: XcmV1MultiassetMultiAssets;
            readonly dest: XcmV1MultiLocation;
            readonly xcm: XcmV2Xcm;
        } & Struct;
        readonly isTransact: boolean;
        readonly asTransact: {
            readonly originType: XcmV0OriginKind;
            readonly requireWeightAtMost: Compact<u64>;
            readonly call: XcmDoubleEncoded;
        } & Struct;
        readonly isHrmpNewChannelOpenRequest: boolean;
        readonly asHrmpNewChannelOpenRequest: {
            readonly sender: Compact<u32>;
            readonly maxMessageSize: Compact<u32>;
            readonly maxCapacity: Compact<u32>;
        } & Struct;
        readonly isHrmpChannelAccepted: boolean;
        readonly asHrmpChannelAccepted: {
            readonly recipient: Compact<u32>;
        } & Struct;
        readonly isHrmpChannelClosing: boolean;
        readonly asHrmpChannelClosing: {
            readonly initiator: Compact<u32>;
            readonly sender: Compact<u32>;
            readonly recipient: Compact<u32>;
        } & Struct;
        readonly isClearOrigin: boolean;
        readonly isDescendOrigin: boolean;
        readonly asDescendOrigin: XcmV1MultilocationJunctions;
        readonly isReportError: boolean;
        readonly asReportError: {
            readonly queryId: Compact<u64>;
            readonly dest: XcmV1MultiLocation;
            readonly maxResponseWeight: Compact<u64>;
        } & Struct;
        readonly isDepositAsset: boolean;
        readonly asDepositAsset: {
            readonly assets: XcmV1MultiassetMultiAssetFilter;
            readonly maxAssets: Compact<u32>;
            readonly beneficiary: XcmV1MultiLocation;
        } & Struct;
        readonly isDepositReserveAsset: boolean;
        readonly asDepositReserveAsset: {
            readonly assets: XcmV1MultiassetMultiAssetFilter;
            readonly maxAssets: Compact<u32>;
            readonly dest: XcmV1MultiLocation;
            readonly xcm: XcmV2Xcm;
        } & Struct;
        readonly isExchangeAsset: boolean;
        readonly asExchangeAsset: {
            readonly give: XcmV1MultiassetMultiAssetFilter;
            readonly receive: XcmV1MultiassetMultiAssets;
        } & Struct;
        readonly isInitiateReserveWithdraw: boolean;
        readonly asInitiateReserveWithdraw: {
            readonly assets: XcmV1MultiassetMultiAssetFilter;
            readonly reserve: XcmV1MultiLocation;
            readonly xcm: XcmV2Xcm;
        } & Struct;
        readonly isInitiateTeleport: boolean;
        readonly asInitiateTeleport: {
            readonly assets: XcmV1MultiassetMultiAssetFilter;
            readonly dest: XcmV1MultiLocation;
            readonly xcm: XcmV2Xcm;
        } & Struct;
        readonly isQueryHolding: boolean;
        readonly asQueryHolding: {
            readonly queryId: Compact<u64>;
            readonly dest: XcmV1MultiLocation;
            readonly assets: XcmV1MultiassetMultiAssetFilter;
            readonly maxResponseWeight: Compact<u64>;
        } & Struct;
        readonly isBuyExecution: boolean;
        readonly asBuyExecution: {
            readonly fees: XcmV1MultiAsset;
            readonly weightLimit: XcmV2WeightLimit;
        } & Struct;
        readonly isRefundSurplus: boolean;
        readonly isSetErrorHandler: boolean;
        readonly asSetErrorHandler: XcmV2Xcm;
        readonly isSetAppendix: boolean;
        readonly asSetAppendix: XcmV2Xcm;
        readonly isClearError: boolean;
        readonly isClaimAsset: boolean;
        readonly asClaimAsset: {
            readonly assets: XcmV1MultiassetMultiAssets;
            readonly ticket: XcmV1MultiLocation;
        } & Struct;
        readonly isTrap: boolean;
        readonly asTrap: Compact<u64>;
        readonly isSubscribeVersion: boolean;
        readonly asSubscribeVersion: {
            readonly queryId: Compact<u64>;
            readonly maxResponseWeight: Compact<u64>;
        } & Struct;
        readonly isUnsubscribeVersion: boolean;
        readonly type: 'WithdrawAsset' | 'ReserveAssetDeposited' | 'ReceiveTeleportedAsset' | 'QueryResponse' | 'TransferAsset' | 'TransferReserveAsset' | 'Transact' | 'HrmpNewChannelOpenRequest' | 'HrmpChannelAccepted' | 'HrmpChannelClosing' | 'ClearOrigin' | 'DescendOrigin' | 'ReportError' | 'DepositAsset' | 'DepositReserveAsset' | 'ExchangeAsset' | 'InitiateReserveWithdraw' | 'InitiateTeleport' | 'QueryHolding' | 'BuyExecution' | 'RefundSurplus' | 'SetErrorHandler' | 'SetAppendix' | 'ClearError' | 'ClaimAsset' | 'Trap' | 'SubscribeVersion' | 'UnsubscribeVersion';
    }
    /** @name XcmV1MultiassetMultiAssets (79) */
    interface XcmV1MultiassetMultiAssets extends Vec<XcmV1MultiAsset> {
    }
    /** @name XcmV1MultiAsset (81) */
    interface XcmV1MultiAsset extends Struct {
        readonly id: XcmV1MultiassetAssetId;
        readonly fun: XcmV1MultiassetFungibility;
    }
    /** @name XcmV1MultiassetAssetId (82) */
    interface XcmV1MultiassetAssetId extends Enum {
        readonly isConcrete: boolean;
        readonly asConcrete: XcmV1MultiLocation;
        readonly isAbstract: boolean;
        readonly asAbstract: Bytes;
        readonly type: 'Concrete' | 'Abstract';
    }
    /** @name XcmV1MultiassetFungibility (83) */
    interface XcmV1MultiassetFungibility extends Enum {
        readonly isFungible: boolean;
        readonly asFungible: Compact<u128>;
        readonly isNonFungible: boolean;
        readonly asNonFungible: XcmV1MultiassetAssetInstance;
        readonly type: 'Fungible' | 'NonFungible';
    }
    /** @name XcmV1MultiassetAssetInstance (84) */
    interface XcmV1MultiassetAssetInstance extends Enum {
        readonly isUndefined: boolean;
        readonly isIndex: boolean;
        readonly asIndex: Compact<u128>;
        readonly isArray4: boolean;
        readonly asArray4: U8aFixed;
        readonly isArray8: boolean;
        readonly asArray8: U8aFixed;
        readonly isArray16: boolean;
        readonly asArray16: U8aFixed;
        readonly isArray32: boolean;
        readonly asArray32: U8aFixed;
        readonly isBlob: boolean;
        readonly asBlob: Bytes;
        readonly type: 'Undefined' | 'Index' | 'Array4' | 'Array8' | 'Array16' | 'Array32' | 'Blob';
    }
    /** @name XcmV2Response (86) */
    interface XcmV2Response extends Enum {
        readonly isNull: boolean;
        readonly isAssets: boolean;
        readonly asAssets: XcmV1MultiassetMultiAssets;
        readonly isExecutionResult: boolean;
        readonly asExecutionResult: Option<ITuple<[u32, XcmV2TraitsError]>>;
        readonly isVersion: boolean;
        readonly asVersion: u32;
        readonly type: 'Null' | 'Assets' | 'ExecutionResult' | 'Version';
    }
    /** @name XcmV0OriginKind (89) */
    interface XcmV0OriginKind extends Enum {
        readonly isNative: boolean;
        readonly isSovereignAccount: boolean;
        readonly isSuperuser: boolean;
        readonly isXcm: boolean;
        readonly type: 'Native' | 'SovereignAccount' | 'Superuser' | 'Xcm';
    }
    /** @name XcmDoubleEncoded (90) */
    interface XcmDoubleEncoded extends Struct {
        readonly encoded: Bytes;
    }
    /** @name XcmV1MultiassetMultiAssetFilter (91) */
    interface XcmV1MultiassetMultiAssetFilter extends Enum {
        readonly isDefinite: boolean;
        readonly asDefinite: XcmV1MultiassetMultiAssets;
        readonly isWild: boolean;
        readonly asWild: XcmV1MultiassetWildMultiAsset;
        readonly type: 'Definite' | 'Wild';
    }
    /** @name XcmV1MultiassetWildMultiAsset (92) */
    interface XcmV1MultiassetWildMultiAsset extends Enum {
        readonly isAll: boolean;
        readonly isAllOf: boolean;
        readonly asAllOf: {
            readonly id: XcmV1MultiassetAssetId;
            readonly fun: XcmV1MultiassetWildFungibility;
        } & Struct;
        readonly type: 'All' | 'AllOf';
    }
    /** @name XcmV1MultiassetWildFungibility (93) */
    interface XcmV1MultiassetWildFungibility extends Enum {
        readonly isFungible: boolean;
        readonly isNonFungible: boolean;
        readonly type: 'Fungible' | 'NonFungible';
    }
    /** @name XcmV2WeightLimit (94) */
    interface XcmV2WeightLimit extends Enum {
        readonly isUnlimited: boolean;
        readonly isLimited: boolean;
        readonly asLimited: Compact<u64>;
        readonly type: 'Unlimited' | 'Limited';
    }
    /** @name XcmVersionedMultiAssets (96) */
    interface XcmVersionedMultiAssets extends Enum {
        readonly isV0: boolean;
        readonly asV0: Vec<XcmV0MultiAsset>;
        readonly isV1: boolean;
        readonly asV1: XcmV1MultiassetMultiAssets;
        readonly type: 'V0' | 'V1';
    }
    /** @name XcmV0MultiAsset (98) */
    interface XcmV0MultiAsset extends Enum {
        readonly isNone: boolean;
        readonly isAll: boolean;
        readonly isAllFungible: boolean;
        readonly isAllNonFungible: boolean;
        readonly isAllAbstractFungible: boolean;
        readonly asAllAbstractFungible: {
            readonly id: Bytes;
        } & Struct;
        readonly isAllAbstractNonFungible: boolean;
        readonly asAllAbstractNonFungible: {
            readonly class: Bytes;
        } & Struct;
        readonly isAllConcreteFungible: boolean;
        readonly asAllConcreteFungible: {
            readonly id: XcmV0MultiLocation;
        } & Struct;
        readonly isAllConcreteNonFungible: boolean;
        readonly asAllConcreteNonFungible: {
            readonly class: XcmV0MultiLocation;
        } & Struct;
        readonly isAbstractFungible: boolean;
        readonly asAbstractFungible: {
            readonly id: Bytes;
            readonly amount: Compact<u128>;
        } & Struct;
        readonly isAbstractNonFungible: boolean;
        readonly asAbstractNonFungible: {
            readonly class: Bytes;
            readonly instance: XcmV1MultiassetAssetInstance;
        } & Struct;
        readonly isConcreteFungible: boolean;
        readonly asConcreteFungible: {
            readonly id: XcmV0MultiLocation;
            readonly amount: Compact<u128>;
        } & Struct;
        readonly isConcreteNonFungible: boolean;
        readonly asConcreteNonFungible: {
            readonly class: XcmV0MultiLocation;
            readonly instance: XcmV1MultiassetAssetInstance;
        } & Struct;
        readonly type: 'None' | 'All' | 'AllFungible' | 'AllNonFungible' | 'AllAbstractFungible' | 'AllAbstractNonFungible' | 'AllConcreteFungible' | 'AllConcreteNonFungible' | 'AbstractFungible' | 'AbstractNonFungible' | 'ConcreteFungible' | 'ConcreteNonFungible';
    }
    /** @name CumulusPalletXcmEvent (99) */
    interface CumulusPalletXcmEvent extends Enum {
        readonly isInvalidFormat: boolean;
        readonly asInvalidFormat: U8aFixed;
        readonly isUnsupportedVersion: boolean;
        readonly asUnsupportedVersion: U8aFixed;
        readonly isExecutedDownward: boolean;
        readonly asExecutedDownward: ITuple<[U8aFixed, XcmV2TraitsOutcome]>;
        readonly type: 'InvalidFormat' | 'UnsupportedVersion' | 'ExecutedDownward';
    }
    /** @name CumulusPalletDmpQueueEvent (100) */
    interface CumulusPalletDmpQueueEvent extends Enum {
        readonly isInvalidFormat: boolean;
        readonly asInvalidFormat: {
            readonly messageId: U8aFixed;
        } & Struct;
        readonly isUnsupportedVersion: boolean;
        readonly asUnsupportedVersion: {
            readonly messageId: U8aFixed;
        } & Struct;
        readonly isExecutedDownward: boolean;
        readonly asExecutedDownward: {
            readonly messageId: U8aFixed;
            readonly outcome: XcmV2TraitsOutcome;
        } & Struct;
        readonly isWeightExhausted: boolean;
        readonly asWeightExhausted: {
            readonly messageId: U8aFixed;
            readonly remainingWeight: u64;
            readonly requiredWeight: u64;
        } & Struct;
        readonly isOverweightEnqueued: boolean;
        readonly asOverweightEnqueued: {
            readonly messageId: U8aFixed;
            readonly overweightIndex: u64;
            readonly requiredWeight: u64;
        } & Struct;
        readonly isOverweightServiced: boolean;
        readonly asOverweightServiced: {
            readonly overweightIndex: u64;
            readonly weightUsed: u64;
        } & Struct;
        readonly type: 'InvalidFormat' | 'UnsupportedVersion' | 'ExecutedDownward' | 'WeightExhausted' | 'OverweightEnqueued' | 'OverweightServiced';
    }
    /** @name OrmlXtokensModuleEvent (101) */
    interface OrmlXtokensModuleEvent extends Enum {
        readonly isTransferredMultiAssets: boolean;
        readonly asTransferredMultiAssets: {
            readonly sender: AccountId32;
            readonly assets: XcmV1MultiassetMultiAssets;
            readonly fee: XcmV1MultiAsset;
            readonly dest: XcmV1MultiLocation;
        } & Struct;
        readonly type: 'TransferredMultiAssets';
    }
    /** @name OrmlUnknownTokensModuleEvent (102) */
    interface OrmlUnknownTokensModuleEvent extends Enum {
        readonly isDeposited: boolean;
        readonly asDeposited: {
            readonly asset: XcmV1MultiAsset;
            readonly who: XcmV1MultiLocation;
        } & Struct;
        readonly isWithdrawn: boolean;
        readonly asWithdrawn: {
            readonly asset: XcmV1MultiAsset;
            readonly who: XcmV1MultiLocation;
        } & Struct;
        readonly type: 'Deposited' | 'Withdrawn';
    }
    /** @name PalletSudoEvent (103) */
    interface PalletSudoEvent extends Enum {
        readonly isSudid: boolean;
        readonly asSudid: {
            readonly sudoResult: Result<Null, SpRuntimeDispatchError>;
        } & Struct;
        readonly isKeyChanged: boolean;
        readonly asKeyChanged: {
            readonly oldSudoer: Option<AccountId32>;
        } & Struct;
        readonly isSudoAsDone: boolean;
        readonly asSudoAsDone: {
            readonly sudoResult: Result<Null, SpRuntimeDispatchError>;
        } & Struct;
        readonly type: 'Sudid' | 'KeyChanged' | 'SudoAsDone';
    }
    /** @name PalletTreasuryEvent (105) */
    interface PalletTreasuryEvent extends Enum {
        readonly isProposed: boolean;
        readonly asProposed: {
            readonly proposalIndex: u32;
        } & Struct;
        readonly isSpending: boolean;
        readonly asSpending: {
            readonly budgetRemaining: u128;
        } & Struct;
        readonly isAwarded: boolean;
        readonly asAwarded: {
            readonly proposalIndex: u32;
            readonly award: u128;
            readonly account: AccountId32;
        } & Struct;
        readonly isRejected: boolean;
        readonly asRejected: {
            readonly proposalIndex: u32;
            readonly slashed: u128;
        } & Struct;
        readonly isBurnt: boolean;
        readonly asBurnt: {
            readonly burntFunds: u128;
        } & Struct;
        readonly isRollover: boolean;
        readonly asRollover: {
            readonly rolloverBalance: u128;
        } & Struct;
        readonly isDeposit: boolean;
        readonly asDeposit: {
            readonly value: u128;
        } & Struct;
        readonly isSpendApproved: boolean;
        readonly asSpendApproved: {
            readonly proposalIndex: u32;
            readonly amount: u128;
            readonly beneficiary: AccountId32;
        } & Struct;
        readonly type: 'Proposed' | 'Spending' | 'Awarded' | 'Rejected' | 'Burnt' | 'Rollover' | 'Deposit' | 'SpendApproved';
    }
    /** @name PalletCollectiveEvent (106) */
    interface PalletCollectiveEvent extends Enum {
        readonly isProposed: boolean;
        readonly asProposed: {
            readonly account: AccountId32;
            readonly proposalIndex: u32;
            readonly proposalHash: H256;
            readonly threshold: u32;
        } & Struct;
        readonly isVoted: boolean;
        readonly asVoted: {
            readonly account: AccountId32;
            readonly proposalHash: H256;
            readonly voted: bool;
            readonly yes: u32;
            readonly no: u32;
        } & Struct;
        readonly isApproved: boolean;
        readonly asApproved: {
            readonly proposalHash: H256;
        } & Struct;
        readonly isDisapproved: boolean;
        readonly asDisapproved: {
            readonly proposalHash: H256;
        } & Struct;
        readonly isExecuted: boolean;
        readonly asExecuted: {
            readonly proposalHash: H256;
            readonly result: Result<Null, SpRuntimeDispatchError>;
        } & Struct;
        readonly isMemberExecuted: boolean;
        readonly asMemberExecuted: {
            readonly proposalHash: H256;
            readonly result: Result<Null, SpRuntimeDispatchError>;
        } & Struct;
        readonly isClosed: boolean;
        readonly asClosed: {
            readonly proposalHash: H256;
            readonly yes: u32;
            readonly no: u32;
        } & Struct;
        readonly type: 'Proposed' | 'Voted' | 'Approved' | 'Disapproved' | 'Executed' | 'MemberExecuted' | 'Closed';
    }
    /** @name PalletMembershipEvent (108) */
    interface PalletMembershipEvent extends Enum {
        readonly isMemberAdded: boolean;
        readonly isMemberRemoved: boolean;
        readonly isMembersSwapped: boolean;
        readonly isMembersReset: boolean;
        readonly isKeyChanged: boolean;
        readonly isDummy: boolean;
        readonly type: 'MemberAdded' | 'MemberRemoved' | 'MembersSwapped' | 'MembersReset' | 'KeyChanged' | 'Dummy';
    }
    /** @name PalletBountiesEvent (109) */
    interface PalletBountiesEvent extends Enum {
        readonly isBountyProposed: boolean;
        readonly asBountyProposed: {
            readonly index: u32;
        } & Struct;
        readonly isBountyRejected: boolean;
        readonly asBountyRejected: {
            readonly index: u32;
            readonly bond: u128;
        } & Struct;
        readonly isBountyBecameActive: boolean;
        readonly asBountyBecameActive: {
            readonly index: u32;
        } & Struct;
        readonly isBountyAwarded: boolean;
        readonly asBountyAwarded: {
            readonly index: u32;
            readonly beneficiary: AccountId32;
        } & Struct;
        readonly isBountyClaimed: boolean;
        readonly asBountyClaimed: {
            readonly index: u32;
            readonly payout: u128;
            readonly beneficiary: AccountId32;
        } & Struct;
        readonly isBountyCanceled: boolean;
        readonly asBountyCanceled: {
            readonly index: u32;
        } & Struct;
        readonly isBountyExtended: boolean;
        readonly asBountyExtended: {
            readonly index: u32;
        } & Struct;
        readonly type: 'BountyProposed' | 'BountyRejected' | 'BountyBecameActive' | 'BountyAwarded' | 'BountyClaimed' | 'BountyCanceled' | 'BountyExtended';
    }
    /** @name PalletPreimageEvent (110) */
    interface PalletPreimageEvent extends Enum {
        readonly isNoted: boolean;
        readonly asNoted: {
            readonly hash_: H256;
        } & Struct;
        readonly isRequested: boolean;
        readonly asRequested: {
            readonly hash_: H256;
        } & Struct;
        readonly isCleared: boolean;
        readonly asCleared: {
            readonly hash_: H256;
        } & Struct;
        readonly type: 'Noted' | 'Requested' | 'Cleared';
    }
    /** @name PalletSchedulerEvent (111) */
    interface PalletSchedulerEvent extends Enum {
        readonly isScheduled: boolean;
        readonly asScheduled: {
            readonly when: u32;
            readonly index: u32;
        } & Struct;
        readonly isCanceled: boolean;
        readonly asCanceled: {
            readonly when: u32;
            readonly index: u32;
        } & Struct;
        readonly isDispatched: boolean;
        readonly asDispatched: {
            readonly task: ITuple<[u32, u32]>;
            readonly id: Option<Bytes>;
            readonly result: Result<Null, SpRuntimeDispatchError>;
        } & Struct;
        readonly isCallLookupFailed: boolean;
        readonly asCallLookupFailed: {
            readonly task: ITuple<[u32, u32]>;
            readonly id: Option<Bytes>;
            readonly error: FrameSupportScheduleLookupError;
        } & Struct;
        readonly type: 'Scheduled' | 'Canceled' | 'Dispatched' | 'CallLookupFailed';
    }
    /** @name FrameSupportScheduleLookupError (114) */
    interface FrameSupportScheduleLookupError extends Enum {
        readonly isUnknown: boolean;
        readonly isBadFormat: boolean;
        readonly type: 'Unknown' | 'BadFormat';
    }
    /** @name PalletDemocracyEvent (115) */
    interface PalletDemocracyEvent extends Enum {
        readonly isProposed: boolean;
        readonly asProposed: {
            readonly proposalIndex: u32;
            readonly deposit: u128;
        } & Struct;
        readonly isTabled: boolean;
        readonly asTabled: {
            readonly proposalIndex: u32;
            readonly deposit: u128;
            readonly depositors: Vec<AccountId32>;
        } & Struct;
        readonly isExternalTabled: boolean;
        readonly isStarted: boolean;
        readonly asStarted: {
            readonly refIndex: u32;
            readonly threshold: PalletDemocracyVoteThreshold;
        } & Struct;
        readonly isPassed: boolean;
        readonly asPassed: {
            readonly refIndex: u32;
        } & Struct;
        readonly isNotPassed: boolean;
        readonly asNotPassed: {
            readonly refIndex: u32;
        } & Struct;
        readonly isCancelled: boolean;
        readonly asCancelled: {
            readonly refIndex: u32;
        } & Struct;
        readonly isExecuted: boolean;
        readonly asExecuted: {
            readonly refIndex: u32;
            readonly result: Result<Null, SpRuntimeDispatchError>;
        } & Struct;
        readonly isDelegated: boolean;
        readonly asDelegated: {
            readonly who: AccountId32;
            readonly target: AccountId32;
        } & Struct;
        readonly isUndelegated: boolean;
        readonly asUndelegated: {
            readonly account: AccountId32;
        } & Struct;
        readonly isVetoed: boolean;
        readonly asVetoed: {
            readonly who: AccountId32;
            readonly proposalHash: H256;
            readonly until: u32;
        } & Struct;
        readonly isPreimageNoted: boolean;
        readonly asPreimageNoted: {
            readonly proposalHash: H256;
            readonly who: AccountId32;
            readonly deposit: u128;
        } & Struct;
        readonly isPreimageUsed: boolean;
        readonly asPreimageUsed: {
            readonly proposalHash: H256;
            readonly provider: AccountId32;
            readonly deposit: u128;
        } & Struct;
        readonly isPreimageInvalid: boolean;
        readonly asPreimageInvalid: {
            readonly proposalHash: H256;
            readonly refIndex: u32;
        } & Struct;
        readonly isPreimageMissing: boolean;
        readonly asPreimageMissing: {
            readonly proposalHash: H256;
            readonly refIndex: u32;
        } & Struct;
        readonly isPreimageReaped: boolean;
        readonly asPreimageReaped: {
            readonly proposalHash: H256;
            readonly provider: AccountId32;
            readonly deposit: u128;
            readonly reaper: AccountId32;
        } & Struct;
        readonly isBlacklisted: boolean;
        readonly asBlacklisted: {
            readonly proposalHash: H256;
        } & Struct;
        readonly isVoted: boolean;
        readonly asVoted: {
            readonly voter: AccountId32;
            readonly refIndex: u32;
            readonly vote: PalletDemocracyVoteAccountVote;
        } & Struct;
        readonly isSeconded: boolean;
        readonly asSeconded: {
            readonly seconder: AccountId32;
            readonly propIndex: u32;
        } & Struct;
        readonly isProposalCanceled: boolean;
        readonly asProposalCanceled: {
            readonly propIndex: u32;
        } & Struct;
        readonly type: 'Proposed' | 'Tabled' | 'ExternalTabled' | 'Started' | 'Passed' | 'NotPassed' | 'Cancelled' | 'Executed' | 'Delegated' | 'Undelegated' | 'Vetoed' | 'PreimageNoted' | 'PreimageUsed' | 'PreimageInvalid' | 'PreimageMissing' | 'PreimageReaped' | 'Blacklisted' | 'Voted' | 'Seconded' | 'ProposalCanceled';
    }
    /** @name PalletDemocracyVoteThreshold (117) */
    interface PalletDemocracyVoteThreshold extends Enum {
        readonly isSuperMajorityApprove: boolean;
        readonly isSuperMajorityAgainst: boolean;
        readonly isSimpleMajority: boolean;
        readonly type: 'SuperMajorityApprove' | 'SuperMajorityAgainst' | 'SimpleMajority';
    }
    /** @name PalletDemocracyVoteAccountVote (118) */
    interface PalletDemocracyVoteAccountVote extends Enum {
        readonly isStandard: boolean;
        readonly asStandard: {
            readonly vote: Vote;
            readonly balance: u128;
        } & Struct;
        readonly isSplit: boolean;
        readonly asSplit: {
            readonly aye: u128;
            readonly nay: u128;
        } & Struct;
        readonly type: 'Standard' | 'Split';
    }
    /** @name PalletMultisigEvent (120) */
    interface PalletMultisigEvent extends Enum {
        readonly isNewMultisig: boolean;
        readonly asNewMultisig: {
            readonly approving: AccountId32;
            readonly multisig: AccountId32;
            readonly callHash: U8aFixed;
        } & Struct;
        readonly isMultisigApproval: boolean;
        readonly asMultisigApproval: {
            readonly approving: AccountId32;
            readonly timepoint: PalletMultisigTimepoint;
            readonly multisig: AccountId32;
            readonly callHash: U8aFixed;
        } & Struct;
        readonly isMultisigExecuted: boolean;
        readonly asMultisigExecuted: {
            readonly approving: AccountId32;
            readonly timepoint: PalletMultisigTimepoint;
            readonly multisig: AccountId32;
            readonly callHash: U8aFixed;
            readonly result: Result<Null, SpRuntimeDispatchError>;
        } & Struct;
        readonly isMultisigCancelled: boolean;
        readonly asMultisigCancelled: {
            readonly cancelling: AccountId32;
            readonly timepoint: PalletMultisigTimepoint;
            readonly multisig: AccountId32;
            readonly callHash: U8aFixed;
        } & Struct;
        readonly type: 'NewMultisig' | 'MultisigApproval' | 'MultisigExecuted' | 'MultisigCancelled';
    }
    /** @name PalletMultisigTimepoint (121) */
    interface PalletMultisigTimepoint extends Struct {
        readonly height: u32;
        readonly index: u32;
    }
    /** @name PalletAutomationTimeEvent (122) */
    interface PalletAutomationTimeEvent extends Enum {
        readonly isTaskScheduled: boolean;
        readonly asTaskScheduled: {
            readonly who: AccountId32;
            readonly taskId: H256;
        } & Struct;
        readonly isTaskCancelled: boolean;
        readonly asTaskCancelled: {
            readonly who: AccountId32;
            readonly taskId: H256;
        } & Struct;
        readonly isNotify: boolean;
        readonly asNotify: {
            readonly message: Bytes;
        } & Struct;
        readonly isTaskNotFound: boolean;
        readonly asTaskNotFound: {
            readonly who: AccountId32;
            readonly taskId: H256;
        } & Struct;
        readonly isSuccessfullyTransferredFunds: boolean;
        readonly asSuccessfullyTransferredFunds: {
            readonly taskId: H256;
        } & Struct;
        readonly isXcmpTaskSucceeded: boolean;
        readonly asXcmpTaskSucceeded: {
            readonly taskId: H256;
            readonly paraId: u32;
        } & Struct;
        readonly isXcmpTaskFailed: boolean;
        readonly asXcmpTaskFailed: {
            readonly taskId: H256;
            readonly paraId: u32;
            readonly error: SpRuntimeDispatchError;
        } & Struct;
        readonly isTransferFailed: boolean;
        readonly asTransferFailed: {
            readonly taskId: H256;
            readonly error: SpRuntimeDispatchError;
        } & Struct;
        readonly isSuccesfullyAutoCompoundedDelegatorStake: boolean;
        readonly asSuccesfullyAutoCompoundedDelegatorStake: {
            readonly taskId: H256;
            readonly amount: u128;
        } & Struct;
        readonly isAutoCompoundDelegatorStakeFailed: boolean;
        readonly asAutoCompoundDelegatorStakeFailed: {
            readonly taskId: H256;
            readonly errorMessage: Bytes;
            readonly error: SpRuntimeDispatchErrorWithPostInfo;
        } & Struct;
        readonly isTaskMissed: boolean;
        readonly asTaskMissed: {
            readonly who: AccountId32;
            readonly taskId: H256;
            readonly executionTime: u64;
        } & Struct;
        readonly isDynamicDispatchResult: boolean;
        readonly asDynamicDispatchResult: {
            readonly who: AccountId32;
            readonly taskId: H256;
            readonly result: Result<Null, SpRuntimeDispatchError>;
        } & Struct;
        readonly isCallCannotBeDecoded: boolean;
        readonly asCallCannotBeDecoded: {
            readonly who: AccountId32;
            readonly taskId: H256;
        } & Struct;
        readonly isTaskRescheduled: boolean;
        readonly asTaskRescheduled: {
            readonly who: AccountId32;
            readonly taskId: H256;
        } & Struct;
        readonly isTaskNotRescheduled: boolean;
        readonly asTaskNotRescheduled: {
            readonly who: AccountId32;
            readonly taskId: H256;
            readonly error: SpRuntimeDispatchError;
        } & Struct;
        readonly isTaskFailedToReschedule: boolean;
        readonly asTaskFailedToReschedule: {
            readonly who: AccountId32;
            readonly taskId: H256;
            readonly error: SpRuntimeDispatchError;
        } & Struct;
        readonly type: 'TaskScheduled' | 'TaskCancelled' | 'Notify' | 'TaskNotFound' | 'SuccessfullyTransferredFunds' | 'XcmpTaskSucceeded' | 'XcmpTaskFailed' | 'TransferFailed' | 'SuccesfullyAutoCompoundedDelegatorStake' | 'AutoCompoundDelegatorStakeFailed' | 'TaskMissed' | 'DynamicDispatchResult' | 'CallCannotBeDecoded' | 'TaskRescheduled' | 'TaskNotRescheduled' | 'TaskFailedToReschedule';
    }
    /** @name SpRuntimeDispatchErrorWithPostInfo (123) */
    interface SpRuntimeDispatchErrorWithPostInfo extends Struct {
        readonly postInfo: FrameSupportWeightsPostDispatchInfo;
        readonly error: SpRuntimeDispatchError;
    }
    /** @name FrameSupportWeightsPostDispatchInfo (124) */
    interface FrameSupportWeightsPostDispatchInfo extends Struct {
        readonly actualWeight: Option<u64>;
        readonly paysFee: FrameSupportWeightsPays;
    }
    /** @name PalletVestingEvent (126) */
    interface PalletVestingEvent extends Enum {
        readonly isVested: boolean;
        readonly asVested: {
            readonly account: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isVestFailed: boolean;
        readonly asVestFailed: {
            readonly account: AccountId32;
            readonly amount: u128;
            readonly error: SpRuntimeDispatchError;
        } & Struct;
        readonly type: 'Vested' | 'VestFailed';
    }
    /** @name PalletXcmpHandlerEvent (127) */
    interface PalletXcmpHandlerEvent extends Enum {
        readonly isXcmDataAdded: boolean;
        readonly asXcmDataAdded: {
            readonly paraId: u32;
            readonly currencyId: u32;
        } & Struct;
        readonly isXcmDataRemoved: boolean;
        readonly asXcmDataRemoved: {
            readonly paraId: u32;
            readonly currencyId: u32;
        } & Struct;
        readonly isXcmSent: boolean;
        readonly asXcmSent: {
            readonly paraId: u32;
        } & Struct;
        readonly isXcmTransactedLocally: boolean;
        readonly isXcmFeesPaid: boolean;
        readonly asXcmFeesPaid: {
            readonly source: AccountId32;
            readonly dest: AccountId32;
        } & Struct;
        readonly isXcmFeesFailed: boolean;
        readonly asXcmFeesFailed: {
            readonly source: AccountId32;
            readonly dest: AccountId32;
            readonly error: SpRuntimeDispatchError;
        } & Struct;
        readonly type: 'XcmDataAdded' | 'XcmDataRemoved' | 'XcmSent' | 'XcmTransactedLocally' | 'XcmFeesPaid' | 'XcmFeesFailed';
    }
    /** @name PalletAutomationPriceEvent (128) */
    interface PalletAutomationPriceEvent extends Enum {
        readonly isTaskScheduled: boolean;
        readonly asTaskScheduled: {
            readonly who: AccountId32;
            readonly taskId: H256;
        } & Struct;
        readonly isNotify: boolean;
        readonly asNotify: {
            readonly message: Bytes;
        } & Struct;
        readonly isTaskNotFound: boolean;
        readonly asTaskNotFound: {
            readonly taskId: H256;
        } & Struct;
        readonly isAssetCreated: boolean;
        readonly asAssetCreated: {
            readonly asset: Bytes;
        } & Struct;
        readonly isAssetUpdated: boolean;
        readonly asAssetUpdated: {
            readonly asset: Bytes;
        } & Struct;
        readonly isAssetDeleted: boolean;
        readonly asAssetDeleted: {
            readonly asset: Bytes;
        } & Struct;
        readonly isAssetPeriodReset: boolean;
        readonly asAssetPeriodReset: {
            readonly asset: Bytes;
        } & Struct;
        readonly isSuccessfullyTransferredFunds: boolean;
        readonly asSuccessfullyTransferredFunds: {
            readonly taskId: H256;
        } & Struct;
        readonly isTransferFailed: boolean;
        readonly asTransferFailed: {
            readonly taskId: H256;
            readonly error: SpRuntimeDispatchError;
        } & Struct;
        readonly type: 'TaskScheduled' | 'Notify' | 'TaskNotFound' | 'AssetCreated' | 'AssetUpdated' | 'AssetDeleted' | 'AssetPeriodReset' | 'SuccessfullyTransferredFunds' | 'TransferFailed';
    }
    /** @name FrameSystemPhase (129) */
    interface FrameSystemPhase extends Enum {
        readonly isApplyExtrinsic: boolean;
        readonly asApplyExtrinsic: u32;
        readonly isFinalization: boolean;
        readonly isInitialization: boolean;
        readonly type: 'ApplyExtrinsic' | 'Finalization' | 'Initialization';
    }
    /** @name FrameSystemLastRuntimeUpgradeInfo (132) */
    interface FrameSystemLastRuntimeUpgradeInfo extends Struct {
        readonly specVersion: Compact<u32>;
        readonly specName: Text;
    }
    /** @name FrameSystemCall (134) */
    interface FrameSystemCall extends Enum {
        readonly isFillBlock: boolean;
        readonly asFillBlock: {
            readonly ratio: Perbill;
        } & Struct;
        readonly isRemark: boolean;
        readonly asRemark: {
            readonly remark: Bytes;
        } & Struct;
        readonly isSetHeapPages: boolean;
        readonly asSetHeapPages: {
            readonly pages: u64;
        } & Struct;
        readonly isSetCode: boolean;
        readonly asSetCode: {
            readonly code: Bytes;
        } & Struct;
        readonly isSetCodeWithoutChecks: boolean;
        readonly asSetCodeWithoutChecks: {
            readonly code: Bytes;
        } & Struct;
        readonly isSetStorage: boolean;
        readonly asSetStorage: {
            readonly items: Vec<ITuple<[Bytes, Bytes]>>;
        } & Struct;
        readonly isKillStorage: boolean;
        readonly asKillStorage: {
            readonly keys_: Vec<Bytes>;
        } & Struct;
        readonly isKillPrefix: boolean;
        readonly asKillPrefix: {
            readonly prefix: Bytes;
            readonly subkeys: u32;
        } & Struct;
        readonly isRemarkWithEvent: boolean;
        readonly asRemarkWithEvent: {
            readonly remark: Bytes;
        } & Struct;
        readonly type: 'FillBlock' | 'Remark' | 'SetHeapPages' | 'SetCode' | 'SetCodeWithoutChecks' | 'SetStorage' | 'KillStorage' | 'KillPrefix' | 'RemarkWithEvent';
    }
    /** @name FrameSystemLimitsBlockWeights (138) */
    interface FrameSystemLimitsBlockWeights extends Struct {
        readonly baseBlock: u64;
        readonly maxBlock: u64;
        readonly perClass: FrameSupportWeightsPerDispatchClassWeightsPerClass;
    }
    /** @name FrameSupportWeightsPerDispatchClassWeightsPerClass (139) */
    interface FrameSupportWeightsPerDispatchClassWeightsPerClass extends Struct {
        readonly normal: FrameSystemLimitsWeightsPerClass;
        readonly operational: FrameSystemLimitsWeightsPerClass;
        readonly mandatory: FrameSystemLimitsWeightsPerClass;
    }
    /** @name FrameSystemLimitsWeightsPerClass (140) */
    interface FrameSystemLimitsWeightsPerClass extends Struct {
        readonly baseExtrinsic: u64;
        readonly maxExtrinsic: Option<u64>;
        readonly maxTotal: Option<u64>;
        readonly reserved: Option<u64>;
    }
    /** @name FrameSystemLimitsBlockLength (141) */
    interface FrameSystemLimitsBlockLength extends Struct {
        readonly max: FrameSupportWeightsPerDispatchClassU32;
    }
    /** @name FrameSupportWeightsPerDispatchClassU32 (142) */
    interface FrameSupportWeightsPerDispatchClassU32 extends Struct {
        readonly normal: u32;
        readonly operational: u32;
        readonly mandatory: u32;
    }
    /** @name FrameSupportWeightsRuntimeDbWeight (143) */
    interface FrameSupportWeightsRuntimeDbWeight extends Struct {
        readonly read: u64;
        readonly write: u64;
    }
    /** @name SpVersionRuntimeVersion (144) */
    interface SpVersionRuntimeVersion extends Struct {
        readonly specName: Text;
        readonly implName: Text;
        readonly authoringVersion: u32;
        readonly specVersion: u32;
        readonly implVersion: u32;
        readonly apis: Vec<ITuple<[U8aFixed, u32]>>;
        readonly transactionVersion: u32;
        readonly stateVersion: u8;
    }
    /** @name FrameSystemError (148) */
    interface FrameSystemError extends Enum {
        readonly isInvalidSpecName: boolean;
        readonly isSpecVersionNeedsToIncrease: boolean;
        readonly isFailedToExtractRuntimeVersion: boolean;
        readonly isNonDefaultComposite: boolean;
        readonly isNonZeroRefCount: boolean;
        readonly isCallFiltered: boolean;
        readonly type: 'InvalidSpecName' | 'SpecVersionNeedsToIncrease' | 'FailedToExtractRuntimeVersion' | 'NonDefaultComposite' | 'NonZeroRefCount' | 'CallFiltered';
    }
    /** @name PolkadotPrimitivesV2PersistedValidationData (149) */
    interface PolkadotPrimitivesV2PersistedValidationData extends Struct {
        readonly parentHead: Bytes;
        readonly relayParentNumber: u32;
        readonly relayParentStorageRoot: H256;
        readonly maxPovSize: u32;
    }
    /** @name PolkadotPrimitivesV2UpgradeRestriction (152) */
    interface PolkadotPrimitivesV2UpgradeRestriction extends Enum {
        readonly isPresent: boolean;
        readonly type: 'Present';
    }
    /** @name SpTrieStorageProof (153) */
    interface SpTrieStorageProof extends Struct {
        readonly trieNodes: BTreeSet<Bytes>;
    }
    /** @name CumulusPalletParachainSystemRelayStateSnapshotMessagingStateSnapshot (155) */
    interface CumulusPalletParachainSystemRelayStateSnapshotMessagingStateSnapshot extends Struct {
        readonly dmqMqcHead: H256;
        readonly relayDispatchQueueSize: ITuple<[u32, u32]>;
        readonly ingressChannels: Vec<ITuple<[u32, PolkadotPrimitivesV2AbridgedHrmpChannel]>>;
        readonly egressChannels: Vec<ITuple<[u32, PolkadotPrimitivesV2AbridgedHrmpChannel]>>;
    }
    /** @name PolkadotPrimitivesV2AbridgedHrmpChannel (158) */
    interface PolkadotPrimitivesV2AbridgedHrmpChannel extends Struct {
        readonly maxCapacity: u32;
        readonly maxTotalSize: u32;
        readonly maxMessageSize: u32;
        readonly msgCount: u32;
        readonly totalSize: u32;
        readonly mqcHead: Option<H256>;
    }
    /** @name PolkadotPrimitivesV2AbridgedHostConfiguration (159) */
    interface PolkadotPrimitivesV2AbridgedHostConfiguration extends Struct {
        readonly maxCodeSize: u32;
        readonly maxHeadDataSize: u32;
        readonly maxUpwardQueueCount: u32;
        readonly maxUpwardQueueSize: u32;
        readonly maxUpwardMessageSize: u32;
        readonly maxUpwardMessageNumPerCandidate: u32;
        readonly hrmpMaxMessageNumPerCandidate: u32;
        readonly validationUpgradeCooldown: u32;
        readonly validationUpgradeDelay: u32;
    }
    /** @name PolkadotCorePrimitivesOutboundHrmpMessage (165) */
    interface PolkadotCorePrimitivesOutboundHrmpMessage extends Struct {
        readonly recipient: u32;
        readonly data: Bytes;
    }
    /** @name CumulusPalletParachainSystemCall (166) */
    interface CumulusPalletParachainSystemCall extends Enum {
        readonly isSetValidationData: boolean;
        readonly asSetValidationData: {
            readonly data: CumulusPrimitivesParachainInherentParachainInherentData;
        } & Struct;
        readonly isSudoSendUpwardMessage: boolean;
        readonly asSudoSendUpwardMessage: {
            readonly message: Bytes;
        } & Struct;
        readonly isAuthorizeUpgrade: boolean;
        readonly asAuthorizeUpgrade: {
            readonly codeHash: H256;
        } & Struct;
        readonly isEnactAuthorizedUpgrade: boolean;
        readonly asEnactAuthorizedUpgrade: {
            readonly code: Bytes;
        } & Struct;
        readonly type: 'SetValidationData' | 'SudoSendUpwardMessage' | 'AuthorizeUpgrade' | 'EnactAuthorizedUpgrade';
    }
    /** @name CumulusPrimitivesParachainInherentParachainInherentData (167) */
    interface CumulusPrimitivesParachainInherentParachainInherentData extends Struct {
        readonly validationData: PolkadotPrimitivesV2PersistedValidationData;
        readonly relayChainState: SpTrieStorageProof;
        readonly downwardMessages: Vec<PolkadotCorePrimitivesInboundDownwardMessage>;
        readonly horizontalMessages: BTreeMap<u32, Vec<PolkadotCorePrimitivesInboundHrmpMessage>>;
    }
    /** @name PolkadotCorePrimitivesInboundDownwardMessage (169) */
    interface PolkadotCorePrimitivesInboundDownwardMessage extends Struct {
        readonly sentAt: u32;
        readonly msg: Bytes;
    }
    /** @name PolkadotCorePrimitivesInboundHrmpMessage (172) */
    interface PolkadotCorePrimitivesInboundHrmpMessage extends Struct {
        readonly sentAt: u32;
        readonly data: Bytes;
    }
    /** @name CumulusPalletParachainSystemError (175) */
    interface CumulusPalletParachainSystemError extends Enum {
        readonly isOverlappingUpgrades: boolean;
        readonly isProhibitedByPolkadot: boolean;
        readonly isTooBig: boolean;
        readonly isValidationDataNotAvailable: boolean;
        readonly isHostConfigurationNotAvailable: boolean;
        readonly isNotScheduled: boolean;
        readonly isNothingAuthorized: boolean;
        readonly isUnauthorized: boolean;
        readonly type: 'OverlappingUpgrades' | 'ProhibitedByPolkadot' | 'TooBig' | 'ValidationDataNotAvailable' | 'HostConfigurationNotAvailable' | 'NotScheduled' | 'NothingAuthorized' | 'Unauthorized';
    }
    /** @name PalletTimestampCall (176) */
    interface PalletTimestampCall extends Enum {
        readonly isSet: boolean;
        readonly asSet: {
            readonly now: Compact<u64>;
        } & Struct;
        readonly type: 'Set';
    }
    /** @name PalletBalancesBalanceLock (178) */
    interface PalletBalancesBalanceLock extends Struct {
        readonly id: U8aFixed;
        readonly amount: u128;
        readonly reasons: PalletBalancesReasons;
    }
    /** @name PalletBalancesReasons (179) */
    interface PalletBalancesReasons extends Enum {
        readonly isFee: boolean;
        readonly isMisc: boolean;
        readonly isAll: boolean;
        readonly type: 'Fee' | 'Misc' | 'All';
    }
    /** @name PalletBalancesReserveData (182) */
    interface PalletBalancesReserveData extends Struct {
        readonly id: U8aFixed;
        readonly amount: u128;
    }
    /** @name PalletBalancesReleases (184) */
    interface PalletBalancesReleases extends Enum {
        readonly isV100: boolean;
        readonly isV200: boolean;
        readonly type: 'V100' | 'V200';
    }
    /** @name PalletBalancesCall (185) */
    interface PalletBalancesCall extends Enum {
        readonly isTransfer: boolean;
        readonly asTransfer: {
            readonly dest: MultiAddress;
            readonly value: Compact<u128>;
        } & Struct;
        readonly isSetBalance: boolean;
        readonly asSetBalance: {
            readonly who: MultiAddress;
            readonly newFree: Compact<u128>;
            readonly newReserved: Compact<u128>;
        } & Struct;
        readonly isForceTransfer: boolean;
        readonly asForceTransfer: {
            readonly source: MultiAddress;
            readonly dest: MultiAddress;
            readonly value: Compact<u128>;
        } & Struct;
        readonly isTransferKeepAlive: boolean;
        readonly asTransferKeepAlive: {
            readonly dest: MultiAddress;
            readonly value: Compact<u128>;
        } & Struct;
        readonly isTransferAll: boolean;
        readonly asTransferAll: {
            readonly dest: MultiAddress;
            readonly keepAlive: bool;
        } & Struct;
        readonly isForceUnreserve: boolean;
        readonly asForceUnreserve: {
            readonly who: MultiAddress;
            readonly amount: u128;
        } & Struct;
        readonly type: 'Transfer' | 'SetBalance' | 'ForceTransfer' | 'TransferKeepAlive' | 'TransferAll' | 'ForceUnreserve';
    }
    /** @name PalletBalancesError (188) */
    interface PalletBalancesError extends Enum {
        readonly isVestingBalance: boolean;
        readonly isLiquidityRestrictions: boolean;
        readonly isInsufficientBalance: boolean;
        readonly isExistentialDeposit: boolean;
        readonly isKeepAlive: boolean;
        readonly isExistingVestingSchedule: boolean;
        readonly isDeadAccount: boolean;
        readonly isTooManyReserves: boolean;
        readonly type: 'VestingBalance' | 'LiquidityRestrictions' | 'InsufficientBalance' | 'ExistentialDeposit' | 'KeepAlive' | 'ExistingVestingSchedule' | 'DeadAccount' | 'TooManyReserves';
    }
    /** @name OrmlTokensBalanceLock (191) */
    interface OrmlTokensBalanceLock extends Struct {
        readonly id: U8aFixed;
        readonly amount: u128;
    }
    /** @name OrmlTokensAccountData (193) */
    interface OrmlTokensAccountData extends Struct {
        readonly free: u128;
        readonly reserved: u128;
        readonly frozen: u128;
    }
    /** @name OrmlTokensReserveData (195) */
    interface OrmlTokensReserveData extends Struct {
        readonly id: U8aFixed;
        readonly amount: u128;
    }
    /** @name OrmlTokensModuleError (197) */
    interface OrmlTokensModuleError extends Enum {
        readonly isBalanceTooLow: boolean;
        readonly isAmountIntoBalanceFailed: boolean;
        readonly isLiquidityRestrictions: boolean;
        readonly isMaxLocksExceeded: boolean;
        readonly isKeepAlive: boolean;
        readonly isExistentialDeposit: boolean;
        readonly isDeadAccount: boolean;
        readonly isTooManyReserves: boolean;
        readonly type: 'BalanceTooLow' | 'AmountIntoBalanceFailed' | 'LiquidityRestrictions' | 'MaxLocksExceeded' | 'KeepAlive' | 'ExistentialDeposit' | 'DeadAccount' | 'TooManyReserves';
    }
    /** @name OrmlCurrenciesModuleCall (198) */
    interface OrmlCurrenciesModuleCall extends Enum {
        readonly isTransfer: boolean;
        readonly asTransfer: {
            readonly dest: MultiAddress;
            readonly currencyId: u32;
            readonly amount: Compact<u128>;
        } & Struct;
        readonly isTransferNativeCurrency: boolean;
        readonly asTransferNativeCurrency: {
            readonly dest: MultiAddress;
            readonly amount: Compact<u128>;
        } & Struct;
        readonly isUpdateBalance: boolean;
        readonly asUpdateBalance: {
            readonly who: MultiAddress;
            readonly currencyId: u32;
            readonly amount: i128;
        } & Struct;
        readonly type: 'Transfer' | 'TransferNativeCurrency' | 'UpdateBalance';
    }
    /** @name OrmlCurrenciesModuleError (200) */
    interface OrmlCurrenciesModuleError extends Enum {
        readonly isAmountIntoBalanceFailed: boolean;
        readonly isBalanceTooLow: boolean;
        readonly isDepositFailed: boolean;
        readonly type: 'AmountIntoBalanceFailed' | 'BalanceTooLow' | 'DepositFailed';
    }
    /** @name PalletTransactionPaymentReleases (202) */
    interface PalletTransactionPaymentReleases extends Enum {
        readonly isV1Ancient: boolean;
        readonly isV2: boolean;
        readonly type: 'V1Ancient' | 'V2';
    }
    /** @name OrmlAssetRegistryModuleCall (203) */
    interface OrmlAssetRegistryModuleCall extends Enum {
        readonly isRegisterAsset: boolean;
        readonly asRegisterAsset: {
            readonly metadata: OrmlTraitsAssetRegistryAssetMetadata;
            readonly assetId: Option<u32>;
        } & Struct;
        readonly isUpdateAsset: boolean;
        readonly asUpdateAsset: {
            readonly assetId: u32;
            readonly decimals: Option<u32>;
            readonly name: Option<Bytes>;
            readonly symbol: Option<Bytes>;
            readonly existentialDeposit: Option<u128>;
            readonly location: Option<Option<XcmVersionedMultiLocation>>;
            readonly additional: Option<PrimitivesAssetsCustomMetadata>;
        } & Struct;
        readonly type: 'RegisterAsset' | 'UpdateAsset';
    }
    /** @name OrmlAssetRegistryModuleError (207) */
    interface OrmlAssetRegistryModuleError extends Enum {
        readonly isAssetNotFound: boolean;
        readonly isBadVersion: boolean;
        readonly isInvalidAssetId: boolean;
        readonly isConflictingLocation: boolean;
        readonly isConflictingAssetId: boolean;
        readonly type: 'AssetNotFound' | 'BadVersion' | 'InvalidAssetId' | 'ConflictingLocation' | 'ConflictingAssetId';
    }
    /** @name PalletAuthorshipUncleEntryItem (209) */
    interface PalletAuthorshipUncleEntryItem extends Enum {
        readonly isInclusionHeight: boolean;
        readonly asInclusionHeight: u32;
        readonly isUncle: boolean;
        readonly asUncle: ITuple<[H256, Option<AccountId32>]>;
        readonly type: 'InclusionHeight' | 'Uncle';
    }
    /** @name PalletAuthorshipCall (211) */
    interface PalletAuthorshipCall extends Enum {
        readonly isSetUncles: boolean;
        readonly asSetUncles: {
            readonly newUncles: Vec<SpRuntimeHeader>;
        } & Struct;
        readonly type: 'SetUncles';
    }
    /** @name SpRuntimeHeader (213) */
    interface SpRuntimeHeader extends Struct {
        readonly parentHash: H256;
        readonly number: Compact<u32>;
        readonly stateRoot: H256;
        readonly extrinsicsRoot: H256;
        readonly digest: SpRuntimeDigest;
    }
    /** @name SpRuntimeBlakeTwo256 (214) */
    type SpRuntimeBlakeTwo256 = Null;
    /** @name PalletAuthorshipError (215) */
    interface PalletAuthorshipError extends Enum {
        readonly isInvalidUncleParent: boolean;
        readonly isUnclesAlreadySet: boolean;
        readonly isTooManyUncles: boolean;
        readonly isGenesisUncle: boolean;
        readonly isTooHighUncle: boolean;
        readonly isUncleAlreadyIncluded: boolean;
        readonly isOldUncle: boolean;
        readonly type: 'InvalidUncleParent' | 'UnclesAlreadySet' | 'TooManyUncles' | 'GenesisUncle' | 'TooHighUncle' | 'UncleAlreadyIncluded' | 'OldUncle';
    }
    /** @name TuringRuntimeSessionKeys (218) */
    interface TuringRuntimeSessionKeys extends Struct {
        readonly aura: SpConsensusAuraSr25519AppSr25519Public;
    }
    /** @name SpConsensusAuraSr25519AppSr25519Public (219) */
    interface SpConsensusAuraSr25519AppSr25519Public extends SpCoreSr25519Public {
    }
    /** @name SpCoreSr25519Public (220) */
    interface SpCoreSr25519Public extends U8aFixed {
    }
    /** @name SpCoreCryptoKeyTypeId (223) */
    interface SpCoreCryptoKeyTypeId extends U8aFixed {
    }
    /** @name PalletSessionCall (224) */
    interface PalletSessionCall extends Enum {
        readonly isSetKeys: boolean;
        readonly asSetKeys: {
            readonly keys_: TuringRuntimeSessionKeys;
            readonly proof: Bytes;
        } & Struct;
        readonly isPurgeKeys: boolean;
        readonly type: 'SetKeys' | 'PurgeKeys';
    }
    /** @name PalletSessionError (225) */
    interface PalletSessionError extends Enum {
        readonly isInvalidProof: boolean;
        readonly isNoAssociatedValidatorId: boolean;
        readonly isDuplicatedKey: boolean;
        readonly isNoKeys: boolean;
        readonly isNoAccount: boolean;
        readonly type: 'InvalidProof' | 'NoAssociatedValidatorId' | 'DuplicatedKey' | 'NoKeys' | 'NoAccount';
    }
    /** @name PalletParachainStakingParachainBondConfig (226) */
    interface PalletParachainStakingParachainBondConfig extends Struct {
        readonly account: AccountId32;
        readonly percent: Percent;
    }
    /** @name PalletParachainStakingRoundInfo (227) */
    interface PalletParachainStakingRoundInfo extends Struct {
        readonly current: u32;
        readonly first: u32;
        readonly length: u32;
    }
    /** @name PalletParachainStakingDelegator (228) */
    interface PalletParachainStakingDelegator extends Struct {
        readonly id: AccountId32;
        readonly delegations: PalletParachainStakingSetOrderedSet;
        readonly total: u128;
        readonly lessTotal: u128;
        readonly status: PalletParachainStakingDelegatorStatus;
    }
    /** @name PalletParachainStakingSetOrderedSet (229) */
    interface PalletParachainStakingSetOrderedSet extends Vec<PalletParachainStakingBond> {
    }
    /** @name PalletParachainStakingBond (230) */
    interface PalletParachainStakingBond extends Struct {
        readonly owner: AccountId32;
        readonly amount: u128;
    }
    /** @name PalletParachainStakingDelegatorStatus (232) */
    interface PalletParachainStakingDelegatorStatus extends Enum {
        readonly isActive: boolean;
        readonly isLeaving: boolean;
        readonly asLeaving: u32;
        readonly type: 'Active' | 'Leaving';
    }
    /** @name PalletParachainStakingCandidateMetadata (233) */
    interface PalletParachainStakingCandidateMetadata extends Struct {
        readonly bond: u128;
        readonly delegationCount: u32;
        readonly totalCounted: u128;
        readonly lowestTopDelegationAmount: u128;
        readonly highestBottomDelegationAmount: u128;
        readonly lowestBottomDelegationAmount: u128;
        readonly topCapacity: PalletParachainStakingCapacityStatus;
        readonly bottomCapacity: PalletParachainStakingCapacityStatus;
        readonly request: Option<PalletParachainStakingCandidateBondLessRequest>;
        readonly status: PalletParachainStakingCollatorStatus;
    }
    /** @name PalletParachainStakingCapacityStatus (234) */
    interface PalletParachainStakingCapacityStatus extends Enum {
        readonly isFull: boolean;
        readonly isEmpty: boolean;
        readonly isPartial: boolean;
        readonly type: 'Full' | 'Empty' | 'Partial';
    }
    /** @name PalletParachainStakingCandidateBondLessRequest (236) */
    interface PalletParachainStakingCandidateBondLessRequest extends Struct {
        readonly amount: u128;
        readonly whenExecutable: u32;
    }
    /** @name PalletParachainStakingCollatorStatus (237) */
    interface PalletParachainStakingCollatorStatus extends Enum {
        readonly isActive: boolean;
        readonly isIdle: boolean;
        readonly isLeaving: boolean;
        readonly asLeaving: u32;
        readonly type: 'Active' | 'Idle' | 'Leaving';
    }
    /** @name PalletParachainStakingDelegationRequestsScheduledRequest (239) */
    interface PalletParachainStakingDelegationRequestsScheduledRequest extends Struct {
        readonly delegator: AccountId32;
        readonly whenExecutable: u32;
        readonly action: PalletParachainStakingDelegationRequestsDelegationAction;
    }
    /** @name PalletParachainStakingDelegations (240) */
    interface PalletParachainStakingDelegations extends Struct {
        readonly delegations: Vec<PalletParachainStakingBond>;
        readonly total: u128;
    }
    /** @name PalletParachainStakingCollatorSnapshot (242) */
    interface PalletParachainStakingCollatorSnapshot extends Struct {
        readonly bond: u128;
        readonly delegations: Vec<PalletParachainStakingBond>;
        readonly total: u128;
    }
    /** @name PalletParachainStakingDelayedPayout (243) */
    interface PalletParachainStakingDelayedPayout extends Struct {
        readonly roundIssuance: u128;
        readonly totalStakingReward: u128;
        readonly collatorCommission: Perbill;
    }
    /** @name PalletParachainStakingInflationInflationInfo (244) */
    interface PalletParachainStakingInflationInflationInfo extends Struct {
        readonly expect: {
            readonly min: u128;
            readonly ideal: u128;
            readonly max: u128;
        } & Struct;
        readonly annual: {
            readonly min: Perbill;
            readonly ideal: Perbill;
            readonly max: Perbill;
        } & Struct;
        readonly round: {
            readonly min: Perbill;
            readonly ideal: Perbill;
            readonly max: Perbill;
        } & Struct;
    }
    /** @name PalletParachainStakingCall (247) */
    interface PalletParachainStakingCall extends Enum {
        readonly isSetStakingExpectations: boolean;
        readonly asSetStakingExpectations: {
            readonly expectations: {
                readonly min: u128;
                readonly ideal: u128;
                readonly max: u128;
            } & Struct;
        } & Struct;
        readonly isSetInflation: boolean;
        readonly asSetInflation: {
            readonly schedule: {
                readonly min: Perbill;
                readonly ideal: Perbill;
                readonly max: Perbill;
            } & Struct;
        } & Struct;
        readonly isSetParachainBondAccount: boolean;
        readonly asSetParachainBondAccount: {
            readonly new_: AccountId32;
        } & Struct;
        readonly isSetParachainBondReservePercent: boolean;
        readonly asSetParachainBondReservePercent: {
            readonly new_: Percent;
        } & Struct;
        readonly isSetTotalSelected: boolean;
        readonly asSetTotalSelected: {
            readonly new_: u32;
        } & Struct;
        readonly isSetCollatorCommission: boolean;
        readonly asSetCollatorCommission: {
            readonly new_: Perbill;
        } & Struct;
        readonly isSetBlocksPerRound: boolean;
        readonly asSetBlocksPerRound: {
            readonly new_: u32;
        } & Struct;
        readonly isJoinCandidates: boolean;
        readonly asJoinCandidates: {
            readonly bond: u128;
            readonly candidateCount: u32;
        } & Struct;
        readonly isScheduleLeaveCandidates: boolean;
        readonly asScheduleLeaveCandidates: {
            readonly candidateCount: u32;
        } & Struct;
        readonly isExecuteLeaveCandidates: boolean;
        readonly asExecuteLeaveCandidates: {
            readonly candidate: AccountId32;
            readonly candidateDelegationCount: u32;
        } & Struct;
        readonly isCancelLeaveCandidates: boolean;
        readonly asCancelLeaveCandidates: {
            readonly candidateCount: u32;
        } & Struct;
        readonly isGoOffline: boolean;
        readonly isGoOnline: boolean;
        readonly isCandidateBondMore: boolean;
        readonly asCandidateBondMore: {
            readonly more: u128;
        } & Struct;
        readonly isScheduleCandidateBondLess: boolean;
        readonly asScheduleCandidateBondLess: {
            readonly less: u128;
        } & Struct;
        readonly isExecuteCandidateBondLess: boolean;
        readonly asExecuteCandidateBondLess: {
            readonly candidate: AccountId32;
        } & Struct;
        readonly isCancelCandidateBondLess: boolean;
        readonly isDelegate: boolean;
        readonly asDelegate: {
            readonly candidate: AccountId32;
            readonly amount: u128;
            readonly candidateDelegationCount: u32;
            readonly delegationCount: u32;
        } & Struct;
        readonly isScheduleLeaveDelegators: boolean;
        readonly isExecuteLeaveDelegators: boolean;
        readonly asExecuteLeaveDelegators: {
            readonly delegator: AccountId32;
            readonly delegationCount: u32;
        } & Struct;
        readonly isCancelLeaveDelegators: boolean;
        readonly isScheduleRevokeDelegation: boolean;
        readonly asScheduleRevokeDelegation: {
            readonly collator: AccountId32;
        } & Struct;
        readonly isDelegatorBondMore: boolean;
        readonly asDelegatorBondMore: {
            readonly candidate: AccountId32;
            readonly more: u128;
        } & Struct;
        readonly isScheduleDelegatorBondLess: boolean;
        readonly asScheduleDelegatorBondLess: {
            readonly candidate: AccountId32;
            readonly less: u128;
        } & Struct;
        readonly isExecuteDelegationRequest: boolean;
        readonly asExecuteDelegationRequest: {
            readonly delegator: AccountId32;
            readonly candidate: AccountId32;
        } & Struct;
        readonly isCancelDelegationRequest: boolean;
        readonly asCancelDelegationRequest: {
            readonly candidate: AccountId32;
        } & Struct;
        readonly isHotfixRemoveDelegationRequestsExitedCandidates: boolean;
        readonly asHotfixRemoveDelegationRequestsExitedCandidates: {
            readonly candidates: Vec<AccountId32>;
        } & Struct;
        readonly isHotfixMigrateDelegatorsFromReserveToLocks: boolean;
        readonly asHotfixMigrateDelegatorsFromReserveToLocks: {
            readonly delegators: Vec<AccountId32>;
        } & Struct;
        readonly isHotfixMigrateCollatorsFromReserveToLocks: boolean;
        readonly asHotfixMigrateCollatorsFromReserveToLocks: {
            readonly collators: Vec<AccountId32>;
        } & Struct;
        readonly type: 'SetStakingExpectations' | 'SetInflation' | 'SetParachainBondAccount' | 'SetParachainBondReservePercent' | 'SetTotalSelected' | 'SetCollatorCommission' | 'SetBlocksPerRound' | 'JoinCandidates' | 'ScheduleLeaveCandidates' | 'ExecuteLeaveCandidates' | 'CancelLeaveCandidates' | 'GoOffline' | 'GoOnline' | 'CandidateBondMore' | 'ScheduleCandidateBondLess' | 'ExecuteCandidateBondLess' | 'CancelCandidateBondLess' | 'Delegate' | 'ScheduleLeaveDelegators' | 'ExecuteLeaveDelegators' | 'CancelLeaveDelegators' | 'ScheduleRevokeDelegation' | 'DelegatorBondMore' | 'ScheduleDelegatorBondLess' | 'ExecuteDelegationRequest' | 'CancelDelegationRequest' | 'HotfixRemoveDelegationRequestsExitedCandidates' | 'HotfixMigrateDelegatorsFromReserveToLocks' | 'HotfixMigrateCollatorsFromReserveToLocks';
    }
    /** @name PalletParachainStakingError (248) */
    interface PalletParachainStakingError extends Enum {
        readonly isDelegatorDNE: boolean;
        readonly isDelegatorDNEinTopNorBottom: boolean;
        readonly isDelegatorDNEInDelegatorSet: boolean;
        readonly isCandidateDNE: boolean;
        readonly isDelegationDNE: boolean;
        readonly isDelegatorExists: boolean;
        readonly isCandidateExists: boolean;
        readonly isCandidateBondBelowMin: boolean;
        readonly isInsufficientBalance: boolean;
        readonly isDelegatorBondBelowMin: boolean;
        readonly isDelegationBelowMin: boolean;
        readonly isAlreadyOffline: boolean;
        readonly isAlreadyActive: boolean;
        readonly isDelegatorAlreadyLeaving: boolean;
        readonly isDelegatorNotLeaving: boolean;
        readonly isDelegatorCannotLeaveYet: boolean;
        readonly isCannotDelegateIfLeaving: boolean;
        readonly isCandidateAlreadyLeaving: boolean;
        readonly isCandidateNotLeaving: boolean;
        readonly isCandidateCannotLeaveYet: boolean;
        readonly isCannotGoOnlineIfLeaving: boolean;
        readonly isExceedMaxDelegationsPerDelegator: boolean;
        readonly isAlreadyDelegatedCandidate: boolean;
        readonly isInvalidSchedule: boolean;
        readonly isCannotSetBelowMin: boolean;
        readonly isRoundLengthMustBeAtLeastTotalSelectedCollators: boolean;
        readonly isNoWritingSameValue: boolean;
        readonly isTooLowCandidateCountWeightHintJoinCandidates: boolean;
        readonly isTooLowCandidateCountWeightHintCancelLeaveCandidates: boolean;
        readonly isTooLowCandidateCountToLeaveCandidates: boolean;
        readonly isTooLowDelegationCountToDelegate: boolean;
        readonly isTooLowCandidateDelegationCountToDelegate: boolean;
        readonly isTooLowCandidateDelegationCountToLeaveCandidates: boolean;
        readonly isTooLowDelegationCountToLeaveDelegators: boolean;
        readonly isPendingCandidateRequestsDNE: boolean;
        readonly isPendingCandidateRequestAlreadyExists: boolean;
        readonly isPendingCandidateRequestNotDueYet: boolean;
        readonly isPendingDelegationRequestDNE: boolean;
        readonly isPendingDelegationRequestAlreadyExists: boolean;
        readonly isPendingDelegationRequestNotDueYet: boolean;
        readonly isCannotDelegateLessThanOrEqualToLowestBottomWhenFull: boolean;
        readonly isPendingDelegationRevoke: boolean;
        readonly type: 'DelegatorDNE' | 'DelegatorDNEinTopNorBottom' | 'DelegatorDNEInDelegatorSet' | 'CandidateDNE' | 'DelegationDNE' | 'DelegatorExists' | 'CandidateExists' | 'CandidateBondBelowMin' | 'InsufficientBalance' | 'DelegatorBondBelowMin' | 'DelegationBelowMin' | 'AlreadyOffline' | 'AlreadyActive' | 'DelegatorAlreadyLeaving' | 'DelegatorNotLeaving' | 'DelegatorCannotLeaveYet' | 'CannotDelegateIfLeaving' | 'CandidateAlreadyLeaving' | 'CandidateNotLeaving' | 'CandidateCannotLeaveYet' | 'CannotGoOnlineIfLeaving' | 'ExceedMaxDelegationsPerDelegator' | 'AlreadyDelegatedCandidate' | 'InvalidSchedule' | 'CannotSetBelowMin' | 'RoundLengthMustBeAtLeastTotalSelectedCollators' | 'NoWritingSameValue' | 'TooLowCandidateCountWeightHintJoinCandidates' | 'TooLowCandidateCountWeightHintCancelLeaveCandidates' | 'TooLowCandidateCountToLeaveCandidates' | 'TooLowDelegationCountToDelegate' | 'TooLowCandidateDelegationCountToDelegate' | 'TooLowCandidateDelegationCountToLeaveCandidates' | 'TooLowDelegationCountToLeaveDelegators' | 'PendingCandidateRequestsDNE' | 'PendingCandidateRequestAlreadyExists' | 'PendingCandidateRequestNotDueYet' | 'PendingDelegationRequestDNE' | 'PendingDelegationRequestAlreadyExists' | 'PendingDelegationRequestNotDueYet' | 'CannotDelegateLessThanOrEqualToLowestBottomWhenFull' | 'PendingDelegationRevoke';
    }
    /** @name PalletValveCall (252) */
    interface PalletValveCall extends Enum {
        readonly isCloseValve: boolean;
        readonly isClosePalletGate: boolean;
        readonly asClosePalletGate: {
            readonly palletName: Bytes;
        } & Struct;
        readonly isOpenValve: boolean;
        readonly isOpenPalletGate: boolean;
        readonly asOpenPalletGate: {
            readonly palletName: Bytes;
        } & Struct;
        readonly isOpenPalletGates: boolean;
        readonly isStopScheduledTasks: boolean;
        readonly isStartScheduledTasks: boolean;
        readonly isStopPriceAutomationTasks: boolean;
        readonly isStartPriceAutomationTasks: boolean;
        readonly type: 'CloseValve' | 'ClosePalletGate' | 'OpenValve' | 'OpenPalletGate' | 'OpenPalletGates' | 'StopScheduledTasks' | 'StartScheduledTasks' | 'StopPriceAutomationTasks' | 'StartPriceAutomationTasks';
    }
    /** @name PalletValveError (253) */
    interface PalletValveError extends Enum {
        readonly isValveAlreadyClosed: boolean;
        readonly isValveAlreadyOpen: boolean;
        readonly isInvalidCharacter: boolean;
        readonly isCannotCloseGate: boolean;
        readonly isScheduledTasksAlreadyStopped: boolean;
        readonly isScheduledTasksAlreadyRunnung: boolean;
        readonly isNotAllowed: boolean;
        readonly type: 'ValveAlreadyClosed' | 'ValveAlreadyOpen' | 'InvalidCharacter' | 'CannotCloseGate' | 'ScheduledTasksAlreadyStopped' | 'ScheduledTasksAlreadyRunnung' | 'NotAllowed';
    }
    /** @name PalletIdentityRegistration (254) */
    interface PalletIdentityRegistration extends Struct {
        readonly judgements: Vec<ITuple<[u32, PalletIdentityJudgement]>>;
        readonly deposit: u128;
        readonly info: PalletIdentityIdentityInfo;
    }
    /** @name PalletIdentityJudgement (257) */
    interface PalletIdentityJudgement extends Enum {
        readonly isUnknown: boolean;
        readonly isFeePaid: boolean;
        readonly asFeePaid: u128;
        readonly isReasonable: boolean;
        readonly isKnownGood: boolean;
        readonly isOutOfDate: boolean;
        readonly isLowQuality: boolean;
        readonly isErroneous: boolean;
        readonly type: 'Unknown' | 'FeePaid' | 'Reasonable' | 'KnownGood' | 'OutOfDate' | 'LowQuality' | 'Erroneous';
    }
    /** @name PalletIdentityIdentityInfo (259) */
    interface PalletIdentityIdentityInfo extends Struct {
        readonly additional: Vec<ITuple<[Data, Data]>>;
        readonly display: Data;
        readonly legal: Data;
        readonly web: Data;
        readonly riot: Data;
        readonly email: Data;
        readonly pgpFingerprint: Option<U8aFixed>;
        readonly image: Data;
        readonly twitter: Data;
    }
    /** @name PalletIdentityRegistrarInfo (298) */
    interface PalletIdentityRegistrarInfo extends Struct {
        readonly account: AccountId32;
        readonly fee: u128;
        readonly fields: PalletIdentityBitFlags;
    }
    /** @name PalletIdentityBitFlags (299) */
    interface PalletIdentityBitFlags extends Set {
        readonly isDisplay: boolean;
        readonly isLegal: boolean;
        readonly isWeb: boolean;
        readonly isRiot: boolean;
        readonly isEmail: boolean;
        readonly isPgpFingerprint: boolean;
        readonly isImage: boolean;
        readonly isTwitter: boolean;
    }
    /** @name PalletIdentityIdentityField (300) */
    interface PalletIdentityIdentityField extends Enum {
        readonly isDisplay: boolean;
        readonly isLegal: boolean;
        readonly isWeb: boolean;
        readonly isRiot: boolean;
        readonly isEmail: boolean;
        readonly isPgpFingerprint: boolean;
        readonly isImage: boolean;
        readonly isTwitter: boolean;
        readonly type: 'Display' | 'Legal' | 'Web' | 'Riot' | 'Email' | 'PgpFingerprint' | 'Image' | 'Twitter';
    }
    /** @name PalletIdentityCall (302) */
    interface PalletIdentityCall extends Enum {
        readonly isAddRegistrar: boolean;
        readonly asAddRegistrar: {
            readonly account: AccountId32;
        } & Struct;
        readonly isSetIdentity: boolean;
        readonly asSetIdentity: {
            readonly info: PalletIdentityIdentityInfo;
        } & Struct;
        readonly isSetSubs: boolean;
        readonly asSetSubs: {
            readonly subs: Vec<ITuple<[AccountId32, Data]>>;
        } & Struct;
        readonly isClearIdentity: boolean;
        readonly isRequestJudgement: boolean;
        readonly asRequestJudgement: {
            readonly regIndex: Compact<u32>;
            readonly maxFee: Compact<u128>;
        } & Struct;
        readonly isCancelRequest: boolean;
        readonly asCancelRequest: {
            readonly regIndex: u32;
        } & Struct;
        readonly isSetFee: boolean;
        readonly asSetFee: {
            readonly index: Compact<u32>;
            readonly fee: Compact<u128>;
        } & Struct;
        readonly isSetAccountId: boolean;
        readonly asSetAccountId: {
            readonly index: Compact<u32>;
            readonly new_: AccountId32;
        } & Struct;
        readonly isSetFields: boolean;
        readonly asSetFields: {
            readonly index: Compact<u32>;
            readonly fields: PalletIdentityBitFlags;
        } & Struct;
        readonly isProvideJudgement: boolean;
        readonly asProvideJudgement: {
            readonly regIndex: Compact<u32>;
            readonly target: MultiAddress;
            readonly judgement: PalletIdentityJudgement;
        } & Struct;
        readonly isKillIdentity: boolean;
        readonly asKillIdentity: {
            readonly target: MultiAddress;
        } & Struct;
        readonly isAddSub: boolean;
        readonly asAddSub: {
            readonly sub: MultiAddress;
            readonly data: Data;
        } & Struct;
        readonly isRenameSub: boolean;
        readonly asRenameSub: {
            readonly sub: MultiAddress;
            readonly data: Data;
        } & Struct;
        readonly isRemoveSub: boolean;
        readonly asRemoveSub: {
            readonly sub: MultiAddress;
        } & Struct;
        readonly isQuitSub: boolean;
        readonly type: 'AddRegistrar' | 'SetIdentity' | 'SetSubs' | 'ClearIdentity' | 'RequestJudgement' | 'CancelRequest' | 'SetFee' | 'SetAccountId' | 'SetFields' | 'ProvideJudgement' | 'KillIdentity' | 'AddSub' | 'RenameSub' | 'RemoveSub' | 'QuitSub';
    }
    /** @name PalletIdentityError (304) */
    interface PalletIdentityError extends Enum {
        readonly isTooManySubAccounts: boolean;
        readonly isNotFound: boolean;
        readonly isNotNamed: boolean;
        readonly isEmptyIndex: boolean;
        readonly isFeeChanged: boolean;
        readonly isNoIdentity: boolean;
        readonly isStickyJudgement: boolean;
        readonly isJudgementGiven: boolean;
        readonly isInvalidJudgement: boolean;
        readonly isInvalidIndex: boolean;
        readonly isInvalidTarget: boolean;
        readonly isTooManyFields: boolean;
        readonly isTooManyRegistrars: boolean;
        readonly isAlreadyClaimed: boolean;
        readonly isNotSub: boolean;
        readonly isNotOwned: boolean;
        readonly type: 'TooManySubAccounts' | 'NotFound' | 'NotNamed' | 'EmptyIndex' | 'FeeChanged' | 'NoIdentity' | 'StickyJudgement' | 'JudgementGiven' | 'InvalidJudgement' | 'InvalidIndex' | 'InvalidTarget' | 'TooManyFields' | 'TooManyRegistrars' | 'AlreadyClaimed' | 'NotSub' | 'NotOwned';
    }
    /** @name PalletProxyProxyDefinition (307) */
    interface PalletProxyProxyDefinition extends Struct {
        readonly delegate: AccountId32;
        readonly proxyType: TuringRuntimeProxyType;
        readonly delay: u32;
    }
    /** @name PalletProxyAnnouncement (311) */
    interface PalletProxyAnnouncement extends Struct {
        readonly real: AccountId32;
        readonly callHash: H256;
        readonly height: u32;
    }
    /** @name PalletProxyCall (313) */
    interface PalletProxyCall extends Enum {
        readonly isProxy: boolean;
        readonly asProxy: {
            readonly real: AccountId32;
            readonly forceProxyType: Option<TuringRuntimeProxyType>;
            readonly call: Call;
        } & Struct;
        readonly isAddProxy: boolean;
        readonly asAddProxy: {
            readonly delegate: AccountId32;
            readonly proxyType: TuringRuntimeProxyType;
            readonly delay: u32;
        } & Struct;
        readonly isRemoveProxy: boolean;
        readonly asRemoveProxy: {
            readonly delegate: AccountId32;
            readonly proxyType: TuringRuntimeProxyType;
            readonly delay: u32;
        } & Struct;
        readonly isRemoveProxies: boolean;
        readonly isAnonymous: boolean;
        readonly asAnonymous: {
            readonly proxyType: TuringRuntimeProxyType;
            readonly delay: u32;
            readonly index: u16;
        } & Struct;
        readonly isKillAnonymous: boolean;
        readonly asKillAnonymous: {
            readonly spawner: AccountId32;
            readonly proxyType: TuringRuntimeProxyType;
            readonly index: u16;
            readonly height: Compact<u32>;
            readonly extIndex: Compact<u32>;
        } & Struct;
        readonly isAnnounce: boolean;
        readonly asAnnounce: {
            readonly real: AccountId32;
            readonly callHash: H256;
        } & Struct;
        readonly isRemoveAnnouncement: boolean;
        readonly asRemoveAnnouncement: {
            readonly real: AccountId32;
            readonly callHash: H256;
        } & Struct;
        readonly isRejectAnnouncement: boolean;
        readonly asRejectAnnouncement: {
            readonly delegate: AccountId32;
            readonly callHash: H256;
        } & Struct;
        readonly isProxyAnnounced: boolean;
        readonly asProxyAnnounced: {
            readonly delegate: AccountId32;
            readonly real: AccountId32;
            readonly forceProxyType: Option<TuringRuntimeProxyType>;
            readonly call: Call;
        } & Struct;
        readonly type: 'Proxy' | 'AddProxy' | 'RemoveProxy' | 'RemoveProxies' | 'Anonymous' | 'KillAnonymous' | 'Announce' | 'RemoveAnnouncement' | 'RejectAnnouncement' | 'ProxyAnnounced';
    }
    /** @name PalletUtilityCall (316) */
    interface PalletUtilityCall extends Enum {
        readonly isBatch: boolean;
        readonly asBatch: {
            readonly calls: Vec<Call>;
        } & Struct;
        readonly isAsDerivative: boolean;
        readonly asAsDerivative: {
            readonly index: u16;
            readonly call: Call;
        } & Struct;
        readonly isBatchAll: boolean;
        readonly asBatchAll: {
            readonly calls: Vec<Call>;
        } & Struct;
        readonly isDispatchAs: boolean;
        readonly asDispatchAs: {
            readonly asOrigin: TuringRuntimeOriginCaller;
            readonly call: Call;
        } & Struct;
        readonly isForceBatch: boolean;
        readonly asForceBatch: {
            readonly calls: Vec<Call>;
        } & Struct;
        readonly type: 'Batch' | 'AsDerivative' | 'BatchAll' | 'DispatchAs' | 'ForceBatch';
    }
    /** @name TuringRuntimeOriginCaller (318) */
    interface TuringRuntimeOriginCaller extends Enum {
        readonly isSystem: boolean;
        readonly asSystem: FrameSupportDispatchRawOrigin;
        readonly isVoid: boolean;
        readonly isPolkadotXcm: boolean;
        readonly asPolkadotXcm: PalletXcmOrigin;
        readonly isCumulusXcm: boolean;
        readonly asCumulusXcm: CumulusPalletXcmOrigin;
        readonly isCouncil: boolean;
        readonly asCouncil: PalletCollectiveRawOrigin;
        readonly isTechnicalCommittee: boolean;
        readonly asTechnicalCommittee: PalletCollectiveRawOrigin;
        readonly type: 'System' | 'Void' | 'PolkadotXcm' | 'CumulusXcm' | 'Council' | 'TechnicalCommittee';
    }
    /** @name FrameSupportDispatchRawOrigin (319) */
    interface FrameSupportDispatchRawOrigin extends Enum {
        readonly isRoot: boolean;
        readonly isSigned: boolean;
        readonly asSigned: AccountId32;
        readonly isNone: boolean;
        readonly type: 'Root' | 'Signed' | 'None';
    }
    /** @name PalletXcmOrigin (320) */
    interface PalletXcmOrigin extends Enum {
        readonly isXcm: boolean;
        readonly asXcm: XcmV1MultiLocation;
        readonly isResponse: boolean;
        readonly asResponse: XcmV1MultiLocation;
        readonly type: 'Xcm' | 'Response';
    }
    /** @name CumulusPalletXcmOrigin (321) */
    interface CumulusPalletXcmOrigin extends Enum {
        readonly isRelay: boolean;
        readonly isSiblingParachain: boolean;
        readonly asSiblingParachain: u32;
        readonly type: 'Relay' | 'SiblingParachain';
    }
    /** @name PalletCollectiveRawOrigin (322) */
    interface PalletCollectiveRawOrigin extends Enum {
        readonly isMembers: boolean;
        readonly asMembers: ITuple<[u32, u32]>;
        readonly isMember: boolean;
        readonly asMember: AccountId32;
        readonly isPhantom: boolean;
        readonly type: 'Members' | 'Member' | 'Phantom';
    }
    /** @name SpCoreVoid (324) */
    type SpCoreVoid = Null;
    /** @name CumulusPalletXcmpQueueCall (325) */
    interface CumulusPalletXcmpQueueCall extends Enum {
        readonly isServiceOverweight: boolean;
        readonly asServiceOverweight: {
            readonly index: u64;
            readonly weightLimit: u64;
        } & Struct;
        readonly isSuspendXcmExecution: boolean;
        readonly isResumeXcmExecution: boolean;
        readonly isUpdateSuspendThreshold: boolean;
        readonly asUpdateSuspendThreshold: {
            readonly new_: u32;
        } & Struct;
        readonly isUpdateDropThreshold: boolean;
        readonly asUpdateDropThreshold: {
            readonly new_: u32;
        } & Struct;
        readonly isUpdateResumeThreshold: boolean;
        readonly asUpdateResumeThreshold: {
            readonly new_: u32;
        } & Struct;
        readonly isUpdateThresholdWeight: boolean;
        readonly asUpdateThresholdWeight: {
            readonly new_: u64;
        } & Struct;
        readonly isUpdateWeightRestrictDecay: boolean;
        readonly asUpdateWeightRestrictDecay: {
            readonly new_: u64;
        } & Struct;
        readonly isUpdateXcmpMaxIndividualWeight: boolean;
        readonly asUpdateXcmpMaxIndividualWeight: {
            readonly new_: u64;
        } & Struct;
        readonly type: 'ServiceOverweight' | 'SuspendXcmExecution' | 'ResumeXcmExecution' | 'UpdateSuspendThreshold' | 'UpdateDropThreshold' | 'UpdateResumeThreshold' | 'UpdateThresholdWeight' | 'UpdateWeightRestrictDecay' | 'UpdateXcmpMaxIndividualWeight';
    }
    /** @name PalletXcmCall (326) */
    interface PalletXcmCall extends Enum {
        readonly isSend: boolean;
        readonly asSend: {
            readonly dest: XcmVersionedMultiLocation;
            readonly message: XcmVersionedXcm;
        } & Struct;
        readonly isTeleportAssets: boolean;
        readonly asTeleportAssets: {
            readonly dest: XcmVersionedMultiLocation;
            readonly beneficiary: XcmVersionedMultiLocation;
            readonly assets: XcmVersionedMultiAssets;
            readonly feeAssetItem: u32;
        } & Struct;
        readonly isReserveTransferAssets: boolean;
        readonly asReserveTransferAssets: {
            readonly dest: XcmVersionedMultiLocation;
            readonly beneficiary: XcmVersionedMultiLocation;
            readonly assets: XcmVersionedMultiAssets;
            readonly feeAssetItem: u32;
        } & Struct;
        readonly isExecute: boolean;
        readonly asExecute: {
            readonly message: XcmVersionedXcm;
            readonly maxWeight: u64;
        } & Struct;
        readonly isForceXcmVersion: boolean;
        readonly asForceXcmVersion: {
            readonly location: XcmV1MultiLocation;
            readonly xcmVersion: u32;
        } & Struct;
        readonly isForceDefaultXcmVersion: boolean;
        readonly asForceDefaultXcmVersion: {
            readonly maybeXcmVersion: Option<u32>;
        } & Struct;
        readonly isForceSubscribeVersionNotify: boolean;
        readonly asForceSubscribeVersionNotify: {
            readonly location: XcmVersionedMultiLocation;
        } & Struct;
        readonly isForceUnsubscribeVersionNotify: boolean;
        readonly asForceUnsubscribeVersionNotify: {
            readonly location: XcmVersionedMultiLocation;
        } & Struct;
        readonly isLimitedReserveTransferAssets: boolean;
        readonly asLimitedReserveTransferAssets: {
            readonly dest: XcmVersionedMultiLocation;
            readonly beneficiary: XcmVersionedMultiLocation;
            readonly assets: XcmVersionedMultiAssets;
            readonly feeAssetItem: u32;
            readonly weightLimit: XcmV2WeightLimit;
        } & Struct;
        readonly isLimitedTeleportAssets: boolean;
        readonly asLimitedTeleportAssets: {
            readonly dest: XcmVersionedMultiLocation;
            readonly beneficiary: XcmVersionedMultiLocation;
            readonly assets: XcmVersionedMultiAssets;
            readonly feeAssetItem: u32;
            readonly weightLimit: XcmV2WeightLimit;
        } & Struct;
        readonly type: 'Send' | 'TeleportAssets' | 'ReserveTransferAssets' | 'Execute' | 'ForceXcmVersion' | 'ForceDefaultXcmVersion' | 'ForceSubscribeVersionNotify' | 'ForceUnsubscribeVersionNotify' | 'LimitedReserveTransferAssets' | 'LimitedTeleportAssets';
    }
    /** @name XcmVersionedXcm (327) */
    interface XcmVersionedXcm extends Enum {
        readonly isV0: boolean;
        readonly asV0: XcmV0Xcm;
        readonly isV1: boolean;
        readonly asV1: XcmV1Xcm;
        readonly isV2: boolean;
        readonly asV2: XcmV2Xcm;
        readonly type: 'V0' | 'V1' | 'V2';
    }
    /** @name XcmV0Xcm (328) */
    interface XcmV0Xcm extends Enum {
        readonly isWithdrawAsset: boolean;
        readonly asWithdrawAsset: {
            readonly assets: Vec<XcmV0MultiAsset>;
            readonly effects: Vec<XcmV0Order>;
        } & Struct;
        readonly isReserveAssetDeposit: boolean;
        readonly asReserveAssetDeposit: {
            readonly assets: Vec<XcmV0MultiAsset>;
            readonly effects: Vec<XcmV0Order>;
        } & Struct;
        readonly isTeleportAsset: boolean;
        readonly asTeleportAsset: {
            readonly assets: Vec<XcmV0MultiAsset>;
            readonly effects: Vec<XcmV0Order>;
        } & Struct;
        readonly isQueryResponse: boolean;
        readonly asQueryResponse: {
            readonly queryId: Compact<u64>;
            readonly response: XcmV0Response;
        } & Struct;
        readonly isTransferAsset: boolean;
        readonly asTransferAsset: {
            readonly assets: Vec<XcmV0MultiAsset>;
            readonly dest: XcmV0MultiLocation;
        } & Struct;
        readonly isTransferReserveAsset: boolean;
        readonly asTransferReserveAsset: {
            readonly assets: Vec<XcmV0MultiAsset>;
            readonly dest: XcmV0MultiLocation;
            readonly effects: Vec<XcmV0Order>;
        } & Struct;
        readonly isTransact: boolean;
        readonly asTransact: {
            readonly originType: XcmV0OriginKind;
            readonly requireWeightAtMost: u64;
            readonly call: XcmDoubleEncoded;
        } & Struct;
        readonly isHrmpNewChannelOpenRequest: boolean;
        readonly asHrmpNewChannelOpenRequest: {
            readonly sender: Compact<u32>;
            readonly maxMessageSize: Compact<u32>;
            readonly maxCapacity: Compact<u32>;
        } & Struct;
        readonly isHrmpChannelAccepted: boolean;
        readonly asHrmpChannelAccepted: {
            readonly recipient: Compact<u32>;
        } & Struct;
        readonly isHrmpChannelClosing: boolean;
        readonly asHrmpChannelClosing: {
            readonly initiator: Compact<u32>;
            readonly sender: Compact<u32>;
            readonly recipient: Compact<u32>;
        } & Struct;
        readonly isRelayedFrom: boolean;
        readonly asRelayedFrom: {
            readonly who: XcmV0MultiLocation;
            readonly message: XcmV0Xcm;
        } & Struct;
        readonly type: 'WithdrawAsset' | 'ReserveAssetDeposit' | 'TeleportAsset' | 'QueryResponse' | 'TransferAsset' | 'TransferReserveAsset' | 'Transact' | 'HrmpNewChannelOpenRequest' | 'HrmpChannelAccepted' | 'HrmpChannelClosing' | 'RelayedFrom';
    }
    /** @name XcmV0Order (330) */
    interface XcmV0Order extends Enum {
        readonly isNull: boolean;
        readonly isDepositAsset: boolean;
        readonly asDepositAsset: {
            readonly assets: Vec<XcmV0MultiAsset>;
            readonly dest: XcmV0MultiLocation;
        } & Struct;
        readonly isDepositReserveAsset: boolean;
        readonly asDepositReserveAsset: {
            readonly assets: Vec<XcmV0MultiAsset>;
            readonly dest: XcmV0MultiLocation;
            readonly effects: Vec<XcmV0Order>;
        } & Struct;
        readonly isExchangeAsset: boolean;
        readonly asExchangeAsset: {
            readonly give: Vec<XcmV0MultiAsset>;
            readonly receive: Vec<XcmV0MultiAsset>;
        } & Struct;
        readonly isInitiateReserveWithdraw: boolean;
        readonly asInitiateReserveWithdraw: {
            readonly assets: Vec<XcmV0MultiAsset>;
            readonly reserve: XcmV0MultiLocation;
            readonly effects: Vec<XcmV0Order>;
        } & Struct;
        readonly isInitiateTeleport: boolean;
        readonly asInitiateTeleport: {
            readonly assets: Vec<XcmV0MultiAsset>;
            readonly dest: XcmV0MultiLocation;
            readonly effects: Vec<XcmV0Order>;
        } & Struct;
        readonly isQueryHolding: boolean;
        readonly asQueryHolding: {
            readonly queryId: Compact<u64>;
            readonly dest: XcmV0MultiLocation;
            readonly assets: Vec<XcmV0MultiAsset>;
        } & Struct;
        readonly isBuyExecution: boolean;
        readonly asBuyExecution: {
            readonly fees: XcmV0MultiAsset;
            readonly weight: u64;
            readonly debt: u64;
            readonly haltOnError: bool;
            readonly xcm: Vec<XcmV0Xcm>;
        } & Struct;
        readonly type: 'Null' | 'DepositAsset' | 'DepositReserveAsset' | 'ExchangeAsset' | 'InitiateReserveWithdraw' | 'InitiateTeleport' | 'QueryHolding' | 'BuyExecution';
    }
    /** @name XcmV0Response (332) */
    interface XcmV0Response extends Enum {
        readonly isAssets: boolean;
        readonly asAssets: Vec<XcmV0MultiAsset>;
        readonly type: 'Assets';
    }
    /** @name XcmV1Xcm (333) */
    interface XcmV1Xcm extends Enum {
        readonly isWithdrawAsset: boolean;
        readonly asWithdrawAsset: {
            readonly assets: XcmV1MultiassetMultiAssets;
            readonly effects: Vec<XcmV1Order>;
        } & Struct;
        readonly isReserveAssetDeposited: boolean;
        readonly asReserveAssetDeposited: {
            readonly assets: XcmV1MultiassetMultiAssets;
            readonly effects: Vec<XcmV1Order>;
        } & Struct;
        readonly isReceiveTeleportedAsset: boolean;
        readonly asReceiveTeleportedAsset: {
            readonly assets: XcmV1MultiassetMultiAssets;
            readonly effects: Vec<XcmV1Order>;
        } & Struct;
        readonly isQueryResponse: boolean;
        readonly asQueryResponse: {
            readonly queryId: Compact<u64>;
            readonly response: XcmV1Response;
        } & Struct;
        readonly isTransferAsset: boolean;
        readonly asTransferAsset: {
            readonly assets: XcmV1MultiassetMultiAssets;
            readonly beneficiary: XcmV1MultiLocation;
        } & Struct;
        readonly isTransferReserveAsset: boolean;
        readonly asTransferReserveAsset: {
            readonly assets: XcmV1MultiassetMultiAssets;
            readonly dest: XcmV1MultiLocation;
            readonly effects: Vec<XcmV1Order>;
        } & Struct;
        readonly isTransact: boolean;
        readonly asTransact: {
            readonly originType: XcmV0OriginKind;
            readonly requireWeightAtMost: u64;
            readonly call: XcmDoubleEncoded;
        } & Struct;
        readonly isHrmpNewChannelOpenRequest: boolean;
        readonly asHrmpNewChannelOpenRequest: {
            readonly sender: Compact<u32>;
            readonly maxMessageSize: Compact<u32>;
            readonly maxCapacity: Compact<u32>;
        } & Struct;
        readonly isHrmpChannelAccepted: boolean;
        readonly asHrmpChannelAccepted: {
            readonly recipient: Compact<u32>;
        } & Struct;
        readonly isHrmpChannelClosing: boolean;
        readonly asHrmpChannelClosing: {
            readonly initiator: Compact<u32>;
            readonly sender: Compact<u32>;
            readonly recipient: Compact<u32>;
        } & Struct;
        readonly isRelayedFrom: boolean;
        readonly asRelayedFrom: {
            readonly who: XcmV1MultilocationJunctions;
            readonly message: XcmV1Xcm;
        } & Struct;
        readonly isSubscribeVersion: boolean;
        readonly asSubscribeVersion: {
            readonly queryId: Compact<u64>;
            readonly maxResponseWeight: Compact<u64>;
        } & Struct;
        readonly isUnsubscribeVersion: boolean;
        readonly type: 'WithdrawAsset' | 'ReserveAssetDeposited' | 'ReceiveTeleportedAsset' | 'QueryResponse' | 'TransferAsset' | 'TransferReserveAsset' | 'Transact' | 'HrmpNewChannelOpenRequest' | 'HrmpChannelAccepted' | 'HrmpChannelClosing' | 'RelayedFrom' | 'SubscribeVersion' | 'UnsubscribeVersion';
    }
    /** @name XcmV1Order (335) */
    interface XcmV1Order extends Enum {
        readonly isNoop: boolean;
        readonly isDepositAsset: boolean;
        readonly asDepositAsset: {
            readonly assets: XcmV1MultiassetMultiAssetFilter;
            readonly maxAssets: u32;
            readonly beneficiary: XcmV1MultiLocation;
        } & Struct;
        readonly isDepositReserveAsset: boolean;
        readonly asDepositReserveAsset: {
            readonly assets: XcmV1MultiassetMultiAssetFilter;
            readonly maxAssets: u32;
            readonly dest: XcmV1MultiLocation;
            readonly effects: Vec<XcmV1Order>;
        } & Struct;
        readonly isExchangeAsset: boolean;
        readonly asExchangeAsset: {
            readonly give: XcmV1MultiassetMultiAssetFilter;
            readonly receive: XcmV1MultiassetMultiAssets;
        } & Struct;
        readonly isInitiateReserveWithdraw: boolean;
        readonly asInitiateReserveWithdraw: {
            readonly assets: XcmV1MultiassetMultiAssetFilter;
            readonly reserve: XcmV1MultiLocation;
            readonly effects: Vec<XcmV1Order>;
        } & Struct;
        readonly isInitiateTeleport: boolean;
        readonly asInitiateTeleport: {
            readonly assets: XcmV1MultiassetMultiAssetFilter;
            readonly dest: XcmV1MultiLocation;
            readonly effects: Vec<XcmV1Order>;
        } & Struct;
        readonly isQueryHolding: boolean;
        readonly asQueryHolding: {
            readonly queryId: Compact<u64>;
            readonly dest: XcmV1MultiLocation;
            readonly assets: XcmV1MultiassetMultiAssetFilter;
        } & Struct;
        readonly isBuyExecution: boolean;
        readonly asBuyExecution: {
            readonly fees: XcmV1MultiAsset;
            readonly weight: u64;
            readonly debt: u64;
            readonly haltOnError: bool;
            readonly instructions: Vec<XcmV1Xcm>;
        } & Struct;
        readonly type: 'Noop' | 'DepositAsset' | 'DepositReserveAsset' | 'ExchangeAsset' | 'InitiateReserveWithdraw' | 'InitiateTeleport' | 'QueryHolding' | 'BuyExecution';
    }
    /** @name XcmV1Response (337) */
    interface XcmV1Response extends Enum {
        readonly isAssets: boolean;
        readonly asAssets: XcmV1MultiassetMultiAssets;
        readonly isVersion: boolean;
        readonly asVersion: u32;
        readonly type: 'Assets' | 'Version';
    }
    /** @name CumulusPalletDmpQueueCall (351) */
    interface CumulusPalletDmpQueueCall extends Enum {
        readonly isServiceOverweight: boolean;
        readonly asServiceOverweight: {
            readonly index: u64;
            readonly weightLimit: u64;
        } & Struct;
        readonly type: 'ServiceOverweight';
    }
    /** @name OrmlXtokensModuleCall (352) */
    interface OrmlXtokensModuleCall extends Enum {
        readonly isTransfer: boolean;
        readonly asTransfer: {
            readonly currencyId: u32;
            readonly amount: u128;
            readonly dest: XcmVersionedMultiLocation;
            readonly destWeight: u64;
        } & Struct;
        readonly isTransferMultiasset: boolean;
        readonly asTransferMultiasset: {
            readonly asset: XcmVersionedMultiAsset;
            readonly dest: XcmVersionedMultiLocation;
            readonly destWeight: u64;
        } & Struct;
        readonly isTransferWithFee: boolean;
        readonly asTransferWithFee: {
            readonly currencyId: u32;
            readonly amount: u128;
            readonly fee: u128;
            readonly dest: XcmVersionedMultiLocation;
            readonly destWeight: u64;
        } & Struct;
        readonly isTransferMultiassetWithFee: boolean;
        readonly asTransferMultiassetWithFee: {
            readonly asset: XcmVersionedMultiAsset;
            readonly fee: XcmVersionedMultiAsset;
            readonly dest: XcmVersionedMultiLocation;
            readonly destWeight: u64;
        } & Struct;
        readonly isTransferMulticurrencies: boolean;
        readonly asTransferMulticurrencies: {
            readonly currencies: Vec<ITuple<[u32, u128]>>;
            readonly feeItem: u32;
            readonly dest: XcmVersionedMultiLocation;
            readonly destWeight: u64;
        } & Struct;
        readonly isTransferMultiassets: boolean;
        readonly asTransferMultiassets: {
            readonly assets: XcmVersionedMultiAssets;
            readonly feeItem: u32;
            readonly dest: XcmVersionedMultiLocation;
            readonly destWeight: u64;
        } & Struct;
        readonly type: 'Transfer' | 'TransferMultiasset' | 'TransferWithFee' | 'TransferMultiassetWithFee' | 'TransferMulticurrencies' | 'TransferMultiassets';
    }
    /** @name XcmVersionedMultiAsset (353) */
    interface XcmVersionedMultiAsset extends Enum {
        readonly isV0: boolean;
        readonly asV0: XcmV0MultiAsset;
        readonly isV1: boolean;
        readonly asV1: XcmV1MultiAsset;
        readonly type: 'V0' | 'V1';
    }
    /** @name PalletSudoCall (356) */
    interface PalletSudoCall extends Enum {
        readonly isSudo: boolean;
        readonly asSudo: {
            readonly call: Call;
        } & Struct;
        readonly isSudoUncheckedWeight: boolean;
        readonly asSudoUncheckedWeight: {
            readonly call: Call;
            readonly weight: u64;
        } & Struct;
        readonly isSetKey: boolean;
        readonly asSetKey: {
            readonly new_: MultiAddress;
        } & Struct;
        readonly isSudoAs: boolean;
        readonly asSudoAs: {
            readonly who: MultiAddress;
            readonly call: Call;
        } & Struct;
        readonly type: 'Sudo' | 'SudoUncheckedWeight' | 'SetKey' | 'SudoAs';
    }
    /** @name PalletTreasuryCall (357) */
    interface PalletTreasuryCall extends Enum {
        readonly isProposeSpend: boolean;
        readonly asProposeSpend: {
            readonly value: Compact<u128>;
            readonly beneficiary: MultiAddress;
        } & Struct;
        readonly isRejectProposal: boolean;
        readonly asRejectProposal: {
            readonly proposalId: Compact<u32>;
        } & Struct;
        readonly isApproveProposal: boolean;
        readonly asApproveProposal: {
            readonly proposalId: Compact<u32>;
        } & Struct;
        readonly isSpend: boolean;
        readonly asSpend: {
            readonly amount: Compact<u128>;
            readonly beneficiary: MultiAddress;
        } & Struct;
        readonly isRemoveApproval: boolean;
        readonly asRemoveApproval: {
            readonly proposalId: Compact<u32>;
        } & Struct;
        readonly type: 'ProposeSpend' | 'RejectProposal' | 'ApproveProposal' | 'Spend' | 'RemoveApproval';
    }
    /** @name PalletCollectiveCall (358) */
    interface PalletCollectiveCall extends Enum {
        readonly isSetMembers: boolean;
        readonly asSetMembers: {
            readonly newMembers: Vec<AccountId32>;
            readonly prime: Option<AccountId32>;
            readonly oldCount: u32;
        } & Struct;
        readonly isExecute: boolean;
        readonly asExecute: {
            readonly proposal: Call;
            readonly lengthBound: Compact<u32>;
        } & Struct;
        readonly isPropose: boolean;
        readonly asPropose: {
            readonly threshold: Compact<u32>;
            readonly proposal: Call;
            readonly lengthBound: Compact<u32>;
        } & Struct;
        readonly isVote: boolean;
        readonly asVote: {
            readonly proposal: H256;
            readonly index: Compact<u32>;
            readonly approve: bool;
        } & Struct;
        readonly isClose: boolean;
        readonly asClose: {
            readonly proposalHash: H256;
            readonly index: Compact<u32>;
            readonly proposalWeightBound: Compact<u64>;
            readonly lengthBound: Compact<u32>;
        } & Struct;
        readonly isDisapproveProposal: boolean;
        readonly asDisapproveProposal: {
            readonly proposalHash: H256;
        } & Struct;
        readonly type: 'SetMembers' | 'Execute' | 'Propose' | 'Vote' | 'Close' | 'DisapproveProposal';
    }
    /** @name PalletMembershipCall (360) */
    interface PalletMembershipCall extends Enum {
        readonly isAddMember: boolean;
        readonly asAddMember: {
            readonly who: AccountId32;
        } & Struct;
        readonly isRemoveMember: boolean;
        readonly asRemoveMember: {
            readonly who: AccountId32;
        } & Struct;
        readonly isSwapMember: boolean;
        readonly asSwapMember: {
            readonly remove: AccountId32;
            readonly add: AccountId32;
        } & Struct;
        readonly isResetMembers: boolean;
        readonly asResetMembers: {
            readonly members: Vec<AccountId32>;
        } & Struct;
        readonly isChangeKey: boolean;
        readonly asChangeKey: {
            readonly new_: AccountId32;
        } & Struct;
        readonly isSetPrime: boolean;
        readonly asSetPrime: {
            readonly who: AccountId32;
        } & Struct;
        readonly isClearPrime: boolean;
        readonly type: 'AddMember' | 'RemoveMember' | 'SwapMember' | 'ResetMembers' | 'ChangeKey' | 'SetPrime' | 'ClearPrime';
    }
    /** @name PalletBountiesCall (361) */
    interface PalletBountiesCall extends Enum {
        readonly isProposeBounty: boolean;
        readonly asProposeBounty: {
            readonly value: Compact<u128>;
            readonly description: Bytes;
        } & Struct;
        readonly isApproveBounty: boolean;
        readonly asApproveBounty: {
            readonly bountyId: Compact<u32>;
        } & Struct;
        readonly isProposeCurator: boolean;
        readonly asProposeCurator: {
            readonly bountyId: Compact<u32>;
            readonly curator: MultiAddress;
            readonly fee: Compact<u128>;
        } & Struct;
        readonly isUnassignCurator: boolean;
        readonly asUnassignCurator: {
            readonly bountyId: Compact<u32>;
        } & Struct;
        readonly isAcceptCurator: boolean;
        readonly asAcceptCurator: {
            readonly bountyId: Compact<u32>;
        } & Struct;
        readonly isAwardBounty: boolean;
        readonly asAwardBounty: {
            readonly bountyId: Compact<u32>;
            readonly beneficiary: MultiAddress;
        } & Struct;
        readonly isClaimBounty: boolean;
        readonly asClaimBounty: {
            readonly bountyId: Compact<u32>;
        } & Struct;
        readonly isCloseBounty: boolean;
        readonly asCloseBounty: {
            readonly bountyId: Compact<u32>;
        } & Struct;
        readonly isExtendBountyExpiry: boolean;
        readonly asExtendBountyExpiry: {
            readonly bountyId: Compact<u32>;
            readonly remark: Bytes;
        } & Struct;
        readonly type: 'ProposeBounty' | 'ApproveBounty' | 'ProposeCurator' | 'UnassignCurator' | 'AcceptCurator' | 'AwardBounty' | 'ClaimBounty' | 'CloseBounty' | 'ExtendBountyExpiry';
    }
    /** @name PalletPreimageCall (362) */
    interface PalletPreimageCall extends Enum {
        readonly isNotePreimage: boolean;
        readonly asNotePreimage: {
            readonly bytes: Bytes;
        } & Struct;
        readonly isUnnotePreimage: boolean;
        readonly asUnnotePreimage: {
            readonly hash_: H256;
        } & Struct;
        readonly isRequestPreimage: boolean;
        readonly asRequestPreimage: {
            readonly hash_: H256;
        } & Struct;
        readonly isUnrequestPreimage: boolean;
        readonly asUnrequestPreimage: {
            readonly hash_: H256;
        } & Struct;
        readonly type: 'NotePreimage' | 'UnnotePreimage' | 'RequestPreimage' | 'UnrequestPreimage';
    }
    /** @name PalletSchedulerCall (363) */
    interface PalletSchedulerCall extends Enum {
        readonly isSchedule: boolean;
        readonly asSchedule: {
            readonly when: u32;
            readonly maybePeriodic: Option<ITuple<[u32, u32]>>;
            readonly priority: u8;
            readonly call: FrameSupportScheduleMaybeHashed;
        } & Struct;
        readonly isCancel: boolean;
        readonly asCancel: {
            readonly when: u32;
            readonly index: u32;
        } & Struct;
        readonly isScheduleNamed: boolean;
        readonly asScheduleNamed: {
            readonly id: Bytes;
            readonly when: u32;
            readonly maybePeriodic: Option<ITuple<[u32, u32]>>;
            readonly priority: u8;
            readonly call: FrameSupportScheduleMaybeHashed;
        } & Struct;
        readonly isCancelNamed: boolean;
        readonly asCancelNamed: {
            readonly id: Bytes;
        } & Struct;
        readonly isScheduleAfter: boolean;
        readonly asScheduleAfter: {
            readonly after: u32;
            readonly maybePeriodic: Option<ITuple<[u32, u32]>>;
            readonly priority: u8;
            readonly call: FrameSupportScheduleMaybeHashed;
        } & Struct;
        readonly isScheduleNamedAfter: boolean;
        readonly asScheduleNamedAfter: {
            readonly id: Bytes;
            readonly after: u32;
            readonly maybePeriodic: Option<ITuple<[u32, u32]>>;
            readonly priority: u8;
            readonly call: FrameSupportScheduleMaybeHashed;
        } & Struct;
        readonly type: 'Schedule' | 'Cancel' | 'ScheduleNamed' | 'CancelNamed' | 'ScheduleAfter' | 'ScheduleNamedAfter';
    }
    /** @name FrameSupportScheduleMaybeHashed (365) */
    interface FrameSupportScheduleMaybeHashed extends Enum {
        readonly isValue: boolean;
        readonly asValue: Call;
        readonly isHash: boolean;
        readonly asHash: H256;
        readonly type: 'Value' | 'Hash';
    }
    /** @name PalletDemocracyCall (366) */
    interface PalletDemocracyCall extends Enum {
        readonly isPropose: boolean;
        readonly asPropose: {
            readonly proposalHash: H256;
            readonly value: Compact<u128>;
        } & Struct;
        readonly isSecond: boolean;
        readonly asSecond: {
            readonly proposal: Compact<u32>;
            readonly secondsUpperBound: Compact<u32>;
        } & Struct;
        readonly isVote: boolean;
        readonly asVote: {
            readonly refIndex: Compact<u32>;
            readonly vote: PalletDemocracyVoteAccountVote;
        } & Struct;
        readonly isEmergencyCancel: boolean;
        readonly asEmergencyCancel: {
            readonly refIndex: u32;
        } & Struct;
        readonly isExternalPropose: boolean;
        readonly asExternalPropose: {
            readonly proposalHash: H256;
        } & Struct;
        readonly isExternalProposeMajority: boolean;
        readonly asExternalProposeMajority: {
            readonly proposalHash: H256;
        } & Struct;
        readonly isExternalProposeDefault: boolean;
        readonly asExternalProposeDefault: {
            readonly proposalHash: H256;
        } & Struct;
        readonly isFastTrack: boolean;
        readonly asFastTrack: {
            readonly proposalHash: H256;
            readonly votingPeriod: u32;
            readonly delay: u32;
        } & Struct;
        readonly isVetoExternal: boolean;
        readonly asVetoExternal: {
            readonly proposalHash: H256;
        } & Struct;
        readonly isCancelReferendum: boolean;
        readonly asCancelReferendum: {
            readonly refIndex: Compact<u32>;
        } & Struct;
        readonly isCancelQueued: boolean;
        readonly asCancelQueued: {
            readonly which: u32;
        } & Struct;
        readonly isDelegate: boolean;
        readonly asDelegate: {
            readonly to: AccountId32;
            readonly conviction: PalletDemocracyConviction;
            readonly balance: u128;
        } & Struct;
        readonly isUndelegate: boolean;
        readonly isClearPublicProposals: boolean;
        readonly isNotePreimage: boolean;
        readonly asNotePreimage: {
            readonly encodedProposal: Bytes;
        } & Struct;
        readonly isNotePreimageOperational: boolean;
        readonly asNotePreimageOperational: {
            readonly encodedProposal: Bytes;
        } & Struct;
        readonly isNoteImminentPreimage: boolean;
        readonly asNoteImminentPreimage: {
            readonly encodedProposal: Bytes;
        } & Struct;
        readonly isNoteImminentPreimageOperational: boolean;
        readonly asNoteImminentPreimageOperational: {
            readonly encodedProposal: Bytes;
        } & Struct;
        readonly isReapPreimage: boolean;
        readonly asReapPreimage: {
            readonly proposalHash: H256;
            readonly proposalLenUpperBound: Compact<u32>;
        } & Struct;
        readonly isUnlock: boolean;
        readonly asUnlock: {
            readonly target: AccountId32;
        } & Struct;
        readonly isRemoveVote: boolean;
        readonly asRemoveVote: {
            readonly index: u32;
        } & Struct;
        readonly isRemoveOtherVote: boolean;
        readonly asRemoveOtherVote: {
            readonly target: AccountId32;
            readonly index: u32;
        } & Struct;
        readonly isEnactProposal: boolean;
        readonly asEnactProposal: {
            readonly proposalHash: H256;
            readonly index: u32;
        } & Struct;
        readonly isBlacklist: boolean;
        readonly asBlacklist: {
            readonly proposalHash: H256;
            readonly maybeRefIndex: Option<u32>;
        } & Struct;
        readonly isCancelProposal: boolean;
        readonly asCancelProposal: {
            readonly propIndex: Compact<u32>;
        } & Struct;
        readonly type: 'Propose' | 'Second' | 'Vote' | 'EmergencyCancel' | 'ExternalPropose' | 'ExternalProposeMajority' | 'ExternalProposeDefault' | 'FastTrack' | 'VetoExternal' | 'CancelReferendum' | 'CancelQueued' | 'Delegate' | 'Undelegate' | 'ClearPublicProposals' | 'NotePreimage' | 'NotePreimageOperational' | 'NoteImminentPreimage' | 'NoteImminentPreimageOperational' | 'ReapPreimage' | 'Unlock' | 'RemoveVote' | 'RemoveOtherVote' | 'EnactProposal' | 'Blacklist' | 'CancelProposal';
    }
    /** @name PalletDemocracyConviction (367) */
    interface PalletDemocracyConviction extends Enum {
        readonly isNone: boolean;
        readonly isLocked1x: boolean;
        readonly isLocked2x: boolean;
        readonly isLocked3x: boolean;
        readonly isLocked4x: boolean;
        readonly isLocked5x: boolean;
        readonly isLocked6x: boolean;
        readonly type: 'None' | 'Locked1x' | 'Locked2x' | 'Locked3x' | 'Locked4x' | 'Locked5x' | 'Locked6x';
    }
    /** @name PalletMultisigCall (368) */
    interface PalletMultisigCall extends Enum {
        readonly isAsMultiThreshold1: boolean;
        readonly asAsMultiThreshold1: {
            readonly otherSignatories: Vec<AccountId32>;
            readonly call: Call;
        } & Struct;
        readonly isAsMulti: boolean;
        readonly asAsMulti: {
            readonly threshold: u16;
            readonly otherSignatories: Vec<AccountId32>;
            readonly maybeTimepoint: Option<PalletMultisigTimepoint>;
            readonly call: WrapperKeepOpaque<Call>;
            readonly storeCall: bool;
            readonly maxWeight: u64;
        } & Struct;
        readonly isApproveAsMulti: boolean;
        readonly asApproveAsMulti: {
            readonly threshold: u16;
            readonly otherSignatories: Vec<AccountId32>;
            readonly maybeTimepoint: Option<PalletMultisigTimepoint>;
            readonly callHash: U8aFixed;
            readonly maxWeight: u64;
        } & Struct;
        readonly isCancelAsMulti: boolean;
        readonly asCancelAsMulti: {
            readonly threshold: u16;
            readonly otherSignatories: Vec<AccountId32>;
            readonly timepoint: PalletMultisigTimepoint;
            readonly callHash: U8aFixed;
        } & Struct;
        readonly type: 'AsMultiThreshold1' | 'AsMulti' | 'ApproveAsMulti' | 'CancelAsMulti';
    }
    /** @name PalletAutomationTimeCall (371) */
    interface PalletAutomationTimeCall extends Enum {
        readonly isScheduleNotifyTask: boolean;
        readonly asScheduleNotifyTask: {
            readonly providedId: Bytes;
            readonly executionTimes: Vec<u64>;
            readonly message: Bytes;
        } & Struct;
        readonly isScheduleNativeTransferTask: boolean;
        readonly asScheduleNativeTransferTask: {
            readonly providedId: Bytes;
            readonly executionTimes: Vec<u64>;
            readonly recipientId: AccountId32;
            readonly amount: Compact<u128>;
        } & Struct;
        readonly isScheduleXcmpTask: boolean;
        readonly asScheduleXcmpTask: {
            readonly providedId: Bytes;
            readonly schedule: PalletAutomationTimeScheduleParam;
            readonly paraId: u32;
            readonly currencyId: u32;
            readonly encodedCall: Bytes;
            readonly encodedCallWeight: u64;
        } & Struct;
        readonly isScheduleAutoCompoundDelegatedStakeTask: boolean;
        readonly asScheduleAutoCompoundDelegatedStakeTask: {
            readonly executionTime: u64;
            readonly frequency: u64;
            readonly collatorId: AccountId32;
            readonly accountMinimum: u128;
        } & Struct;
        readonly isScheduleDynamicDispatchTask: boolean;
        readonly asScheduleDynamicDispatchTask: {
            readonly providedId: Bytes;
            readonly schedule: PalletAutomationTimeScheduleParam;
            readonly call: Call;
        } & Struct;
        readonly isCancelTask: boolean;
        readonly asCancelTask: {
            readonly taskId: H256;
        } & Struct;
        readonly isForceCancelTask: boolean;
        readonly asForceCancelTask: {
            readonly ownerId: AccountId32;
            readonly taskId: H256;
        } & Struct;
        readonly type: 'ScheduleNotifyTask' | 'ScheduleNativeTransferTask' | 'ScheduleXcmpTask' | 'ScheduleAutoCompoundDelegatedStakeTask' | 'ScheduleDynamicDispatchTask' | 'CancelTask' | 'ForceCancelTask';
    }
    /** @name PalletAutomationTimeScheduleParam (373) */
    interface PalletAutomationTimeScheduleParam extends Enum {
        readonly isFixed: boolean;
        readonly asFixed: {
            readonly executionTimes: Vec<u64>;
        } & Struct;
        readonly isRecurring: boolean;
        readonly asRecurring: {
            readonly nextExecutionTime: u64;
            readonly frequency: u64;
        } & Struct;
        readonly type: 'Fixed' | 'Recurring';
    }
    /** @name PalletXcmpHandlerCall (374) */
    interface PalletXcmpHandlerCall extends Enum {
        readonly isAddChainCurrencyData: boolean;
        readonly asAddChainCurrencyData: {
            readonly paraId: u32;
            readonly currencyId: u32;
            readonly xcmData: PalletXcmpHandlerXcmCurrencyData;
        } & Struct;
        readonly isRemoveChainCurrencyData: boolean;
        readonly asRemoveChainCurrencyData: {
            readonly paraId: u32;
            readonly currencyId: u32;
        } & Struct;
        readonly type: 'AddChainCurrencyData' | 'RemoveChainCurrencyData';
    }
    /** @name PalletXcmpHandlerXcmCurrencyData (375) */
    interface PalletXcmpHandlerXcmCurrencyData extends Struct {
        readonly native: bool;
        readonly feePerSecond: u128;
        readonly instructionWeight: u64;
    }
    /** @name PalletAutomationPriceCall (376) */
    interface PalletAutomationPriceCall extends Enum {
        readonly isScheduleTransferTask: boolean;
        readonly asScheduleTransferTask: {
            readonly providedId: Bytes;
            readonly asset: Bytes;
            readonly direction: PalletAutomationPriceDirection;
            readonly triggerPercentage: u128;
            readonly recipient: AccountId32;
            readonly amount: Compact<u128>;
        } & Struct;
        readonly isAddAsset: boolean;
        readonly asAddAsset: {
            readonly asset: Bytes;
            readonly targetPrice: u128;
            readonly upperBound: u16;
            readonly lowerBound: u8;
            readonly assetOwner: AccountId32;
            readonly expirationPeriod: u64;
        } & Struct;
        readonly isAssetPriceUpdate: boolean;
        readonly asAssetPriceUpdate: {
            readonly asset: Bytes;
            readonly value: u128;
        } & Struct;
        readonly isDeleteAsset: boolean;
        readonly asDeleteAsset: {
            readonly asset: Bytes;
        } & Struct;
        readonly type: 'ScheduleTransferTask' | 'AddAsset' | 'AssetPriceUpdate' | 'DeleteAsset';
    }
    /** @name PalletAutomationPriceDirection (377) */
    interface PalletAutomationPriceDirection extends Enum {
        readonly isUp: boolean;
        readonly isDown: boolean;
        readonly type: 'Up' | 'Down';
    }
    /** @name PalletProxyError (378) */
    interface PalletProxyError extends Enum {
        readonly isTooMany: boolean;
        readonly isNotFound: boolean;
        readonly isNotProxy: boolean;
        readonly isUnproxyable: boolean;
        readonly isDuplicate: boolean;
        readonly isNoPermission: boolean;
        readonly isUnannounced: boolean;
        readonly isNoSelfProxy: boolean;
        readonly type: 'TooMany' | 'NotFound' | 'NotProxy' | 'Unproxyable' | 'Duplicate' | 'NoPermission' | 'Unannounced' | 'NoSelfProxy';
    }
    /** @name PalletUtilityError (379) */
    interface PalletUtilityError extends Enum {
        readonly isTooManyCalls: boolean;
        readonly type: 'TooManyCalls';
    }
    /** @name CumulusPalletXcmpQueueInboundChannelDetails (381) */
    interface CumulusPalletXcmpQueueInboundChannelDetails extends Struct {
        readonly sender: u32;
        readonly state: CumulusPalletXcmpQueueInboundState;
        readonly messageMetadata: Vec<ITuple<[u32, PolkadotParachainPrimitivesXcmpMessageFormat]>>;
    }
    /** @name CumulusPalletXcmpQueueInboundState (382) */
    interface CumulusPalletXcmpQueueInboundState extends Enum {
        readonly isOk: boolean;
        readonly isSuspended: boolean;
        readonly type: 'Ok' | 'Suspended';
    }
    /** @name PolkadotParachainPrimitivesXcmpMessageFormat (385) */
    interface PolkadotParachainPrimitivesXcmpMessageFormat extends Enum {
        readonly isConcatenatedVersionedXcm: boolean;
        readonly isConcatenatedEncodedBlob: boolean;
        readonly isSignals: boolean;
        readonly type: 'ConcatenatedVersionedXcm' | 'ConcatenatedEncodedBlob' | 'Signals';
    }
    /** @name CumulusPalletXcmpQueueOutboundChannelDetails (388) */
    interface CumulusPalletXcmpQueueOutboundChannelDetails extends Struct {
        readonly recipient: u32;
        readonly state: CumulusPalletXcmpQueueOutboundState;
        readonly signalsExist: bool;
        readonly firstIndex: u16;
        readonly lastIndex: u16;
    }
    /** @name CumulusPalletXcmpQueueOutboundState (389) */
    interface CumulusPalletXcmpQueueOutboundState extends Enum {
        readonly isOk: boolean;
        readonly isSuspended: boolean;
        readonly type: 'Ok' | 'Suspended';
    }
    /** @name CumulusPalletXcmpQueueQueueConfigData (391) */
    interface CumulusPalletXcmpQueueQueueConfigData extends Struct {
        readonly suspendThreshold: u32;
        readonly dropThreshold: u32;
        readonly resumeThreshold: u32;
        readonly thresholdWeight: u64;
        readonly weightRestrictDecay: u64;
        readonly xcmpMaxIndividualWeight: u64;
    }
    /** @name CumulusPalletXcmpQueueError (393) */
    interface CumulusPalletXcmpQueueError extends Enum {
        readonly isFailedToSend: boolean;
        readonly isBadXcmOrigin: boolean;
        readonly isBadXcm: boolean;
        readonly isBadOverweightIndex: boolean;
        readonly isWeightOverLimit: boolean;
        readonly type: 'FailedToSend' | 'BadXcmOrigin' | 'BadXcm' | 'BadOverweightIndex' | 'WeightOverLimit';
    }
    /** @name PalletXcmError (394) */
    interface PalletXcmError extends Enum {
        readonly isUnreachable: boolean;
        readonly isSendFailure: boolean;
        readonly isFiltered: boolean;
        readonly isUnweighableMessage: boolean;
        readonly isDestinationNotInvertible: boolean;
        readonly isEmpty: boolean;
        readonly isCannotReanchor: boolean;
        readonly isTooManyAssets: boolean;
        readonly isInvalidOrigin: boolean;
        readonly isBadVersion: boolean;
        readonly isBadLocation: boolean;
        readonly isNoSubscription: boolean;
        readonly isAlreadySubscribed: boolean;
        readonly type: 'Unreachable' | 'SendFailure' | 'Filtered' | 'UnweighableMessage' | 'DestinationNotInvertible' | 'Empty' | 'CannotReanchor' | 'TooManyAssets' | 'InvalidOrigin' | 'BadVersion' | 'BadLocation' | 'NoSubscription' | 'AlreadySubscribed';
    }
    /** @name CumulusPalletXcmError (395) */
    type CumulusPalletXcmError = Null;
    /** @name CumulusPalletDmpQueueConfigData (396) */
    interface CumulusPalletDmpQueueConfigData extends Struct {
        readonly maxIndividual: u64;
    }
    /** @name CumulusPalletDmpQueuePageIndexData (397) */
    interface CumulusPalletDmpQueuePageIndexData extends Struct {
        readonly beginUsed: u32;
        readonly endUsed: u32;
        readonly overweightCount: u64;
    }
    /** @name CumulusPalletDmpQueueError (400) */
    interface CumulusPalletDmpQueueError extends Enum {
        readonly isUnknown: boolean;
        readonly isOverLimit: boolean;
        readonly type: 'Unknown' | 'OverLimit';
    }
    /** @name OrmlXtokensModuleError (401) */
    interface OrmlXtokensModuleError extends Enum {
        readonly isAssetHasNoReserve: boolean;
        readonly isNotCrossChainTransfer: boolean;
        readonly isInvalidDest: boolean;
        readonly isNotCrossChainTransferableCurrency: boolean;
        readonly isUnweighableMessage: boolean;
        readonly isXcmExecutionFailed: boolean;
        readonly isCannotReanchor: boolean;
        readonly isInvalidAncestry: boolean;
        readonly isInvalidAsset: boolean;
        readonly isDestinationNotInvertible: boolean;
        readonly isBadVersion: boolean;
        readonly isDistinctReserveForAssetAndFee: boolean;
        readonly isZeroFee: boolean;
        readonly isZeroAmount: boolean;
        readonly isTooManyAssetsBeingSent: boolean;
        readonly isAssetIndexNonExistent: boolean;
        readonly isFeeNotEnough: boolean;
        readonly isNotSupportedMultiLocation: boolean;
        readonly isMinXcmFeeNotDefined: boolean;
        readonly type: 'AssetHasNoReserve' | 'NotCrossChainTransfer' | 'InvalidDest' | 'NotCrossChainTransferableCurrency' | 'UnweighableMessage' | 'XcmExecutionFailed' | 'CannotReanchor' | 'InvalidAncestry' | 'InvalidAsset' | 'DestinationNotInvertible' | 'BadVersion' | 'DistinctReserveForAssetAndFee' | 'ZeroFee' | 'ZeroAmount' | 'TooManyAssetsBeingSent' | 'AssetIndexNonExistent' | 'FeeNotEnough' | 'NotSupportedMultiLocation' | 'MinXcmFeeNotDefined';
    }
    /** @name OrmlUnknownTokensModuleError (404) */
    interface OrmlUnknownTokensModuleError extends Enum {
        readonly isBalanceTooLow: boolean;
        readonly isBalanceOverflow: boolean;
        readonly isUnhandledAsset: boolean;
        readonly type: 'BalanceTooLow' | 'BalanceOverflow' | 'UnhandledAsset';
    }
    /** @name PalletSudoError (405) */
    interface PalletSudoError extends Enum {
        readonly isRequireSudo: boolean;
        readonly type: 'RequireSudo';
    }
    /** @name PalletTreasuryProposal (406) */
    interface PalletTreasuryProposal extends Struct {
        readonly proposer: AccountId32;
        readonly value: u128;
        readonly beneficiary: AccountId32;
        readonly bond: u128;
    }
    /** @name FrameSupportPalletId (409) */
    interface FrameSupportPalletId extends U8aFixed {
    }
    /** @name PalletTreasuryError (410) */
    interface PalletTreasuryError extends Enum {
        readonly isInsufficientProposersBalance: boolean;
        readonly isInvalidIndex: boolean;
        readonly isTooManyApprovals: boolean;
        readonly isInsufficientPermission: boolean;
        readonly isProposalNotApproved: boolean;
        readonly type: 'InsufficientProposersBalance' | 'InvalidIndex' | 'TooManyApprovals' | 'InsufficientPermission' | 'ProposalNotApproved';
    }
    /** @name PalletCollectiveVotes (412) */
    interface PalletCollectiveVotes extends Struct {
        readonly index: u32;
        readonly threshold: u32;
        readonly ayes: Vec<AccountId32>;
        readonly nays: Vec<AccountId32>;
        readonly end: u32;
    }
    /** @name PalletCollectiveError (413) */
    interface PalletCollectiveError extends Enum {
        readonly isNotMember: boolean;
        readonly isDuplicateProposal: boolean;
        readonly isProposalMissing: boolean;
        readonly isWrongIndex: boolean;
        readonly isDuplicateVote: boolean;
        readonly isAlreadyInitialized: boolean;
        readonly isTooEarly: boolean;
        readonly isTooManyProposals: boolean;
        readonly isWrongProposalWeight: boolean;
        readonly isWrongProposalLength: boolean;
        readonly type: 'NotMember' | 'DuplicateProposal' | 'ProposalMissing' | 'WrongIndex' | 'DuplicateVote' | 'AlreadyInitialized' | 'TooEarly' | 'TooManyProposals' | 'WrongProposalWeight' | 'WrongProposalLength';
    }
    /** @name PalletMembershipError (416) */
    interface PalletMembershipError extends Enum {
        readonly isAlreadyMember: boolean;
        readonly isNotMember: boolean;
        readonly isTooManyMembers: boolean;
        readonly type: 'AlreadyMember' | 'NotMember' | 'TooManyMembers';
    }
    /** @name PalletBountiesBounty (417) */
    interface PalletBountiesBounty extends Struct {
        readonly proposer: AccountId32;
        readonly value: u128;
        readonly fee: u128;
        readonly curatorDeposit: u128;
        readonly bond: u128;
        readonly status: PalletBountiesBountyStatus;
    }
    /** @name PalletBountiesBountyStatus (418) */
    interface PalletBountiesBountyStatus extends Enum {
        readonly isProposed: boolean;
        readonly isApproved: boolean;
        readonly isFunded: boolean;
        readonly isCuratorProposed: boolean;
        readonly asCuratorProposed: {
            readonly curator: AccountId32;
        } & Struct;
        readonly isActive: boolean;
        readonly asActive: {
            readonly curator: AccountId32;
            readonly updateDue: u32;
        } & Struct;
        readonly isPendingPayout: boolean;
        readonly asPendingPayout: {
            readonly curator: AccountId32;
            readonly beneficiary: AccountId32;
            readonly unlockAt: u32;
        } & Struct;
        readonly type: 'Proposed' | 'Approved' | 'Funded' | 'CuratorProposed' | 'Active' | 'PendingPayout';
    }
    /** @name PalletBountiesError (420) */
    interface PalletBountiesError extends Enum {
        readonly isInsufficientProposersBalance: boolean;
        readonly isInvalidIndex: boolean;
        readonly isReasonTooBig: boolean;
        readonly isUnexpectedStatus: boolean;
        readonly isRequireCurator: boolean;
        readonly isInvalidValue: boolean;
        readonly isInvalidFee: boolean;
        readonly isPendingPayout: boolean;
        readonly isPremature: boolean;
        readonly isHasActiveChildBounty: boolean;
        readonly isTooManyQueued: boolean;
        readonly type: 'InsufficientProposersBalance' | 'InvalidIndex' | 'ReasonTooBig' | 'UnexpectedStatus' | 'RequireCurator' | 'InvalidValue' | 'InvalidFee' | 'PendingPayout' | 'Premature' | 'HasActiveChildBounty' | 'TooManyQueued';
    }
    /** @name PalletPreimageRequestStatus (421) */
    interface PalletPreimageRequestStatus extends Enum {
        readonly isUnrequested: boolean;
        readonly asUnrequested: Option<ITuple<[AccountId32, u128]>>;
        readonly isRequested: boolean;
        readonly asRequested: u32;
        readonly type: 'Unrequested' | 'Requested';
    }
    /** @name PalletPreimageError (425) */
    interface PalletPreimageError extends Enum {
        readonly isTooLarge: boolean;
        readonly isAlreadyNoted: boolean;
        readonly isNotAuthorized: boolean;
        readonly isNotNoted: boolean;
        readonly isRequested: boolean;
        readonly isNotRequested: boolean;
        readonly type: 'TooLarge' | 'AlreadyNoted' | 'NotAuthorized' | 'NotNoted' | 'Requested' | 'NotRequested';
    }
    /** @name PalletSchedulerScheduledV3 (428) */
    interface PalletSchedulerScheduledV3 extends Struct {
        readonly maybeId: Option<Bytes>;
        readonly priority: u8;
        readonly call: FrameSupportScheduleMaybeHashed;
        readonly maybePeriodic: Option<ITuple<[u32, u32]>>;
        readonly origin: TuringRuntimeOriginCaller;
    }
    /** @name PalletSchedulerError (429) */
    interface PalletSchedulerError extends Enum {
        readonly isFailedToSchedule: boolean;
        readonly isNotFound: boolean;
        readonly isTargetBlockNumberInPast: boolean;
        readonly isRescheduleNoChange: boolean;
        readonly type: 'FailedToSchedule' | 'NotFound' | 'TargetBlockNumberInPast' | 'RescheduleNoChange';
    }
    /** @name PalletDemocracyPreimageStatus (433) */
    interface PalletDemocracyPreimageStatus extends Enum {
        readonly isMissing: boolean;
        readonly asMissing: u32;
        readonly isAvailable: boolean;
        readonly asAvailable: {
            readonly data: Bytes;
            readonly provider: AccountId32;
            readonly deposit: u128;
            readonly since: u32;
            readonly expiry: Option<u32>;
        } & Struct;
        readonly type: 'Missing' | 'Available';
    }
    /** @name PalletDemocracyReferendumInfo (434) */
    interface PalletDemocracyReferendumInfo extends Enum {
        readonly isOngoing: boolean;
        readonly asOngoing: PalletDemocracyReferendumStatus;
        readonly isFinished: boolean;
        readonly asFinished: {
            readonly approved: bool;
            readonly end: u32;
        } & Struct;
        readonly type: 'Ongoing' | 'Finished';
    }
    /** @name PalletDemocracyReferendumStatus (435) */
    interface PalletDemocracyReferendumStatus extends Struct {
        readonly end: u32;
        readonly proposalHash: H256;
        readonly threshold: PalletDemocracyVoteThreshold;
        readonly delay: u32;
        readonly tally: PalletDemocracyTally;
    }
    /** @name PalletDemocracyTally (436) */
    interface PalletDemocracyTally extends Struct {
        readonly ayes: u128;
        readonly nays: u128;
        readonly turnout: u128;
    }
    /** @name PalletDemocracyVoteVoting (437) */
    interface PalletDemocracyVoteVoting extends Enum {
        readonly isDirect: boolean;
        readonly asDirect: {
            readonly votes: Vec<ITuple<[u32, PalletDemocracyVoteAccountVote]>>;
            readonly delegations: PalletDemocracyDelegations;
            readonly prior: PalletDemocracyVotePriorLock;
        } & Struct;
        readonly isDelegating: boolean;
        readonly asDelegating: {
            readonly balance: u128;
            readonly target: AccountId32;
            readonly conviction: PalletDemocracyConviction;
            readonly delegations: PalletDemocracyDelegations;
            readonly prior: PalletDemocracyVotePriorLock;
        } & Struct;
        readonly type: 'Direct' | 'Delegating';
    }
    /** @name PalletDemocracyDelegations (440) */
    interface PalletDemocracyDelegations extends Struct {
        readonly votes: u128;
        readonly capital: u128;
    }
    /** @name PalletDemocracyVotePriorLock (441) */
    interface PalletDemocracyVotePriorLock extends ITuple<[u32, u128]> {
    }
    /** @name PalletDemocracyReleases (444) */
    interface PalletDemocracyReleases extends Enum {
        readonly isV1: boolean;
        readonly type: 'V1';
    }
    /** @name PalletDemocracyError (445) */
    interface PalletDemocracyError extends Enum {
        readonly isValueLow: boolean;
        readonly isProposalMissing: boolean;
        readonly isAlreadyCanceled: boolean;
        readonly isDuplicateProposal: boolean;
        readonly isProposalBlacklisted: boolean;
        readonly isNotSimpleMajority: boolean;
        readonly isInvalidHash: boolean;
        readonly isNoProposal: boolean;
        readonly isAlreadyVetoed: boolean;
        readonly isDuplicatePreimage: boolean;
        readonly isNotImminent: boolean;
        readonly isTooEarly: boolean;
        readonly isImminent: boolean;
        readonly isPreimageMissing: boolean;
        readonly isReferendumInvalid: boolean;
        readonly isPreimageInvalid: boolean;
        readonly isNoneWaiting: boolean;
        readonly isNotVoter: boolean;
        readonly isNoPermission: boolean;
        readonly isAlreadyDelegating: boolean;
        readonly isInsufficientFunds: boolean;
        readonly isNotDelegating: boolean;
        readonly isVotesExist: boolean;
        readonly isInstantNotAllowed: boolean;
        readonly isNonsense: boolean;
        readonly isWrongUpperBound: boolean;
        readonly isMaxVotesReached: boolean;
        readonly isTooManyProposals: boolean;
        readonly isVotingPeriodLow: boolean;
        readonly type: 'ValueLow' | 'ProposalMissing' | 'AlreadyCanceled' | 'DuplicateProposal' | 'ProposalBlacklisted' | 'NotSimpleMajority' | 'InvalidHash' | 'NoProposal' | 'AlreadyVetoed' | 'DuplicatePreimage' | 'NotImminent' | 'TooEarly' | 'Imminent' | 'PreimageMissing' | 'ReferendumInvalid' | 'PreimageInvalid' | 'NoneWaiting' | 'NotVoter' | 'NoPermission' | 'AlreadyDelegating' | 'InsufficientFunds' | 'NotDelegating' | 'VotesExist' | 'InstantNotAllowed' | 'Nonsense' | 'WrongUpperBound' | 'MaxVotesReached' | 'TooManyProposals' | 'VotingPeriodLow';
    }
    /** @name PalletMultisigMultisig (447) */
    interface PalletMultisigMultisig extends Struct {
        readonly when: PalletMultisigTimepoint;
        readonly deposit: u128;
        readonly depositor: AccountId32;
        readonly approvals: Vec<AccountId32>;
    }
    /** @name PalletMultisigError (449) */
    interface PalletMultisigError extends Enum {
        readonly isMinimumThreshold: boolean;
        readonly isAlreadyApproved: boolean;
        readonly isNoApprovalsNeeded: boolean;
        readonly isTooFewSignatories: boolean;
        readonly isTooManySignatories: boolean;
        readonly isSignatoriesOutOfOrder: boolean;
        readonly isSenderInSignatories: boolean;
        readonly isNotFound: boolean;
        readonly isNotOwner: boolean;
        readonly isNoTimepoint: boolean;
        readonly isWrongTimepoint: boolean;
        readonly isUnexpectedTimepoint: boolean;
        readonly isMaxWeightTooLow: boolean;
        readonly isAlreadyStored: boolean;
        readonly type: 'MinimumThreshold' | 'AlreadyApproved' | 'NoApprovalsNeeded' | 'TooFewSignatories' | 'TooManySignatories' | 'SignatoriesOutOfOrder' | 'SenderInSignatories' | 'NotFound' | 'NotOwner' | 'NoTimepoint' | 'WrongTimepoint' | 'UnexpectedTimepoint' | 'MaxWeightTooLow' | 'AlreadyStored';
    }
    /** @name PalletAutomationTimeScheduledTasks (450) */
    interface PalletAutomationTimeScheduledTasks extends Struct {
        readonly tasks: Vec<ITuple<[AccountId32, H256]>>;
        readonly weight: u128;
    }
    /** @name PalletAutomationTimeTask (453) */
    interface PalletAutomationTimeTask extends Struct {
        readonly ownerId: AccountId32;
        readonly providedId: Bytes;
        readonly schedule: PalletAutomationTimeSchedule;
        readonly action: PalletAutomationTimeAction;
    }
    /** @name PalletAutomationTimeSchedule (454) */
    interface PalletAutomationTimeSchedule extends Enum {
        readonly isFixed: boolean;
        readonly asFixed: {
            readonly executionTimes: Vec<u64>;
            readonly executionsLeft: u32;
        } & Struct;
        readonly isRecurring: boolean;
        readonly asRecurring: {
            readonly nextExecutionTime: u64;
            readonly frequency: u64;
        } & Struct;
        readonly type: 'Fixed' | 'Recurring';
    }
    /** @name PalletAutomationTimeAction (455) */
    interface PalletAutomationTimeAction extends Enum {
        readonly isNotify: boolean;
        readonly asNotify: {
            readonly message: Bytes;
        } & Struct;
        readonly isNativeTransfer: boolean;
        readonly asNativeTransfer: {
            readonly sender: AccountId32;
            readonly recipient: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isXcmp: boolean;
        readonly asXcmp: {
            readonly paraId: u32;
            readonly currencyId: u32;
            readonly encodedCall: Bytes;
            readonly encodedCallWeight: u64;
        } & Struct;
        readonly isAutoCompoundDelegatedStake: boolean;
        readonly asAutoCompoundDelegatedStake: {
            readonly delegator: AccountId32;
            readonly collator: AccountId32;
            readonly accountMinimum: u128;
        } & Struct;
        readonly isDynamicDispatch: boolean;
        readonly asDynamicDispatch: {
            readonly encodedCall: Bytes;
        } & Struct;
        readonly type: 'Notify' | 'NativeTransfer' | 'Xcmp' | 'AutoCompoundDelegatedStake' | 'DynamicDispatch';
    }
    /** @name PalletAutomationTimeMissedTaskV2 (457) */
    interface PalletAutomationTimeMissedTaskV2 extends Struct {
        readonly ownerId: AccountId32;
        readonly taskId: H256;
        readonly executionTime: u64;
    }
    /** @name PalletAutomationTimeError (459) */
    interface PalletAutomationTimeError extends Enum {
        readonly isInvalidTime: boolean;
        readonly isPastTime: boolean;
        readonly isTimeTooFarOut: boolean;
        readonly isEmptyMessage: boolean;
        readonly isEmptyProvidedId: boolean;
        readonly isDuplicateTask: boolean;
        readonly isTimeSlotFull: boolean;
        readonly isTaskDoesNotExist: boolean;
        readonly isBlockTimeNotSet: boolean;
        readonly isInvalidAmount: boolean;
        readonly isTransferToSelf: boolean;
        readonly isInsufficientBalance: boolean;
        readonly isLiquidityRestrictions: boolean;
        readonly isTooManyExecutionsTimes: boolean;
        readonly isCallCannotBeDecoded: boolean;
        readonly type: 'InvalidTime' | 'PastTime' | 'TimeTooFarOut' | 'EmptyMessage' | 'EmptyProvidedId' | 'DuplicateTask' | 'TimeSlotFull' | 'TaskDoesNotExist' | 'BlockTimeNotSet' | 'InvalidAmount' | 'TransferToSelf' | 'InsufficientBalance' | 'LiquidityRestrictions' | 'TooManyExecutionsTimes' | 'CallCannotBeDecoded';
    }
    /** @name PalletVestingError (461) */
    interface PalletVestingError extends Enum {
        readonly isBlockTimeNotSet: boolean;
        readonly type: 'BlockTimeNotSet';
    }
    /** @name PalletXcmpHandlerError (462) */
    interface PalletXcmpHandlerError extends Enum {
        readonly isCurrencyChainComboNotSupported: boolean;
        readonly isCurrencyChainComboNotFound: boolean;
        readonly isFeeOverflow: boolean;
        readonly isWeightOverflow: boolean;
        readonly isFailedMultiLocationToJunction: boolean;
        readonly isCannotReanchor: boolean;
        readonly isErrorSendingXcmToTarget: boolean;
        readonly isXcmExecutionFailed: boolean;
        readonly isErrorGettingCallWeight: boolean;
        readonly type: 'CurrencyChainComboNotSupported' | 'CurrencyChainComboNotFound' | 'FeeOverflow' | 'WeightOverflow' | 'FailedMultiLocationToJunction' | 'CannotReanchor' | 'ErrorSendingXcmToTarget' | 'XcmExecutionFailed' | 'ErrorGettingCallWeight';
    }
    /** @name PalletAutomationPriceTask (466) */
    interface PalletAutomationPriceTask extends Struct {
        readonly ownerId: AccountId32;
        readonly providedId: Bytes;
        readonly asset: Bytes;
        readonly direction: PalletAutomationPriceDirection;
        readonly triggerPercentage: u128;
        readonly action: PalletAutomationPriceAction;
    }
    /** @name PalletAutomationPriceAction (467) */
    interface PalletAutomationPriceAction extends Enum {
        readonly isNativeTransfer: boolean;
        readonly asNativeTransfer: {
            readonly sender: AccountId32;
            readonly recipient: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly type: 'NativeTransfer';
    }
    /** @name PalletAutomationPriceAssetMetadatum (469) */
    interface PalletAutomationPriceAssetMetadatum extends Struct {
        readonly upperBound: u16;
        readonly lowerBound: u8;
        readonly expirationPeriod: u64;
        readonly assetSudo: AccountId32;
    }
    /** @name PalletAutomationPriceError (470) */
    interface PalletAutomationPriceError extends Enum {
        readonly isEmptyProvidedId: boolean;
        readonly isInvalidTime: boolean;
        readonly isDuplicateTask: boolean;
        readonly isAssetNotSupported: boolean;
        readonly isAssetAlreadySupported: boolean;
        readonly isInvalidAssetSudo: boolean;
        readonly isAssetNotInTriggerableRange: boolean;
        readonly isBlockTimeNotSet: boolean;
        readonly isInvalidAssetExpirationWindow: boolean;
        readonly isMaxTasksReached: boolean;
        readonly isTaskInsertionFailure: boolean;
        readonly isInsufficientBalance: boolean;
        readonly isLiquidityRestrictions: boolean;
        readonly isAssetLimitReached: boolean;
        readonly isDirectionNotSupported: boolean;
        readonly type: 'EmptyProvidedId' | 'InvalidTime' | 'DuplicateTask' | 'AssetNotSupported' | 'AssetAlreadySupported' | 'InvalidAssetSudo' | 'AssetNotInTriggerableRange' | 'BlockTimeNotSet' | 'InvalidAssetExpirationWindow' | 'MaxTasksReached' | 'TaskInsertionFailure' | 'InsufficientBalance' | 'LiquidityRestrictions' | 'AssetLimitReached' | 'DirectionNotSupported';
    }
    /** @name SpRuntimeMultiSignature (472) */
    interface SpRuntimeMultiSignature extends Enum {
        readonly isEd25519: boolean;
        readonly asEd25519: SpCoreEd25519Signature;
        readonly isSr25519: boolean;
        readonly asSr25519: SpCoreSr25519Signature;
        readonly isEcdsa: boolean;
        readonly asEcdsa: SpCoreEcdsaSignature;
        readonly type: 'Ed25519' | 'Sr25519' | 'Ecdsa';
    }
    /** @name SpCoreEd25519Signature (473) */
    interface SpCoreEd25519Signature extends U8aFixed {
    }
    /** @name SpCoreSr25519Signature (475) */
    interface SpCoreSr25519Signature extends U8aFixed {
    }
    /** @name SpCoreEcdsaSignature (476) */
    interface SpCoreEcdsaSignature extends U8aFixed {
    }
    /** @name FrameSystemExtensionsCheckSpecVersion (479) */
    type FrameSystemExtensionsCheckSpecVersion = Null;
    /** @name FrameSystemExtensionsCheckTxVersion (480) */
    type FrameSystemExtensionsCheckTxVersion = Null;
    /** @name FrameSystemExtensionsCheckGenesis (481) */
    type FrameSystemExtensionsCheckGenesis = Null;
    /** @name FrameSystemExtensionsCheckNonce (484) */
    interface FrameSystemExtensionsCheckNonce extends Compact<u32> {
    }
    /** @name FrameSystemExtensionsCheckWeight (485) */
    type FrameSystemExtensionsCheckWeight = Null;
    /** @name PalletTransactionPaymentChargeTransactionPayment (486) */
    interface PalletTransactionPaymentChargeTransactionPayment extends Compact<u128> {
    }
    /** @name TuringRuntimeRuntime (487) */
    type TuringRuntimeRuntime = Null;
}
