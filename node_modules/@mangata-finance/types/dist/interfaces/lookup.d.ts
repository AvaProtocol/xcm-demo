declare const _default: {
    /**
     * Lookup3: frame_system::AccountInfo<Index, AccountData>
     **/
    FrameSystemAccountInfo: {
        nonce: string;
        consumers: string;
        providers: string;
        sufficients: string;
        data: string;
    };
    /**
     * Lookup6: frame_support::weights::PerDispatchClass<T>
     **/
    FrameSupportWeightsPerDispatchClassU64: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    /**
     * Lookup10: sp_runtime::generic::digest::Digest
     **/
    SpRuntimeDigest: {
        logs: string;
    };
    /**
     * Lookup12: sp_runtime::generic::digest::DigestItem
     **/
    SpRuntimeDigestDigestItem: {
        _enum: {
            Other: string;
            __Unused1: string;
            __Unused2: string;
            __Unused3: string;
            Consensus: string;
            Seal: string;
            PreRuntime: string;
            __Unused7: string;
            RuntimeEnvironmentUpdated: string;
        };
    };
    /**
     * Lookup15: frame_system::EventRecord<mangata_rococo_runtime::Event, primitive_types::H256>
     **/
    FrameSystemEventRecord: {
        phase: string;
        event: string;
        topics: string;
    };
    /**
     * Lookup17: frame_system::pallet::Event<T>
     **/
    FrameSystemEvent: {
        _enum: {
            ExtrinsicSuccess: {
                dispatchInfo: string;
            };
            ExtrinsicFailed: {
                dispatchError: string;
                dispatchInfo: string;
            };
            CodeUpdated: string;
            NewAccount: {
                account: string;
            };
            KilledAccount: {
                account: string;
            };
            Remarked: {
                _alias: {
                    hash_: string;
                };
                sender: string;
                hash_: string;
            };
        };
    };
    /**
     * Lookup18: frame_support::weights::DispatchInfo
     **/
    FrameSupportWeightsDispatchInfo: {
        weight: string;
        class: string;
        paysFee: string;
    };
    /**
     * Lookup19: frame_support::weights::DispatchClass
     **/
    FrameSupportWeightsDispatchClass: {
        _enum: string[];
    };
    /**
     * Lookup20: frame_support::weights::Pays
     **/
    FrameSupportWeightsPays: {
        _enum: string[];
    };
    /**
     * Lookup21: sp_runtime::DispatchError
     **/
    SpRuntimeDispatchError: {
        _enum: {
            Other: string;
            CannotLookup: string;
            BadOrigin: string;
            Module: string;
            ConsumerRemaining: string;
            NoProviders: string;
            TooManyConsumers: string;
            Token: string;
            Arithmetic: string;
            Transactional: string;
        };
    };
    /**
     * Lookup22: sp_runtime::ModuleError
     **/
    SpRuntimeModuleError: {
        index: string;
        error: string;
    };
    /**
     * Lookup23: sp_runtime::TokenError
     **/
    SpRuntimeTokenError: {
        _enum: string[];
    };
    /**
     * Lookup24: sp_runtime::ArithmeticError
     **/
    SpRuntimeArithmeticError: {
        _enum: string[];
    };
    /**
     * Lookup25: sp_runtime::TransactionalError
     **/
    SpRuntimeTransactionalError: {
        _enum: string[];
    };
    /**
     * Lookup26: cumulus_pallet_parachain_system::pallet::Event<T>
     **/
    CumulusPalletParachainSystemEvent: {
        _enum: {
            ValidationFunctionStored: string;
            ValidationFunctionApplied: {
                relayChainBlockNum: string;
            };
            ValidationFunctionDiscarded: string;
            UpgradeAuthorized: {
                codeHash: string;
            };
            DownwardMessagesReceived: {
                count: string;
            };
            DownwardMessagesProcessed: {
                weightUsed: string;
                dmqHead: string;
            };
        };
    };
    /**
     * Lookup27: pallet_bridge::Event
     **/
    PalletBridgeEvent: {
        _enum: {
            AppUpdated: string;
        };
    };
    /**
     * Lookup28: artemis_core::types::App
     **/
    ArtemisCoreApp: {
        _enum: string[];
    };
    /**
     * Lookup30: pallet_verifier::Event
     **/
    PalletVerifierEvent: string;
    /**
     * Lookup31: artemis_asset::RawEvent<sp_core::crypto::AccountId32>
     **/
    ArtemisAssetRawEvent: {
        _enum: {
            Burned: string;
            Minted: string;
            Transferred: string;
        };
    };
    /**
     * Lookup35: artemis_eth_app::RawEvent<sp_core::crypto::AccountId32>
     **/
    ArtemisEthAppRawEvent: {
        _enum: {
            Transfer: string;
        };
    };
    /**
     * Lookup36: artemis_erc20_app::RawEvent<sp_core::crypto::AccountId32>
     **/
    ArtemisErc20AppRawEvent: {
        _enum: {
            Transfer: string;
        };
    };
    /**
     * Lookup37: orml_tokens::module::Event<T>
     **/
    OrmlTokensModuleEvent: {
        _enum: {
            Endowed: {
                currencyId: string;
                who: string;
                amount: string;
            };
            DustLost: {
                currencyId: string;
                who: string;
                amount: string;
            };
            Transfer: {
                currencyId: string;
                from: string;
                to: string;
                amount: string;
            };
            Reserved: {
                currencyId: string;
                who: string;
                amount: string;
            };
            Unreserved: {
                currencyId: string;
                who: string;
                amount: string;
            };
            RepatriatedReserve: {
                currencyId: string;
                from: string;
                to: string;
                amount: string;
                status: string;
            };
            BalanceSet: {
                currencyId: string;
                who: string;
                free: string;
                reserved: string;
            };
            Issued: string;
            Minted: string;
        };
    };
    /**
     * Lookup39: frame_support::traits::tokens::misc::BalanceStatus
     **/
    FrameSupportTokensMiscBalanceStatus: {
        _enum: string[];
    };
    /**
     * Lookup40: pallet_transaction_payment::pallet::Event<T>
     **/
    PalletTransactionPaymentEvent: {
        _enum: {
            TransactionFeePaid: {
                who: string;
                actualFee: string;
                tip: string;
            };
        };
    };
    /**
     * Lookup41: pallet_xyk::pallet::Event<T>
     **/
    PalletXykEvent: {
        _enum: {
            PoolCreated: string;
            AssetsSwapped: string;
            LiquidityMinted: string;
            LiquidityBurned: string;
            PoolPromoted: string;
            LiquidityActivated: string;
            LiquidityDeactivated: string;
            RewardsClaimed: string;
        };
    };
    /**
     * Lookup42: pallet_vesting_mangata::pallet::Event<T>
     **/
    PalletVestingMangataEvent: {
        _enum: {
            VestingUpdated: string;
            VestingCompleted: string;
        };
    };
    /**
     * Lookup43: pallet_crowdloan_rewards::pallet::Event<T>
     **/
    PalletCrowdloanRewardsEvent: {
        _enum: {
            InitialPaymentMade: string;
            NativeIdentityAssociated: string;
            RewardsPaid: string;
            RewardAddressUpdated: string;
            InitializedAlreadyInitializedAccount: string;
            InitializedAccountWithNotEnoughContribution: string;
        };
    };
    /**
     * Lookup45: pallet_issuance::pallet::Event<T>
     **/
    PalletIssuanceEvent: {
        _enum: {
            SessionIssuanceIssued: string;
            SessionIssuanceRecorded: string;
            IssuanceConfigInitialized: string;
            TGEFinalized: string;
            TGEInstanceFailed: string;
            TGEInstanceSucceeded: string;
        };
    };
    /**
     * Lookup46: pallet_issuance::IssuanceInfo
     **/
    PalletIssuanceIssuanceInfo: {
        cap: string;
        issuanceAtInit: string;
        linearIssuanceBlocks: string;
        liquidityMiningSplit: string;
        stakingSplit: string;
        totalCrowdloanAllocation: string;
    };
    /**
     * Lookup48: pallet_issuance::TgeInfo<sp_core::crypto::AccountId32>
     **/
    PalletIssuanceTgeInfo: {
        who: string;
        amount: string;
    };
    /**
     * Lookup49: parachain_staking::pallet::Event<T>
     **/
    ParachainStakingEvent: {
        _enum: {
            NewRound: string;
            JoinedCollatorCandidates: string;
            CollatorChosen: string;
            CandidateBondMoreRequested: string;
            CandidateBondLessRequested: string;
            CandidateBondedMore: string;
            CandidateBondedLess: string;
            CandidateWentOffline: string;
            CandidateBackOnline: string;
            CandidateScheduledExit: string;
            CancelledCandidateExit: string;
            CancelledCandidateBondChange: string;
            CandidateLeft: string;
            DelegationIncreaseScheduled: string;
            DelegationDecreaseScheduled: string;
            DelegationIncreased: string;
            DelegationDecreased: string;
            DelegatorExitScheduled: string;
            DelegationRevocationScheduled: string;
            DelegatorLeft: string;
            DelegationRevoked: string;
            DelegatorExitCancelled: string;
            CancelledDelegationRequest: string;
            Delegation: string;
            DelegatorLeftCandidate: string;
            DelegatorDueReward: string;
            Rewarded: string;
            StakeExpectationsSet: string;
            TotalSelectedSet: string;
            CollatorCommissionSet: string;
        };
    };
    /**
     * Lookup50: parachain_staking::pallet::CandidateBondRequest
     **/
    ParachainStakingCandidateBondRequest: {
        amount: string;
        change: string;
        whenExecutable: string;
    };
    /**
     * Lookup51: parachain_staking::pallet::CandidateBondChange
     **/
    ParachainStakingCandidateBondChange: {
        _enum: string[];
    };
    /**
     * Lookup53: parachain_staking::pallet::DelegationRequest<sp_core::crypto::AccountId32>
     **/
    ParachainStakingDelegationRequest: {
        collator: string;
        amount: string;
        whenExecutable: string;
        action: string;
    };
    /**
     * Lookup54: parachain_staking::pallet::DelegationChange
     **/
    ParachainStakingDelegationChange: {
        _enum: string[];
    };
    /**
     * Lookup55: parachain_staking::pallet::DelegatorAdded
     **/
    ParachainStakingDelegatorAdded: {
        _enum: {
            AddedToTop: {
                newTotal: string;
            };
            AddedToBottom: string;
        };
    };
    /**
     * Lookup56: pallet_session::pallet::Event
     **/
    PalletSessionEvent: {
        _enum: {
            NewSession: {
                sessionIndex: string;
            };
        };
    };
    /**
     * Lookup57: pallet_multipurpose_liquidity::pallet::Event<T>
     **/
    PalletMultipurposeLiquidityEvent: {
        _enum: {
            VestingTokensReserved: string;
            TokensRelockedFromReserve: string;
        };
    };
    /**
     * Lookup58: cumulus_pallet_xcmp_queue::pallet::Event<T>
     **/
    CumulusPalletXcmpQueueEvent: {
        _enum: {
            Success: {
                messageHash: string;
                weight: string;
            };
            Fail: {
                messageHash: string;
                error: string;
                weight: string;
            };
            BadVersion: {
                messageHash: string;
            };
            BadFormat: {
                messageHash: string;
            };
            UpwardMessageSent: {
                messageHash: string;
            };
            XcmpMessageSent: {
                messageHash: string;
            };
            OverweightEnqueued: {
                sender: string;
                sentAt: string;
                index: string;
                required: string;
            };
            OverweightServiced: {
                index: string;
                used: string;
            };
        };
    };
    /**
     * Lookup60: xcm::v2::traits::Error
     **/
    XcmV2TraitsError: {
        _enum: {
            Overflow: string;
            Unimplemented: string;
            UntrustedReserveLocation: string;
            UntrustedTeleportLocation: string;
            MultiLocationFull: string;
            MultiLocationNotInvertible: string;
            BadOrigin: string;
            InvalidLocation: string;
            AssetNotFound: string;
            FailedToTransactAsset: string;
            NotWithdrawable: string;
            LocationCannotHold: string;
            ExceedsMaxMessageSize: string;
            DestinationUnsupported: string;
            Transport: string;
            Unroutable: string;
            UnknownClaim: string;
            FailedToDecode: string;
            MaxWeightInvalid: string;
            NotHoldingFees: string;
            TooExpensive: string;
            Trap: string;
            UnhandledXcmVersion: string;
            WeightLimitReached: string;
            Barrier: string;
            WeightNotComputable: string;
        };
    };
    /**
     * Lookup62: pallet_xcm::pallet::Event<T>
     **/
    PalletXcmEvent: {
        _enum: {
            Attempted: string;
            Sent: string;
            UnexpectedResponse: string;
            ResponseReady: string;
            Notified: string;
            NotifyOverweight: string;
            NotifyDispatchError: string;
            NotifyDecodeFailed: string;
            InvalidResponder: string;
            InvalidResponderVersion: string;
            ResponseTaken: string;
            AssetsTrapped: string;
            VersionChangeNotified: string;
            SupportedVersionChanged: string;
            NotifyTargetSendFail: string;
            NotifyTargetMigrationFail: string;
        };
    };
    /**
     * Lookup63: xcm::v2::traits::Outcome
     **/
    XcmV2TraitsOutcome: {
        _enum: {
            Complete: string;
            Incomplete: string;
            Error: string;
        };
    };
    /**
     * Lookup64: xcm::v1::multilocation::MultiLocation
     **/
    XcmV1MultiLocation: {
        parents: string;
        interior: string;
    };
    /**
     * Lookup65: xcm::v1::multilocation::Junctions
     **/
    XcmV1MultilocationJunctions: {
        _enum: {
            Here: string;
            X1: string;
            X2: string;
            X3: string;
            X4: string;
            X5: string;
            X6: string;
            X7: string;
            X8: string;
        };
    };
    /**
     * Lookup66: xcm::v1::junction::Junction
     **/
    XcmV1Junction: {
        _enum: {
            Parachain: string;
            AccountId32: {
                network: string;
                id: string;
            };
            AccountIndex64: {
                network: string;
                index: string;
            };
            AccountKey20: {
                network: string;
                key: string;
            };
            PalletInstance: string;
            GeneralIndex: string;
            GeneralKey: string;
            OnlyChild: string;
            Plurality: {
                id: string;
                part: string;
            };
        };
    };
    /**
     * Lookup68: xcm::v0::junction::NetworkId
     **/
    XcmV0JunctionNetworkId: {
        _enum: {
            Any: string;
            Named: string;
            Polkadot: string;
            Kusama: string;
        };
    };
    /**
     * Lookup72: xcm::v0::junction::BodyId
     **/
    XcmV0JunctionBodyId: {
        _enum: {
            Unit: string;
            Named: string;
            Index: string;
            Executive: string;
            Technical: string;
            Legislative: string;
            Judicial: string;
        };
    };
    /**
     * Lookup73: xcm::v0::junction::BodyPart
     **/
    XcmV0JunctionBodyPart: {
        _enum: {
            Voice: string;
            Members: {
                count: string;
            };
            Fraction: {
                nom: string;
                denom: string;
            };
            AtLeastProportion: {
                nom: string;
                denom: string;
            };
            MoreThanProportion: {
                nom: string;
                denom: string;
            };
        };
    };
    /**
     * Lookup74: xcm::v2::Xcm<Call>
     **/
    XcmV2Xcm: string;
    /**
     * Lookup76: xcm::v2::Instruction<Call>
     **/
    XcmV2Instruction: {
        _enum: {
            WithdrawAsset: string;
            ReserveAssetDeposited: string;
            ReceiveTeleportedAsset: string;
            QueryResponse: {
                queryId: string;
                response: string;
                maxWeight: string;
            };
            TransferAsset: {
                assets: string;
                beneficiary: string;
            };
            TransferReserveAsset: {
                assets: string;
                dest: string;
                xcm: string;
            };
            Transact: {
                originType: string;
                requireWeightAtMost: string;
                call: string;
            };
            HrmpNewChannelOpenRequest: {
                sender: string;
                maxMessageSize: string;
                maxCapacity: string;
            };
            HrmpChannelAccepted: {
                recipient: string;
            };
            HrmpChannelClosing: {
                initiator: string;
                sender: string;
                recipient: string;
            };
            ClearOrigin: string;
            DescendOrigin: string;
            ReportError: {
                queryId: string;
                dest: string;
                maxResponseWeight: string;
            };
            DepositAsset: {
                assets: string;
                maxAssets: string;
                beneficiary: string;
            };
            DepositReserveAsset: {
                assets: string;
                maxAssets: string;
                dest: string;
                xcm: string;
            };
            ExchangeAsset: {
                give: string;
                receive: string;
            };
            InitiateReserveWithdraw: {
                assets: string;
                reserve: string;
                xcm: string;
            };
            InitiateTeleport: {
                assets: string;
                dest: string;
                xcm: string;
            };
            QueryHolding: {
                queryId: string;
                dest: string;
                assets: string;
                maxResponseWeight: string;
            };
            BuyExecution: {
                fees: string;
                weightLimit: string;
            };
            RefundSurplus: string;
            SetErrorHandler: string;
            SetAppendix: string;
            ClearError: string;
            ClaimAsset: {
                assets: string;
                ticket: string;
            };
            Trap: string;
            SubscribeVersion: {
                queryId: string;
                maxResponseWeight: string;
            };
            UnsubscribeVersion: string;
        };
    };
    /**
     * Lookup77: xcm::v1::multiasset::MultiAssets
     **/
    XcmV1MultiassetMultiAssets: string;
    /**
     * Lookup79: xcm::v1::multiasset::MultiAsset
     **/
    XcmV1MultiAsset: {
        id: string;
        fun: string;
    };
    /**
     * Lookup80: xcm::v1::multiasset::AssetId
     **/
    XcmV1MultiassetAssetId: {
        _enum: {
            Concrete: string;
            Abstract: string;
        };
    };
    /**
     * Lookup81: xcm::v1::multiasset::Fungibility
     **/
    XcmV1MultiassetFungibility: {
        _enum: {
            Fungible: string;
            NonFungible: string;
        };
    };
    /**
     * Lookup82: xcm::v1::multiasset::AssetInstance
     **/
    XcmV1MultiassetAssetInstance: {
        _enum: {
            Undefined: string;
            Index: string;
            Array4: string;
            Array8: string;
            Array16: string;
            Array32: string;
            Blob: string;
        };
    };
    /**
     * Lookup85: xcm::v2::Response
     **/
    XcmV2Response: {
        _enum: {
            Null: string;
            Assets: string;
            ExecutionResult: string;
            Version: string;
        };
    };
    /**
     * Lookup88: xcm::v0::OriginKind
     **/
    XcmV0OriginKind: {
        _enum: string[];
    };
    /**
     * Lookup89: xcm::double_encoded::DoubleEncoded<T>
     **/
    XcmDoubleEncoded: {
        encoded: string;
    };
    /**
     * Lookup90: xcm::v1::multiasset::MultiAssetFilter
     **/
    XcmV1MultiassetMultiAssetFilter: {
        _enum: {
            Definite: string;
            Wild: string;
        };
    };
    /**
     * Lookup91: xcm::v1::multiasset::WildMultiAsset
     **/
    XcmV1MultiassetWildMultiAsset: {
        _enum: {
            All: string;
            AllOf: {
                id: string;
                fun: string;
            };
        };
    };
    /**
     * Lookup92: xcm::v1::multiasset::WildFungibility
     **/
    XcmV1MultiassetWildFungibility: {
        _enum: string[];
    };
    /**
     * Lookup93: xcm::v2::WeightLimit
     **/
    XcmV2WeightLimit: {
        _enum: {
            Unlimited: string;
            Limited: string;
        };
    };
    /**
     * Lookup95: xcm::VersionedMultiAssets
     **/
    XcmVersionedMultiAssets: {
        _enum: {
            V0: string;
            V1: string;
        };
    };
    /**
     * Lookup97: xcm::v0::multi_asset::MultiAsset
     **/
    XcmV0MultiAsset: {
        _enum: {
            None: string;
            All: string;
            AllFungible: string;
            AllNonFungible: string;
            AllAbstractFungible: {
                id: string;
            };
            AllAbstractNonFungible: {
                class: string;
            };
            AllConcreteFungible: {
                id: string;
            };
            AllConcreteNonFungible: {
                class: string;
            };
            AbstractFungible: {
                id: string;
                amount: string;
            };
            AbstractNonFungible: {
                class: string;
                instance: string;
            };
            ConcreteFungible: {
                id: string;
                amount: string;
            };
            ConcreteNonFungible: {
                class: string;
                instance: string;
            };
        };
    };
    /**
     * Lookup98: xcm::v0::multi_location::MultiLocation
     **/
    XcmV0MultiLocation: {
        _enum: {
            Null: string;
            X1: string;
            X2: string;
            X3: string;
            X4: string;
            X5: string;
            X6: string;
            X7: string;
            X8: string;
        };
    };
    /**
     * Lookup99: xcm::v0::junction::Junction
     **/
    XcmV0Junction: {
        _enum: {
            Parent: string;
            Parachain: string;
            AccountId32: {
                network: string;
                id: string;
            };
            AccountIndex64: {
                network: string;
                index: string;
            };
            AccountKey20: {
                network: string;
                key: string;
            };
            PalletInstance: string;
            GeneralIndex: string;
            GeneralKey: string;
            OnlyChild: string;
            Plurality: {
                id: string;
                part: string;
            };
        };
    };
    /**
     * Lookup100: xcm::VersionedMultiLocation
     **/
    XcmVersionedMultiLocation: {
        _enum: {
            V0: string;
            V1: string;
        };
    };
    /**
     * Lookup101: cumulus_pallet_xcm::pallet::Event<T>
     **/
    CumulusPalletXcmEvent: {
        _enum: {
            InvalidFormat: string;
            UnsupportedVersion: string;
            ExecutedDownward: string;
        };
    };
    /**
     * Lookup102: cumulus_pallet_dmp_queue::pallet::Event<T>
     **/
    CumulusPalletDmpQueueEvent: {
        _enum: {
            InvalidFormat: {
                messageId: string;
            };
            UnsupportedVersion: {
                messageId: string;
            };
            ExecutedDownward: {
                messageId: string;
                outcome: string;
            };
            WeightExhausted: {
                messageId: string;
                remainingWeight: string;
                requiredWeight: string;
            };
            OverweightEnqueued: {
                messageId: string;
                overweightIndex: string;
                requiredWeight: string;
            };
            OverweightServiced: {
                overweightIndex: string;
                weightUsed: string;
            };
        };
    };
    /**
     * Lookup103: orml_xtokens::module::Event<T>
     **/
    OrmlXtokensModuleEvent: {
        _enum: {
            TransferredMultiAssets: {
                sender: string;
                assets: string;
                fee: string;
                dest: string;
            };
        };
    };
    /**
     * Lookup104: orml_unknown_tokens::module::Event
     **/
    OrmlUnknownTokensModuleEvent: {
        _enum: {
            Deposited: {
                asset: string;
                who: string;
            };
            Withdrawn: {
                asset: string;
                who: string;
            };
        };
    };
    /**
     * Lookup105: orml_xcm::module::Event<T>
     **/
    OrmlXcmModuleEvent: {
        _enum: {
            Sent: {
                to: string;
                message: string;
            };
        };
    };
    /**
     * Lookup106: orml_asset_registry::module::Event<T>
     **/
    OrmlAssetRegistryModuleEvent: {
        _enum: {
            RegisteredAsset: {
                assetId: string;
                metadata: string;
            };
            UpdatedAsset: {
                assetId: string;
                metadata: string;
            };
        };
    };
    /**
     * Lookup107: orml_traits::asset_registry::AssetMetadata<Balance, mangata_primitives::assets::CustomMetadata>
     **/
    OrmlTraitsAssetRegistryAssetMetadata: {
        decimals: string;
        name: string;
        symbol: string;
        existentialDeposit: string;
        location: string;
        additional: string;
    };
    /**
     * Lookup108: mangata_primitives::assets::CustomMetadata
     **/
    MangataPrimitivesAssetsCustomMetadata: {
        xcm: string;
    };
    /**
     * Lookup110: mangata_primitives::assets::XcmMetadata
     **/
    MangataPrimitivesAssetsXcmMetadata: {
        feePerSecond: string;
    };
    /**
     * Lookup112: pallet_treasury::pallet::Event<T, I>
     **/
    PalletTreasuryEvent: {
        _enum: {
            Proposed: {
                proposalIndex: string;
            };
            Spending: {
                budgetRemaining: string;
            };
            Awarded: {
                proposalIndex: string;
                award: string;
                account: string;
            };
            Rejected: {
                proposalIndex: string;
                slashed: string;
            };
            Burnt: {
                burntFunds: string;
            };
            Rollover: {
                rolloverBalance: string;
            };
            Deposit: {
                value: string;
            };
            SpendApproved: {
                proposalIndex: string;
                amount: string;
                beneficiary: string;
            };
        };
    };
    /**
     * Lookup113: pallet_sudo::pallet::Event<T>
     **/
    PalletSudoEvent: {
        _enum: {
            Sudid: {
                sudoResult: string;
            };
            KeyChanged: {
                oldSudoer: string;
            };
            SudoAsDone: {
                sudoResult: string;
            };
        };
    };
    /**
     * Lookup115: pallet_sudo_origin::pallet::Event<T>
     **/
    PalletSudoOriginEvent: {
        _enum: {
            SuOriginDid: string;
            SuOriginDoAsDone: string;
        };
    };
    /**
     * Lookup116: pallet_collective::pallet::Event<T, I>
     **/
    PalletCollectiveEvent: {
        _enum: {
            Proposed: {
                account: string;
                proposalIndex: string;
                proposalHash: string;
                threshold: string;
            };
            Voted: {
                account: string;
                proposalHash: string;
                voted: string;
                yes: string;
                no: string;
            };
            Approved: {
                proposalHash: string;
            };
            Disapproved: {
                proposalHash: string;
            };
            Executed: {
                proposalHash: string;
                result: string;
            };
            MemberExecuted: {
                proposalHash: string;
                result: string;
            };
            Closed: {
                proposalHash: string;
                yes: string;
                no: string;
            };
        };
    };
    /**
     * Lookup117: pallet_elections_phragmen::pallet::Event<T>
     **/
    PalletElectionsPhragmenEvent: {
        _enum: {
            NewTerm: {
                newMembers: string;
            };
            EmptyTerm: string;
            ElectionError: string;
            MemberKicked: {
                member: string;
            };
            Renounced: {
                candidate: string;
            };
            CandidateSlashed: {
                candidate: string;
                amount: string;
            };
            SeatHolderSlashed: {
                seatHolder: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup120: pallet_bootstrap::pallet::Event<T>
     **/
    PalletBootstrapEvent: {
        _enum: {
            Provisioned: string;
            VestedProvisioned: string;
            RewardsClaimed: string;
            AccountsWhitelisted: string;
            BootstrapParitallyFinalized: string;
            BootstrapFinalized: string;
        };
    };
    /**
     * Lookup121: pallet_utility::pallet::Event
     **/
    PalletUtilityEvent: {
        _enum: {
            BatchInterrupted: {
                index: string;
                error: string;
            };
            BatchCompleted: string;
            BatchCompletedWithErrors: string;
            ItemCompleted: string;
            ItemFailed: {
                error: string;
            };
            DispatchedAs: {
                result: string;
            };
        };
    };
    /**
     * Lookup122: frame_system::Phase
     **/
    FrameSystemPhase: {
        _enum: {
            ApplyExtrinsic: string;
            Finalization: string;
            Initialization: string;
        };
    };
    /**
     * Lookup126: frame_system::LastRuntimeUpgradeInfo
     **/
    FrameSystemLastRuntimeUpgradeInfo: {
        specVersion: string;
        specName: string;
    };
    /**
     * Lookup128: frame_system::pallet::Call<T>
     **/
    FrameSystemCall: {
        _enum: {
            fill_block: {
                ratio: string;
            };
            remark: {
                remark: string;
            };
            set_heap_pages: {
                pages: string;
            };
            set_code: {
                code: string;
            };
            set_code_without_checks: {
                code: string;
            };
            set_storage: {
                items: string;
            };
            kill_storage: {
                _alias: {
                    keys_: string;
                };
                keys_: string;
            };
            kill_prefix: {
                prefix: string;
                subkeys: string;
            };
            remark_with_event: {
                remark: string;
            };
        };
    };
    /**
     * Lookup132: frame_system::limits::BlockWeights
     **/
    FrameSystemLimitsBlockWeights: {
        baseBlock: string;
        maxBlock: string;
        perClass: string;
    };
    /**
     * Lookup133: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
     **/
    FrameSupportWeightsPerDispatchClassWeightsPerClass: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    /**
     * Lookup134: frame_system::limits::WeightsPerClass
     **/
    FrameSystemLimitsWeightsPerClass: {
        baseExtrinsic: string;
        maxExtrinsic: string;
        maxTotal: string;
        reserved: string;
    };
    /**
     * Lookup136: frame_system::limits::BlockLength
     **/
    FrameSystemLimitsBlockLength: {
        max: string;
    };
    /**
     * Lookup137: frame_support::weights::PerDispatchClass<T>
     **/
    FrameSupportWeightsPerDispatchClassU32: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    /**
     * Lookup138: frame_support::weights::RuntimeDbWeight
     **/
    FrameSupportWeightsRuntimeDbWeight: {
        read: string;
        write: string;
    };
    /**
     * Lookup139: sp_version::RuntimeVersion
     **/
    SpVersionRuntimeVersion: {
        specName: string;
        implName: string;
        authoringVersion: string;
        specVersion: string;
        implVersion: string;
        apis: string;
        transactionVersion: string;
        stateVersion: string;
    };
    /**
     * Lookup144: frame_system::pallet::Error<T>
     **/
    FrameSystemError: {
        _enum: string[];
    };
    /**
     * Lookup145: polkadot_primitives::v2::PersistedValidationData<primitive_types::H256, N>
     **/
    PolkadotPrimitivesV2PersistedValidationData: {
        parentHead: string;
        relayParentNumber: string;
        relayParentStorageRoot: string;
        maxPovSize: string;
    };
    /**
     * Lookup148: polkadot_primitives::v2::UpgradeRestriction
     **/
    PolkadotPrimitivesV2UpgradeRestriction: {
        _enum: string[];
    };
    /**
     * Lookup149: sp_trie::storage_proof::StorageProof
     **/
    SpTrieStorageProof: {
        trieNodes: string;
    };
    /**
     * Lookup150: BTreeSet<T>
     **/
    BTreeSet: string;
    /**
     * Lookup151: cumulus_pallet_parachain_system::relay_state_snapshot::MessagingStateSnapshot
     **/
    CumulusPalletParachainSystemRelayStateSnapshotMessagingStateSnapshot: {
        dmqMqcHead: string;
        relayDispatchQueueSize: string;
        ingressChannels: string;
        egressChannels: string;
    };
    /**
     * Lookup154: polkadot_primitives::v2::AbridgedHrmpChannel
     **/
    PolkadotPrimitivesV2AbridgedHrmpChannel: {
        maxCapacity: string;
        maxTotalSize: string;
        maxMessageSize: string;
        msgCount: string;
        totalSize: string;
        mqcHead: string;
    };
    /**
     * Lookup155: polkadot_primitives::v2::AbridgedHostConfiguration
     **/
    PolkadotPrimitivesV2AbridgedHostConfiguration: {
        maxCodeSize: string;
        maxHeadDataSize: string;
        maxUpwardQueueCount: string;
        maxUpwardQueueSize: string;
        maxUpwardMessageSize: string;
        maxUpwardMessageNumPerCandidate: string;
        hrmpMaxMessageNumPerCandidate: string;
        validationUpgradeCooldown: string;
        validationUpgradeDelay: string;
    };
    /**
     * Lookup161: polkadot_core_primitives::OutboundHrmpMessage<polkadot_parachain::primitives::Id>
     **/
    PolkadotCorePrimitivesOutboundHrmpMessage: {
        recipient: string;
        data: string;
    };
    /**
     * Lookup162: cumulus_pallet_parachain_system::pallet::Call<T>
     **/
    CumulusPalletParachainSystemCall: {
        _enum: {
            set_validation_data: {
                data: string;
            };
            sudo_send_upward_message: {
                message: string;
            };
            authorize_upgrade: {
                codeHash: string;
            };
            enact_authorized_upgrade: {
                code: string;
            };
        };
    };
    /**
     * Lookup163: cumulus_primitives_parachain_inherent::ParachainInherentData
     **/
    CumulusPrimitivesParachainInherentParachainInherentData: {
        validationData: string;
        relayChainState: string;
        downwardMessages: string;
        horizontalMessages: string;
    };
    /**
     * Lookup165: polkadot_core_primitives::InboundDownwardMessage<BlockNumber>
     **/
    PolkadotCorePrimitivesInboundDownwardMessage: {
        sentAt: string;
        msg: string;
    };
    /**
     * Lookup168: polkadot_core_primitives::InboundHrmpMessage<BlockNumber>
     **/
    PolkadotCorePrimitivesInboundHrmpMessage: {
        sentAt: string;
        data: string;
    };
    /**
     * Lookup171: cumulus_pallet_parachain_system::pallet::Error<T>
     **/
    CumulusPalletParachainSystemError: {
        _enum: string[];
    };
    /**
     * Lookup172: pallet_timestamp::pallet::Call<T>
     **/
    PalletTimestampCall: {
        _enum: {
            set: {
                now: string;
            };
        };
    };
    /**
     * Lookup173: pallet_bridge::Call<T>
     **/
    PalletBridgeCall: {
        _enum: {
            update_registry: {
                app: string;
                currentAppIdOption: string;
                updatedAppId: string;
            };
            submit: {
                appId: string;
                message: string;
            };
        };
    };
    /**
     * Lookup175: artemis_core::types::Message
     **/
    ArtemisCoreMessage: {
        payload: string;
        verification: string;
    };
    /**
     * Lookup176: artemis_core::types::VerificationInput
     **/
    ArtemisCoreVerificationInput: {
        _enum: {
            Basic: {
                blockNumber: string;
                eventIndex: string;
            };
            None: string;
        };
    };
    /**
     * Lookup177: pallet_bridge::Error<T>
     **/
    PalletBridgeError: {
        _enum: string[];
    };
    /**
     * Lookup178: pallet_verifier::Call<T>
     **/
    PalletVerifierCall: string;
    /**
     * Lookup179: pallet_verifier::Error<T>
     **/
    PalletVerifierError: {
        _enum: string[];
    };
    /**
     * Lookup180: artemis_asset::Call<T>
     **/
    ArtemisAssetCall: {
        _enum: {
            transfer: {
                assetId: string;
                to: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup181: artemis_asset::Error<T>
     **/
    ArtemisAssetError: {
        _enum: string[];
    };
    /**
     * Lookup182: artemis_eth_app::Call<T>
     **/
    ArtemisEthAppCall: {
        _enum: {
            burn: {
                recipient: string;
                inputAmount: string;
            };
        };
    };
    /**
     * Lookup183: artemis_eth_app::Error<T>
     **/
    ArtemisEthAppError: {
        _enum: string[];
    };
    /**
     * Lookup184: artemis_erc20_app::Call<T>
     **/
    ArtemisErc20AppCall: {
        _enum: {
            burn: {
                assetId: string;
                recipient: string;
                inputAmount: string;
            };
        };
    };
    /**
     * Lookup185: artemis_erc20_app::Error<T>
     **/
    ArtemisErc20AppError: {
        _enum: string[];
    };
    /**
     * Lookup188: orml_tokens::BalanceLock<Balance>
     **/
    OrmlTokensBalanceLock: {
        id: string;
        amount: string;
    };
    /**
     * Lookup190: orml_tokens::AccountData<Balance>
     **/
    OrmlTokensAccountData: {
        free: string;
        reserved: string;
        frozen: string;
    };
    /**
     * Lookup191: orml_tokens::module::Call<T>
     **/
    OrmlTokensModuleCall: {
        _enum: {
            transfer: {
                dest: string;
                currencyId: string;
                amount: string;
            };
            transfer_all: {
                dest: string;
                currencyId: string;
                keepAlive: string;
            };
            transfer_keep_alive: {
                dest: string;
                currencyId: string;
                amount: string;
            };
            force_transfer: {
                source: string;
                dest: string;
                currencyId: string;
                amount: string;
            };
            set_balance: {
                who: string;
                currencyId: string;
                newFree: string;
                newReserved: string;
            };
            create: {
                who: string;
                amount: string;
            };
            mint: {
                currencyId: string;
                who: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup194: orml_tokens::module::Error<T>
     **/
    OrmlTokensModuleError: {
        _enum: string[];
    };
    /**
     * Lookup196: pallet_transaction_payment::Releases
     **/
    PalletTransactionPaymentReleases: {
        _enum: string[];
    };
    /**
     * Lookup201: pallet_xyk::pallet::Call<T>
     **/
    PalletXykCall: {
        _enum: {
            create_pool: {
                firstAssetId: string;
                firstAssetAmount: string;
                secondAssetId: string;
                secondAssetAmount: string;
            };
            sell_asset: {
                soldAssetId: string;
                boughtAssetId: string;
                soldAssetAmount: string;
                minAmountOut: string;
            };
            buy_asset: {
                soldAssetId: string;
                boughtAssetId: string;
                boughtAssetAmount: string;
                maxAmountIn: string;
            };
            mint_liquidity_using_vesting_native_tokens_by_vesting_index: {
                nativeAssetVestingIndex: string;
                vestingNativeAssetUnlockSomeAmountOrAll: string;
                secondAssetId: string;
                expectedSecondAssetAmount: string;
            };
            mint_liquidity_using_vesting_native_tokens: {
                vestingNativeAssetAmount: string;
                secondAssetId: string;
                expectedSecondAssetAmount: string;
            };
            mint_liquidity: {
                firstAssetId: string;
                secondAssetId: string;
                firstAssetAmount: string;
                expectedSecondAssetAmount: string;
            };
            burn_liquidity: {
                firstAssetId: string;
                secondAssetId: string;
                liquidityAssetAmount: string;
            };
            claim_rewards: {
                liquidityTokenId: string;
                amount: string;
            };
            promote_pool: {
                liquidityTokenId: string;
            };
            activate_liquidity: {
                liquidityTokenId: string;
                amount: string;
                useBalanceFrom: string;
            };
            deactivate_liquidity: {
                liquidityTokenId: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup204: mp_multipurpose_liquidity::ActivateKind
     **/
    MpMultipurposeLiquidityActivateKind: {
        _enum: string[];
    };
    /**
     * Lookup205: pallet_xyk::pallet::Error<T>
     **/
    PalletXykError: {
        _enum: string[];
    };
    /**
     * Lookup207: pallet_vesting_mangata::vesting_info::VestingInfo<Balance, BlockNumber>
     **/
    PalletVestingMangataVestingInfo: {
        locked: string;
        perBlock: string;
        startingBlock: string;
    };
    /**
     * Lookup209: pallet_vesting_mangata::Releases
     **/
    PalletVestingMangataReleases: {
        _enum: string[];
    };
    /**
     * Lookup210: pallet_vesting_mangata::pallet::Call<T>
     **/
    PalletVestingMangataCall: {
        _enum: {
            vest: {
                tokenId: string;
            };
            vest_other: {
                tokenId: string;
                target: string;
            };
            force_vested_transfer: {
                tokenId: string;
                source: string;
                target: string;
                schedule: string;
            };
            merge_schedules: {
                tokenId: string;
                schedule1Index: string;
                schedule2Index: string;
            };
            sudo_unlock_all_vesting_tokens: {
                target: string;
                tokenId: string;
            };
        };
    };
    /**
     * Lookup211: pallet_vesting_mangata::pallet::Error<T>
     **/
    PalletVestingMangataError: {
        _enum: string[];
    };
    /**
     * Lookup212: pallet_crowdloan_rewards::pallet::RewardInfo<T>
     **/
    PalletCrowdloanRewardsRewardInfo: {
        totalReward: string;
        claimedReward: string;
        contributedRelayAddresses: string;
    };
    /**
     * Lookup214: pallet_crowdloan_rewards::pallet::Call<T>
     **/
    PalletCrowdloanRewardsCall: {
        _enum: {
            associate_native_identity: {
                rewardAccount: string;
                relayAccount: string;
                proof: string;
            };
            change_association_with_relay_keys: {
                rewardAccount: string;
                previousAccount: string;
                proofs: string;
            };
            claim: string;
            update_reward_address: {
                newRewardAccount: string;
            };
            complete_initialization: {
                leaseEndingBlock: string;
            };
            set_crowdloan_allocation: {
                crowdloanAllocationAmount: string;
            };
            initialize_reward_vec: {
                rewards: string;
            };
        };
    };
    /**
     * Lookup215: sp_runtime::MultiSignature
     **/
    SpRuntimeMultiSignature: {
        _enum: {
            Ed25519: string;
            Sr25519: string;
            Ecdsa: string;
        };
    };
    /**
     * Lookup216: sp_core::ed25519::Signature
     **/
    SpCoreEd25519Signature: string;
    /**
     * Lookup218: sp_core::sr25519::Signature
     **/
    SpCoreSr25519Signature: string;
    /**
     * Lookup219: sp_core::ecdsa::Signature
     **/
    SpCoreEcdsaSignature: string;
    /**
     * Lookup225: pallet_crowdloan_rewards::pallet::Error<T>
     **/
    PalletCrowdloanRewardsError: {
        _enum: string[];
    };
    /**
     * Lookup227: pallet_issuance::pallet::Call<T>
     **/
    PalletIssuanceCall: {
        _enum: {
            init_issuance_config: string;
            finalize_tge: string;
            execute_tge: {
                tgeInfos: string;
            };
        };
    };
    /**
     * Lookup230: pallet_issuance::pallet::Error<T>
     **/
    PalletIssuanceError: {
        _enum: string[];
    };
    /**
     * Lookup232: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
     **/
    PalletAuthorshipUncleEntryItem: {
        _enum: {
            InclusionHeight: string;
            Uncle: string;
        };
    };
    /**
     * Lookup234: pallet_authorship::pallet::Call<T>
     **/
    PalletAuthorshipCall: {
        _enum: {
            set_uncles: {
                newUncles: string;
            };
        };
    };
    /**
     * Lookup236: sp_runtime::generic::header_ver::Header<Number, sp_runtime::traits::BlakeTwo256>
     **/
    SpRuntimeHeaderVerHeader: {
        parentHash: string;
        number: string;
        stateRoot: string;
        extrinsicsRoot: string;
        digest: string;
        seed: string;
        count: string;
    };
    /**
     * Lookup237: sp_runtime::traits::BlakeTwo256
     **/
    SpRuntimeBlakeTwo256: string;
    /**
     * Lookup238: sp_core::seed::ShufflingSeed
     **/
    SpCoreSeedShufflingSeed: {
        seed: string;
        proof: string;
    };
    /**
     * Lookup240: pallet_authorship::pallet::Error<T>
     **/
    PalletAuthorshipError: {
        _enum: string[];
    };
    /**
     * Lookup241: parachain_staking::pallet::RoundInfo<BlockNumber>
     **/
    ParachainStakingRoundInfo: {
        current: string;
        first: string;
        length: string;
    };
    /**
     * Lookup242: parachain_staking::pallet::Delegator<sp_core::crypto::AccountId32>
     **/
    ParachainStakingDelegator: {
        id: string;
        delegations: string;
        requests: string;
        status: string;
    };
    /**
     * Lookup243: parachain_staking::set::OrderedSet<parachain_staking::pallet::Bond<sp_core::crypto::AccountId32>>
     **/
    ParachainStakingSetOrderedSetBond: string;
    /**
     * Lookup244: parachain_staking::pallet::Bond<sp_core::crypto::AccountId32>
     **/
    ParachainStakingBond: {
        owner: string;
        amount: string;
        liquidityToken: string;
    };
    /**
     * Lookup246: parachain_staking::pallet::PendingDelegationRequests<sp_core::crypto::AccountId32>
     **/
    ParachainStakingPendingDelegationRequests: {
        requests: string;
    };
    /**
     * Lookup250: parachain_staking::pallet::DelegatorStatus
     **/
    ParachainStakingDelegatorStatus: {
        _enum: {
            Active: string;
            Leaving: string;
        };
    };
    /**
     * Lookup251: parachain_staking::pallet::CollatorCandidate<sp_core::crypto::AccountId32>
     **/
    ParachainStakingCollatorCandidate: {
        id: string;
        bond: string;
        liquidityToken: string;
        delegators: string;
        topDelegations: string;
        bottomDelegations: string;
        totalCounted: string;
        totalBacking: string;
        request: string;
        state: string;
    };
    /**
     * Lookup252: parachain_staking::set::OrderedSet<sp_core::crypto::AccountId32>
     **/
    ParachainStakingSetOrderedSetAccountId32: string;
    /**
     * Lookup254: parachain_staking::pallet::CollatorStatus
     **/
    ParachainStakingCollatorStatus: {
        _enum: {
            Active: string;
            Idle: string;
            Leaving: string;
        };
    };
    /**
     * Lookup256: parachain_staking::pallet::CollatorSnapshot<sp_core::crypto::AccountId32>
     **/
    ParachainStakingCollatorSnapshot: {
        bond: string;
        delegations: string;
        total: string;
        liquidityToken: string;
    };
    /**
     * Lookup260: parachain_staking::pallet::Call<T>
     **/
    ParachainStakingCall: {
        _enum: {
            set_total_selected: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            set_collator_commission: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            join_candidates: {
                bond: string;
                liquidityToken: string;
                useBalanceFrom: string;
                candidateCount: string;
                liquidityTokenCount: string;
            };
            schedule_leave_candidates: {
                candidateCount: string;
            };
            execute_leave_candidates: {
                candidate: string;
                candidateDelegationCount: string;
            };
            cancel_leave_candidates: {
                candidateCount: string;
            };
            go_offline: string;
            go_online: string;
            schedule_candidate_bond_more: {
                more: string;
                useBalanceFrom: string;
            };
            schedule_candidate_bond_less: {
                less: string;
            };
            execute_candidate_bond_request: {
                candidate: string;
                useBalanceFrom: string;
            };
            cancel_candidate_bond_request: string;
            delegate: {
                collator: string;
                amount: string;
                useBalanceFrom: string;
                candidateDelegationCount: string;
                delegationCount: string;
            };
            schedule_leave_delegators: string;
            execute_leave_delegators: {
                delegator: string;
                delegationCount: string;
            };
            cancel_leave_delegators: string;
            schedule_revoke_delegation: {
                collator: string;
            };
            schedule_delegator_bond_more: {
                candidate: string;
                more: string;
                useBalanceFrom: string;
            };
            schedule_delegator_bond_less: {
                candidate: string;
                less: string;
            };
            execute_delegation_request: {
                delegator: string;
                candidate: string;
                useBalanceFrom: string;
            };
            cancel_delegation_request: {
                candidate: string;
            };
            add_staking_liquidity_token: {
                pairedOrLiquidityToken: string;
                currentLiquidityTokens: string;
            };
            remove_staking_liquidity_token: {
                pairedOrLiquidityToken: string;
                currentLiquidityTokens: string;
            };
        };
    };
    /**
     * Lookup262: mp_multipurpose_liquidity::BondKind
     **/
    MpMultipurposeLiquidityBondKind: {
        _enum: string[];
    };
    /**
     * Lookup263: parachain_staking::pallet::PairedOrLiquidityToken
     **/
    ParachainStakingPairedOrLiquidityToken: {
        _enum: {
            Paired: string;
            Liquidity: string;
        };
    };
    /**
     * Lookup264: parachain_staking::pallet::Error<T>
     **/
    ParachainStakingError: {
        _enum: string[];
    };
    /**
     * Lookup267: mangata_rococo_runtime::SessionKeys
     **/
    MangataRococoRuntimeSessionKeys: {
        aura: string;
    };
    /**
     * Lookup268: sp_consensus_aura::sr25519::app_sr25519::Public
     **/
    SpConsensusAuraSr25519AppSr25519Public: string;
    /**
     * Lookup269: sp_core::sr25519::Public
     **/
    SpCoreSr25519Public: string;
    /**
     * Lookup272: sp_core::crypto::KeyTypeId
     **/
    SpCoreCryptoKeyTypeId: string;
    /**
     * Lookup273: pallet_session::pallet::Call<T>
     **/
    PalletSessionCall: {
        _enum: {
            set_keys: {
                _alias: {
                    keys_: string;
                };
                keys_: string;
                proof: string;
            };
            purge_keys: string;
        };
    };
    /**
     * Lookup274: pallet_session::pallet::Error<T>
     **/
    PalletSessionError: {
        _enum: string[];
    };
    /**
     * Lookup278: pallet_multipurpose_liquidity::pallet::ReserveStatusInfo
     **/
    PalletMultipurposeLiquidityReserveStatusInfo: {
        stakedUnactivatedReserves: string;
        activatedUnstakedReserves: string;
        stakedAndActivatedReserves: string;
        unspentReserves: string;
        relockAmount: string;
    };
    /**
     * Lookup280: pallet_multipurpose_liquidity::pallet::RelockStatusInfo
     **/
    PalletMultipurposeLiquidityRelockStatusInfo: {
        amount: string;
        startingBlock: string;
        endingBlockAsBalance: string;
    };
    /**
     * Lookup282: pallet_multipurpose_liquidity::pallet::Call<T>
     **/
    PalletMultipurposeLiquidityCall: {
        _enum: {
            reserve_vesting_liquidity_tokens_by_vesting_index: {
                liquidityTokenId: string;
                liquidityTokenVestingIndex: string;
                liquidityTokenUnlockSomeAmountOrAll: string;
            };
            reserve_vesting_liquidity_tokens: {
                liquidityTokenId: string;
                liquidityTokenAmount: string;
            };
            unreserve_and_relock_instance: {
                liquidityTokenId: string;
                relockInstanceIndex: string;
            };
        };
    };
    /**
     * Lookup283: pallet_multipurpose_liquidity::pallet::Error<T>
     **/
    PalletMultipurposeLiquidityError: {
        _enum: string[];
    };
    /**
     * Lookup285: cumulus_pallet_xcmp_queue::InboundChannelDetails
     **/
    CumulusPalletXcmpQueueInboundChannelDetails: {
        sender: string;
        state: string;
        messageMetadata: string;
    };
    /**
     * Lookup286: cumulus_pallet_xcmp_queue::InboundState
     **/
    CumulusPalletXcmpQueueInboundState: {
        _enum: string[];
    };
    /**
     * Lookup289: polkadot_parachain::primitives::XcmpMessageFormat
     **/
    PolkadotParachainPrimitivesXcmpMessageFormat: {
        _enum: string[];
    };
    /**
     * Lookup292: cumulus_pallet_xcmp_queue::OutboundChannelDetails
     **/
    CumulusPalletXcmpQueueOutboundChannelDetails: {
        recipient: string;
        state: string;
        signalsExist: string;
        firstIndex: string;
        lastIndex: string;
    };
    /**
     * Lookup293: cumulus_pallet_xcmp_queue::OutboundState
     **/
    CumulusPalletXcmpQueueOutboundState: {
        _enum: string[];
    };
    /**
     * Lookup295: cumulus_pallet_xcmp_queue::QueueConfigData
     **/
    CumulusPalletXcmpQueueQueueConfigData: {
        suspendThreshold: string;
        dropThreshold: string;
        resumeThreshold: string;
        thresholdWeight: string;
        weightRestrictDecay: string;
        xcmpMaxIndividualWeight: string;
    };
    /**
     * Lookup297: cumulus_pallet_xcmp_queue::pallet::Call<T>
     **/
    CumulusPalletXcmpQueueCall: {
        _enum: {
            service_overweight: {
                index: string;
                weightLimit: string;
            };
            suspend_xcm_execution: string;
            resume_xcm_execution: string;
            update_suspend_threshold: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            update_drop_threshold: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            update_resume_threshold: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            update_threshold_weight: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            update_weight_restrict_decay: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            update_xcmp_max_individual_weight: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
        };
    };
    /**
     * Lookup298: cumulus_pallet_xcmp_queue::pallet::Error<T>
     **/
    CumulusPalletXcmpQueueError: {
        _enum: string[];
    };
    /**
     * Lookup299: pallet_xcm::pallet::QueryStatus<BlockNumber>
     **/
    PalletXcmQueryStatus: {
        _enum: {
            Pending: {
                responder: string;
                maybeNotify: string;
                timeout: string;
            };
            VersionNotifier: {
                origin: string;
                isActive: string;
            };
            Ready: {
                response: string;
                at: string;
            };
        };
    };
    /**
     * Lookup302: xcm::VersionedResponse
     **/
    XcmVersionedResponse: {
        _enum: {
            V0: string;
            V1: string;
            V2: string;
        };
    };
    /**
     * Lookup303: xcm::v0::Response
     **/
    XcmV0Response: {
        _enum: {
            Assets: string;
        };
    };
    /**
     * Lookup304: xcm::v1::Response
     **/
    XcmV1Response: {
        _enum: {
            Assets: string;
            Version: string;
        };
    };
    /**
     * Lookup310: pallet_xcm::pallet::VersionMigrationStage
     **/
    PalletXcmVersionMigrationStage: {
        _enum: {
            MigrateSupportedVersion: string;
            MigrateVersionNotifiers: string;
            NotifyCurrentTargets: string;
            MigrateAndNotifyOldTargets: string;
        };
    };
    /**
     * Lookup312: pallet_xcm::pallet::Call<T>
     **/
    PalletXcmCall: {
        _enum: {
            send: {
                dest: string;
                message: string;
            };
            teleport_assets: {
                dest: string;
                beneficiary: string;
                assets: string;
                feeAssetItem: string;
            };
            reserve_transfer_assets: {
                dest: string;
                beneficiary: string;
                assets: string;
                feeAssetItem: string;
            };
            execute: {
                message: string;
                maxWeight: string;
            };
            force_xcm_version: {
                location: string;
                xcmVersion: string;
            };
            force_default_xcm_version: {
                maybeXcmVersion: string;
            };
            force_subscribe_version_notify: {
                location: string;
            };
            force_unsubscribe_version_notify: {
                location: string;
            };
            limited_reserve_transfer_assets: {
                dest: string;
                beneficiary: string;
                assets: string;
                feeAssetItem: string;
                weightLimit: string;
            };
            limited_teleport_assets: {
                dest: string;
                beneficiary: string;
                assets: string;
                feeAssetItem: string;
                weightLimit: string;
            };
        };
    };
    /**
     * Lookup313: xcm::VersionedXcm<Call>
     **/
    XcmVersionedXcm: {
        _enum: {
            V0: string;
            V1: string;
            V2: string;
        };
    };
    /**
     * Lookup314: xcm::v0::Xcm<Call>
     **/
    XcmV0Xcm: {
        _enum: {
            WithdrawAsset: {
                assets: string;
                effects: string;
            };
            ReserveAssetDeposit: {
                assets: string;
                effects: string;
            };
            TeleportAsset: {
                assets: string;
                effects: string;
            };
            QueryResponse: {
                queryId: string;
                response: string;
            };
            TransferAsset: {
                assets: string;
                dest: string;
            };
            TransferReserveAsset: {
                assets: string;
                dest: string;
                effects: string;
            };
            Transact: {
                originType: string;
                requireWeightAtMost: string;
                call: string;
            };
            HrmpNewChannelOpenRequest: {
                sender: string;
                maxMessageSize: string;
                maxCapacity: string;
            };
            HrmpChannelAccepted: {
                recipient: string;
            };
            HrmpChannelClosing: {
                initiator: string;
                sender: string;
                recipient: string;
            };
            RelayedFrom: {
                who: string;
                message: string;
            };
        };
    };
    /**
     * Lookup316: xcm::v0::order::Order<Call>
     **/
    XcmV0Order: {
        _enum: {
            Null: string;
            DepositAsset: {
                assets: string;
                dest: string;
            };
            DepositReserveAsset: {
                assets: string;
                dest: string;
                effects: string;
            };
            ExchangeAsset: {
                give: string;
                receive: string;
            };
            InitiateReserveWithdraw: {
                assets: string;
                reserve: string;
                effects: string;
            };
            InitiateTeleport: {
                assets: string;
                dest: string;
                effects: string;
            };
            QueryHolding: {
                queryId: string;
                dest: string;
                assets: string;
            };
            BuyExecution: {
                fees: string;
                weight: string;
                debt: string;
                haltOnError: string;
                xcm: string;
            };
        };
    };
    /**
     * Lookup318: xcm::v1::Xcm<Call>
     **/
    XcmV1Xcm: {
        _enum: {
            WithdrawAsset: {
                assets: string;
                effects: string;
            };
            ReserveAssetDeposited: {
                assets: string;
                effects: string;
            };
            ReceiveTeleportedAsset: {
                assets: string;
                effects: string;
            };
            QueryResponse: {
                queryId: string;
                response: string;
            };
            TransferAsset: {
                assets: string;
                beneficiary: string;
            };
            TransferReserveAsset: {
                assets: string;
                dest: string;
                effects: string;
            };
            Transact: {
                originType: string;
                requireWeightAtMost: string;
                call: string;
            };
            HrmpNewChannelOpenRequest: {
                sender: string;
                maxMessageSize: string;
                maxCapacity: string;
            };
            HrmpChannelAccepted: {
                recipient: string;
            };
            HrmpChannelClosing: {
                initiator: string;
                sender: string;
                recipient: string;
            };
            RelayedFrom: {
                who: string;
                message: string;
            };
            SubscribeVersion: {
                queryId: string;
                maxResponseWeight: string;
            };
            UnsubscribeVersion: string;
        };
    };
    /**
     * Lookup320: xcm::v1::order::Order<Call>
     **/
    XcmV1Order: {
        _enum: {
            Noop: string;
            DepositAsset: {
                assets: string;
                maxAssets: string;
                beneficiary: string;
            };
            DepositReserveAsset: {
                assets: string;
                maxAssets: string;
                dest: string;
                effects: string;
            };
            ExchangeAsset: {
                give: string;
                receive: string;
            };
            InitiateReserveWithdraw: {
                assets: string;
                reserve: string;
                effects: string;
            };
            InitiateTeleport: {
                assets: string;
                dest: string;
                effects: string;
            };
            QueryHolding: {
                queryId: string;
                dest: string;
                assets: string;
            };
            BuyExecution: {
                fees: string;
                weight: string;
                debt: string;
                haltOnError: string;
                instructions: string;
            };
        };
    };
    /**
     * Lookup335: pallet_xcm::pallet::Error<T>
     **/
    PalletXcmError: {
        _enum: string[];
    };
    /**
     * Lookup336: cumulus_pallet_xcm::pallet::Error<T>
     **/
    CumulusPalletXcmError: string;
    /**
     * Lookup337: cumulus_pallet_dmp_queue::ConfigData
     **/
    CumulusPalletDmpQueueConfigData: {
        maxIndividual: string;
    };
    /**
     * Lookup338: cumulus_pallet_dmp_queue::PageIndexData
     **/
    CumulusPalletDmpQueuePageIndexData: {
        beginUsed: string;
        endUsed: string;
        overweightCount: string;
    };
    /**
     * Lookup341: cumulus_pallet_dmp_queue::pallet::Call<T>
     **/
    CumulusPalletDmpQueueCall: {
        _enum: {
            service_overweight: {
                index: string;
                weightLimit: string;
            };
        };
    };
    /**
     * Lookup342: cumulus_pallet_dmp_queue::pallet::Error<T>
     **/
    CumulusPalletDmpQueueError: {
        _enum: string[];
    };
    /**
     * Lookup343: orml_xtokens::module::Call<T>
     **/
    OrmlXtokensModuleCall: {
        _enum: {
            transfer: {
                currencyId: string;
                amount: string;
                dest: string;
                destWeight: string;
            };
            transfer_multiasset: {
                asset: string;
                dest: string;
                destWeight: string;
            };
            transfer_with_fee: {
                currencyId: string;
                amount: string;
                fee: string;
                dest: string;
                destWeight: string;
            };
            transfer_multiasset_with_fee: {
                asset: string;
                fee: string;
                dest: string;
                destWeight: string;
            };
            transfer_multicurrencies: {
                currencies: string;
                feeItem: string;
                dest: string;
                destWeight: string;
            };
            transfer_multiassets: {
                assets: string;
                feeItem: string;
                dest: string;
                destWeight: string;
            };
        };
    };
    /**
     * Lookup344: xcm::VersionedMultiAsset
     **/
    XcmVersionedMultiAsset: {
        _enum: {
            V0: string;
            V1: string;
        };
    };
    /**
     * Lookup347: orml_xtokens::module::Error<T>
     **/
    OrmlXtokensModuleError: {
        _enum: string[];
    };
    /**
     * Lookup350: orml_unknown_tokens::module::Error<T>
     **/
    OrmlUnknownTokensModuleError: {
        _enum: string[];
    };
    /**
     * Lookup351: orml_xcm::module::Call<T>
     **/
    OrmlXcmModuleCall: {
        _enum: {
            send_as_sovereign: {
                dest: string;
                message: string;
            };
        };
    };
    /**
     * Lookup352: orml_xcm::module::Error<T>
     **/
    OrmlXcmModuleError: {
        _enum: string[];
    };
    /**
     * Lookup353: orml_asset_registry::module::Call<T>
     **/
    OrmlAssetRegistryModuleCall: {
        _enum: {
            register_asset: {
                metadata: string;
                assetId: string;
            };
            update_asset: {
                assetId: string;
                decimals: string;
                name: string;
                symbol: string;
                existentialDeposit: string;
                location: string;
                additional: string;
            };
        };
    };
    /**
     * Lookup356: orml_asset_registry::module::Error<T>
     **/
    OrmlAssetRegistryModuleError: {
        _enum: string[];
    };
    /**
     * Lookup357: pallet_treasury::Proposal<sp_core::crypto::AccountId32, Balance>
     **/
    PalletTreasuryProposal: {
        proposer: string;
        value: string;
        beneficiary: string;
        bond: string;
    };
    /**
     * Lookup359: pallet_treasury::pallet::Call<T, I>
     **/
    PalletTreasuryCall: {
        _enum: {
            propose_spend: {
                value: string;
                beneficiary: string;
            };
            reject_proposal: {
                proposalId: string;
            };
            approve_proposal: {
                proposalId: string;
            };
            spend: {
                amount: string;
                beneficiary: string;
            };
            remove_approval: {
                proposalId: string;
            };
        };
    };
    /**
     * Lookup361: frame_support::PalletId
     **/
    FrameSupportPalletId: string;
    /**
     * Lookup362: pallet_treasury::pallet::Error<T, I>
     **/
    PalletTreasuryError: {
        _enum: string[];
    };
    /**
     * Lookup363: pallet_sudo::pallet::Call<T>
     **/
    PalletSudoCall: {
        _enum: {
            sudo: {
                call: string;
            };
            sudo_unchecked_weight: {
                call: string;
                weight: string;
            };
            set_key: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            sudo_as: {
                who: string;
                call: string;
            };
        };
    };
    /**
     * Lookup365: pallet_sudo_origin::pallet::Call<T>
     **/
    PalletSudoOriginCall: {
        _enum: {
            sudo: {
                call: string;
            };
            sudo_unchecked_weight: {
                call: string;
                weight: string;
            };
            sudo_as: {
                who: string;
                call: string;
            };
        };
    };
    /**
     * Lookup366: pallet_collective::pallet::Call<T, I>
     **/
    PalletCollectiveCall: {
        _enum: {
            set_members: {
                newMembers: string;
                prime: string;
                oldCount: string;
            };
            execute: {
                proposal: string;
                lengthBound: string;
            };
            propose: {
                threshold: string;
                proposal: string;
                lengthBound: string;
            };
            vote: {
                proposal: string;
                index: string;
                approve: string;
            };
            close: {
                proposalHash: string;
                index: string;
                proposalWeightBound: string;
                lengthBound: string;
            };
            disapprove_proposal: {
                proposalHash: string;
            };
        };
    };
    /**
     * Lookup367: pallet_elections_phragmen::pallet::Call<T>
     **/
    PalletElectionsPhragmenCall: {
        _enum: {
            vote: {
                votes: string;
                value: string;
            };
            remove_voter: string;
            submit_candidacy: {
                candidateCount: string;
            };
            renounce_candidacy: {
                renouncing: string;
            };
            remove_member: {
                who: string;
                hasReplacement: string;
            };
            clean_defunct_voters: {
                numVoters: string;
                numDefunct: string;
            };
        };
    };
    /**
     * Lookup368: pallet_elections_phragmen::Renouncing
     **/
    PalletElectionsPhragmenRenouncing: {
        _enum: {
            Member: string;
            RunnerUp: string;
            Candidate: string;
        };
    };
    /**
     * Lookup369: pallet_bootstrap::pallet::Call<T>
     **/
    PalletBootstrapCall: {
        _enum: {
            provision_vested: {
                tokenId: string;
                amount: string;
            };
            provision: {
                tokenId: string;
                amount: string;
            };
            whitelist_accounts: {
                accounts: string;
            };
            schedule_bootstrap: {
                firstTokenId: string;
                secondTokenId: string;
                idoStart: string;
                whitelistPhaseLength: string;
                publicPhaseLenght: string;
                maxFirstToSecondRatio: string;
                promoteBootstrapPool: string;
            };
            update_promote_bootstrap_pool: {
                promoteBootstrapPool: string;
            };
            claim_liquidity_tokens: string;
            claim_and_activate_liquidity_tokens: string;
            finalize: {
                limit: string;
            };
            claim_liquidity_tokens_for_account: {
                account: string;
                activateRewards: string;
            };
        };
    };
    /**
     * Lookup370: pallet_utility::pallet::Call<T>
     **/
    PalletUtilityCall: {
        _enum: {
            batch: {
                calls: string;
            };
            as_derivative: {
                index: string;
                call: string;
            };
            batch_all: {
                calls: string;
            };
            dispatch_as: {
                asOrigin: string;
                call: string;
            };
            force_batch: {
                calls: string;
            };
        };
    };
    /**
     * Lookup372: mangata_rococo_runtime::OriginCaller
     **/
    MangataRococoRuntimeOriginCaller: {
        _enum: {
            system: string;
            __Unused1: string;
            __Unused2: string;
            __Unused3: string;
            Void: string;
            __Unused5: string;
            __Unused6: string;
            __Unused7: string;
            __Unused8: string;
            __Unused9: string;
            __Unused10: string;
            __Unused11: string;
            __Unused12: string;
            __Unused13: string;
            __Unused14: string;
            __Unused15: string;
            __Unused16: string;
            __Unused17: string;
            __Unused18: string;
            __Unused19: string;
            __Unused20: string;
            __Unused21: string;
            __Unused22: string;
            __Unused23: string;
            __Unused24: string;
            __Unused25: string;
            __Unused26: string;
            __Unused27: string;
            __Unused28: string;
            __Unused29: string;
            __Unused30: string;
            PolkadotXcm: string;
            CumulusXcm: string;
            __Unused33: string;
            __Unused34: string;
            __Unused35: string;
            __Unused36: string;
            __Unused37: string;
            __Unused38: string;
            __Unused39: string;
            __Unused40: string;
            __Unused41: string;
            __Unused42: string;
            __Unused43: string;
            __Unused44: string;
            __Unused45: string;
            __Unused46: string;
            __Unused47: string;
            __Unused48: string;
            __Unused49: string;
            __Unused50: string;
            Council: string;
        };
    };
    /**
     * Lookup373: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
     **/
    FrameSupportDispatchRawOrigin: {
        _enum: {
            Root: string;
            Signed: string;
            None: string;
        };
    };
    /**
     * Lookup374: pallet_xcm::pallet::Origin
     **/
    PalletXcmOrigin: {
        _enum: {
            Xcm: string;
            Response: string;
        };
    };
    /**
     * Lookup375: cumulus_pallet_xcm::pallet::Origin
     **/
    CumulusPalletXcmOrigin: {
        _enum: {
            Relay: string;
            SiblingParachain: string;
        };
    };
    /**
     * Lookup376: pallet_collective::RawOrigin<sp_core::crypto::AccountId32, I>
     **/
    PalletCollectiveRawOrigin: {
        _enum: {
            Members: string;
            Member: string;
            _Phantom: string;
        };
    };
    /**
     * Lookup377: sp_core::Void
     **/
    SpCoreVoid: string;
    /**
     * Lookup378: pallet_sudo::pallet::Error<T>
     **/
    PalletSudoError: {
        _enum: string[];
    };
    /**
     * Lookup379: pallet_sudo_origin::pallet::Error<T>
     **/
    PalletSudoOriginError: string;
    /**
     * Lookup381: pallet_collective::Votes<sp_core::crypto::AccountId32, BlockNumber>
     **/
    PalletCollectiveVotes: {
        index: string;
        threshold: string;
        ayes: string;
        nays: string;
        end: string;
    };
    /**
     * Lookup382: pallet_collective::pallet::Error<T, I>
     **/
    PalletCollectiveError: {
        _enum: string[];
    };
    /**
     * Lookup384: pallet_elections_phragmen::SeatHolder<sp_core::crypto::AccountId32, Balance>
     **/
    PalletElectionsPhragmenSeatHolder: {
        who: string;
        stake: string;
        deposit: string;
    };
    /**
     * Lookup385: pallet_elections_phragmen::Voter<sp_core::crypto::AccountId32, Balance>
     **/
    PalletElectionsPhragmenVoter: {
        votes: string;
        stake: string;
        deposit: string;
    };
    /**
     * Lookup386: pallet_elections_phragmen::pallet::Error<T>
     **/
    PalletElectionsPhragmenError: {
        _enum: string[];
    };
    /**
     * Lookup388: pallet_bootstrap::BootstrapPhase
     **/
    PalletBootstrapBootstrapPhase: {
        _enum: string[];
    };
    /**
     * Lookup391: pallet_bootstrap::pallet::Error<T>
     **/
    PalletBootstrapError: {
        _enum: string[];
    };
    /**
     * Lookup392: pallet_utility::pallet::Error<T>
     **/
    PalletUtilityError: {
        _enum: string[];
    };
    /**
     * Lookup395: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
     **/
    FrameSystemExtensionsCheckSpecVersion: string;
    /**
     * Lookup396: frame_system::extensions::check_tx_version::CheckTxVersion<T>
     **/
    FrameSystemExtensionsCheckTxVersion: string;
    /**
     * Lookup397: frame_system::extensions::check_genesis::CheckGenesis<T>
     **/
    FrameSystemExtensionsCheckGenesis: string;
    /**
     * Lookup400: frame_system::extensions::check_nonce::CheckNonce<T>
     **/
    FrameSystemExtensionsCheckNonce: string;
    /**
     * Lookup401: frame_system::extensions::check_weight::CheckWeight<T>
     **/
    FrameSystemExtensionsCheckWeight: string;
    /**
     * Lookup402: pallet_transaction_payment::ChargeTransactionPayment<T>
     **/
    PalletTransactionPaymentChargeTransactionPayment: string;
    /**
     * Lookup403: mangata_rococo_runtime::Runtime
     **/
    MangataRococoRuntimeRuntime: string;
};
export default _default;
